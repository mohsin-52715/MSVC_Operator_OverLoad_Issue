
#pragma     once

// the only compiler headers we allow in the 'hpp files' chain

// clang-format off

// to disable fopen strcpy etc. warnings on unsafe API. TODO: these to be removed once we move certain stuff like DevSupport and Parser out of these APIs
#define     _CRT_SECURE_NO_WARNINGS

#include    <cstdint>           // basic definitions like int8_t etc. are found here
#include    <limits>            // used to capture the 'max' of a given base-type
#include    <type_traits>       // used in various templates to determine nature of template parameter

#include    <inttypes.h>        // TODO: this needs to move to DevSupport along with 'cstdio' for 'printf' support


// This is our 'shortcut' alias for TWAppConstants and TWAppOptions
#define TWConst(x)  TWAppProduct::TWAppConstants::x
#define TWOpt(x)    TWAppProduct::TWAppOptions::x

// our mapped definitions - which are the only allowed internal primitives

using   TUInt8 = uint8_t;
using   TUInt16 = uint16_t;
using   TUInt32 = uint32_t;
using   TUInt64 = uint64_t;

using   TInt8 = int8_t;
using   TInt16 = int16_t;
using   TInt32 = int32_t;
using   TInt64 = int64_t;

using   VPtr = void*;
using   CVPtr = void const*;

// max limits of each of our values

static  constexpr   TUInt8      MAX_TUINT8{ (std::numeric_limits<TUInt8>::max) () };
static  constexpr   TUInt16     MAX_TUINT16{ (std::numeric_limits<TUInt16>::max) () };
static  constexpr   TUInt32     MAX_TUINT32{ (std::numeric_limits<TUInt32>::max) () };
static  constexpr   TUInt64     MAX_TUINT64{ (std::numeric_limits<TUInt64>::max) () };

static  constexpr   TInt8       MAX_TINT8{ (std::numeric_limits<TInt8>::max) () };
static  constexpr   TInt16      MAX_TINT16{ (std::numeric_limits<TInt16>::max) () };
static  constexpr   TInt32      MAX_TINT32{ (std::numeric_limits<TInt32>::max) () };
static  constexpr   TInt64      MAX_TINT64{ (std::numeric_limits<TInt64>::max) () };

static  constexpr   TUInt64     MAX_MULTIPLE_OF_2_TUINT64{ ((TUInt64)0xFFFF'FFFF'FFFF'FFFE) };
static  constexpr   TUInt64     MAX_MULTIPLE_OF_8_TUINT64{ ((TUInt64)0xFFFF'FFFF'FFFF'FFF8) };
static  constexpr   TUInt64     MAX_MULTIPLE_OF_64_TUINT64{ ((TUInt64)0xFFFF'FFFF'FFFF'FFC0) };

static  constexpr   TUInt64     MAX_POWER_OF_2_TUINT64{ ((TUInt64)0x8000'0000'0000'0000) };
static  constexpr   TUInt64     MAX_POWER_OF_4_TUINT64{ ((TUInt64)0x4000'0000'0000'0000) };




 /********** End of Top Area which is copied as-is from TWUniversalSchema_TopText.hpp ***********/


class eTWSchemaID  {

public:
    using BaseType = TUInt32;
    enum class Enum : BaseType { //(ENUM-ID: 3)

        UNKNOWN = 0,
        PRIMARY = 1,
        SCHEMA = 2,
        DERIVED_SCHEMA = 3
    };
    
    enum class eTWSchemaDCSection : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWSchemaDCSection (1))

        UNKNOWN = 0,
        PRIMARY = 1,
        SCHEMA = 2,
        HASH_INDEX = 210
    };

    enum class eTWSchemaObjType : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWSchemaObjType (2))

        UNKNOWN = 0,
        DERIVED_SCHEMA = 3,
        DERIVED_SCHEMA_SECTION = 8,
        DERIVED_SCHEMA_OBJECT = 11
    };
    

    enum class eTWDERIVED_SCHEMA : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWDERIVED_SCHEMA (3))

        VERSION = 4,
        CONTENT_ID = 5,
        SECTION_START_ID = 6,
        SECTION_END_ID = 7,
        DERIVED_SCHEMA_SECTION = 8,
        START_ID = 9,
        END_ID = 10,
        DERIVED_SCHEMA_OBJECT = 11,
    };

    enum class eTWDERIVED_SCHEMA_SECTION : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWDERIVED_SCHEMA_SECTION (4))

        CONTENT_ID = 5,
        START_ID = 9,
        END_ID = 10,
        DERIVED_ID = 12,
        HASH_SECTION_ID = 13,
        DERIVED_SCHEMA_SEC_OBJECT = 14,
    };

    enum class eTWDERIVED_SCHEMA_OBJECT : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWDERIVED_SCHEMA_OBJECT (5))

        CONTENT_ID = 5,
        START_ID = 9,
        END_ID = 10,
        DERIVED_SCHEMA_OBJ_FIELD = 15,
    };

    enum class eTWDERIVED_SCHEMA_OBJ_FIELD : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWDERIVED_SCHEMA_OBJ_FIELD (6))

        CONTENT_ID = 5,
        DERIVED_ID = 12,
    };

    enum class eTWOBJECT_LIST : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWOBJECT_LIST (7))

        VALUE = 17,
    };

    enum class eTWHASH_OBJECT : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWHASH_OBJECT (8))

        GET_INDEXDETAIL_ID = 19,
        GET_OBJID_ID = 20,
        HASHSUBOBJECT = 44,
    };

    enum class eTWINDEX_OBJECT : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWINDEX_OBJECT (9))

        GET_INDEX_ID = 22,
        INDEX_ELEM = 121,
        PARENT_INDEX_ID = 124,
        ID_CAPACITY = 125,
        ID_RANGE_END = 126,
        ID_CURRENT_CAPACITY = 127,
        SUB_INDEX_ID = 128,
        TIME_BUCKET_TYPE = 129,
        TIME_REFERENCE_INDEX = 130,
        TIME_INDEX_ID = 131,
        REFID_INDEX_ID = 132,
    };

    enum class eTWAMOUNT : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWAMOUNT (10))

        QUALIFIED_NUMS = 24,
        EXCHG_RATES = 25,
    };

    enum class eTWQUANTITY : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWQUANTITY (11))

        QUALIFIED_NUMS = 24,
        UOM_FACTOR = 27,
    };

    enum class eTWRATEX : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWRATEX (12))

        ID_VAL_PAIR1 = 29,
        ID_VAL_PAIR2 = 30,
        INPUT_STRING = 31,
    };

    enum class eTWDATERANGE : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWDATERANGE (13))

        START_DATE = 33,
        END_DATE = 34,
        DIFF_DAYS = 35,
        PERIOD_STRING = 36,
    };

    enum class eTWTIMERANGE : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWTIMERANGE (14))

        PERIOD_STRING = 36,
        START_TIME = 38,
        END_TIME = 39,
        DIFF_SECS = 40,
    };

    enum class eTWHASHKEY_EXTENDED : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWHASHKEY_EXTENDED (15))

        HASHKEY = 42,
        HASHVALUE = 43,
    };

    enum class eTWHASHSUBOBJECT : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWHASHSUBOBJECT (16))

        HASHKEY = 42,
        OBJID = 45,
    };

    enum class eTWBASE_HASH_OBJECT : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWBASE_HASH_OBJECT (17))

        HASHKEY = 42,
    };

    enum class eTWLRUTIMER_PROPERTIES : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWLRUTIMER_PROPERTIES (18))

        CACHETYPE = 48,
        CACHE_POINTER = 49,
        FAST_TIMER = 50,
        MEDIUM_TIMER = 51,
        SLOW_TIMER = 52,
        LOW_PRIORITY = 53,
        REGULAR_PRIORITY = 54,
        HIGH_PRIORITY = 55,
    };

    enum class eTWID_PROPERTIES : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWID_PROPERTIES (19))

        IDTYPE = 57,
        QUARANTINE = 58,
        IDMASK = 59,
        RESERVED_IDS = 60,
        IS_SUB_SHARDED = 61,
        NUMBER_OF_SUB_SHARDS = 62,
        SUB_SHARD_ALIVE_TIME = 63,
    };

    enum class eTWHASHID_PROPERTIES : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWHASHID_PROPERTIES (20))

        HASHID_STORE_TYPE = 65,
        HASHID_STORE_POINTER = 66,
        HASHMASK = 67,
    };

    enum class eTWHASHINDEX_PROPERTIES : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWHASHINDEX_PROPERTIES (21))

        HASHID_STORE_TYPE = 65,
        HASHMASK = 67,
        HASHINDEX_STORE_POINTER = 69,
        INITIAL_PRIMARY_INDEX_RANGE = 70,
        INDEX_CAPACITY_INCREASE_STEP = 71,
        MAX_INDEX_ELEMS = 72,
        SPLIT_FACTOR = 73,
        DEFAULT_TIME_INDEX_BUCKET_TYPE = 74,
        REFID_BUCKET_FACTOR = 75,
    };

    enum class eTWHASHSTRINGINDEX_PROPERTIES : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWHASHSTRINGINDEX_PROPERTIES (22))

        HASHID_STORE_TYPE = 65,
        HASHMASK = 67,
        HASHSTRINGINDEX_STORE_POINTER = 77,
    };

    enum class eTWHASHAGGR_PROPERTIES : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWHASHAGGR_PROPERTIES (23))

        HASHID_STORE_TYPE = 65,
        HASHMASK = 67,
        HASHAGGR_STORE_POINTER = 79,
    };

    enum class eTWDATA_PROPERTIES : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWDATA_PROPERTIES (24))

        HASHKEY_TYPE = 81,
        SCHEMA_ID = 82,
        LOCAL_INDEX_FIELD = 83,
        LOCAL_STRINGINDEX_FIELD = 84,
        LOCAL_AGGR_FIELD = 85,
    };

    enum class eTWDS_PROPERTIES : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWDS_PROPERTIES (25))

        LRUTIMER_PROPERTIES = 47,
        ID_PROPERTIES = 56,
        HASHID_PROPERTIES = 64,
        HASHINDEX_PROPERTIES = 68,
        HASHSTRINGINDEX_PROPERTIES = 76,
        HASHAGGR_PROPERTIES = 78,
        DATA_PROPERTIES = 80,
        STORE_TYPE = 87,
        STOREID = 88,
        SUBSTOREID = 89,
        GENERATIONID = 90,
        REPLICAID = 91,
        HASHIDDS_DEFINITION = 92,
    };

    enum class eTWDC_PROPERTIES : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWDC_PROPERTIES (26))

        LRUTIMER_PROPERTIES = 47,
        DS_PROPERTIES = 86,
        DC_TYPE = 94,
        DCID = 95,
    };

    enum class eTWDCMGR_PROPERTIES : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWDCMGR_PROPERTIES (27))

        LRUTIMER_PROPERTIES = 47,
        DS_PROPERTIES = 86,
        DC_PROPERTIES = 93,
        TIERID = 97,
    };

    enum class eTWINDEX_VALUE : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWINDEX_VALUE (28))

        VALUE = 17,
        FIELDID = 99,
    };

    enum class eTWTIME_INDEX_VALUE : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWTIME_INDEX_VALUE (29))

        VALUE = 17,
        FIELDID = 99,
    };

    enum class eTWREFID_INDEX_VALUE : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWREFID_INDEX_VALUE (30))

        VALUE = 17,
        FIELDID = 99,
    };

    enum class eTWSTRING_INDEX_VALUE : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWSTRING_INDEX_VALUE (31))

        INDEX_VALUE = 98,
        STRING_WORD = 103,
    };

    enum class eTWTIME_FILTER_DETAIL : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWTIME_FILTER_DETAIL (32))

        FIELDID = 99,
        FOR_TIME = 105,
        FROM_TIME = 106,
        TO_TIME = 107,
    };

    enum class eTWINDEX_ELEM_FILTER_DETAIL : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWINDEX_ELEM_FILTER_DETAIL (33))

        FOR_TIME = 105,
        TO_TIME = 107,
        USE_APPOBJTYPEFILTER = 109,
        APPOBJTYPE_SCHEMAID = 110,
        USE_STRINGFILTER = 111,
        STRINGKEY = 112,
        COMPARE_SCOPE = 113,
        STRING_SCHEMAID = 114,
        USE_TIMEFILTER = 115,
        FROM_TME = 116,
        TIME_SCHEMAID = 117,
        USE_REFIDFILTER = 118,
        REFID = 119,
        REFID_SCHEMAID = 120,
    };

    enum class eTWINDEX_ELEM : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWINDEX_ELEM (34))

        VALUE = 17,
        OBJID = 45,
        FIELDID = 99,
        TIME_INDEX_VALUE = 100,
        REFID_INDEX_VALUE = 101,
        OBJTYPE = 122,
        INDEX_DATA = 123,
    };

    enum class eTWAPPLICATION_SESSION_OBJ : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWAPPLICATION_SESSION_OBJ (35))

        APPLICATION_NAME = 134,
        APPLICATION_BASENAME = 135,
        BOOTSCHEMADB_INITIALSTATE = 136,
        CORESCHEMADB_INITIALSTATE = 137,
        CORECONFIGDB_INITIALSTATE = 138,
        USERCONFIGDB_INITIALSTATE = 139,
        CACHEDB_INITIALSTATE = 140,
        NETWORK_NAME = 141,
        MACHINE_NAME = 142,
        DEVICE_NAME = 143,
        OS_NAME = 144,
        OS_VERSION = 145,
        OS_LANGUAGE = 146,
    };

    enum class eTWAPPLICATION_PATHS_OBJ : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWAPPLICATION_PATHS_OBJ (36))

        APPLICATION_PATH = 148,
        APPLICATION_FILENAME = 149,
        BOOTSCHEMA_PATH = 150,
        APPDB_PATH = 151,
        ADMIN_PATH = 152,
        USERDATA_DEFAULT_PATH = 153,
        USERDATA_DEFAULT_BACKUP_PATH = 154,
        BASE_CURRENT_PATH = 155,
        PROCESSIDDB_FILENAME = 156,
    };

    enum class eTWAPPLICATION_PARMS_OBJ : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWAPPLICATION_PARMS_OBJ (37))

        APPLICATION_PARMS = 158,
        COMPANY_FILENAME = 159,
        MISSING_COMPANY_FILENAME = 160,
        NOACCESS_COMPANY_FILENAME = 161,
        CAPSULE_FILENAME = 162,
        MISSING_CAPSULE_FILENAME = 163,
        NOACCESS_CAPSULE_FILENAME = 164,
        INVALID_FILENAME = 165,
        TWIN_OS_PROCESSID = 166,
        TWIN_RECV_TIME_TICKS = 167,
        TWIN_TRANSFER_CONFIRMED = 168,
        PARMS_HANDED_OVER = 169,
    };

    enum class eTWAPPLICATION_TWIN_OBJ : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWAPPLICATION_TWIN_OBJ (38))

        APPLICATION_PARMS_OBJ = 157,
    };

    enum class eTWSTART_WINDOW_REQDATA : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWSTART_WINDOW_REQDATA (39))

        APPLICATION_PARMS_OBJ = 157,
    };

    enum class eTWHANDOVER_TWIN_REQDATA : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWHANDOVER_TWIN_REQDATA (40))

        APPLICATION_PARMS_OBJ = 157,
        APPLICATION_TWIN_OBJ = 170,
    };

    enum class eTWCOREDISKIO_OPERATION_REQ_PARMS : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWCOREDISKIO_OPERATION_REQ_PARMS (41))

        DISK_IO_OPERATION = 174,
        IS_FOR_DISKFILE = 175,
        ABSOLUTE_FILE_PATH = 176,
        BLOCK_SIZE = 177,
        IS_OPEN_FIRST = 178,
        DISK_FILE_SIZE = 179,
        IS_CREATED = 180,
        IS_OVERWRITE = 181,
        IS_WITH_TIME_CHANGE = 182,
        IS_READ_ONLY = 183,
        IS_HIDDEN = 184,
        IS_DIRECT_MODE = 185,
        IS_ASSET_FILE = 186,
        DISK_FILE_POINTER = 187,
        IS_READ_LOCK = 188,
        OFFSET = 189,
        BUFFER = 190,
        SIZE = 191,
        BLOCK_NUMBER = 192,
        TIME_OUT = 193,
        ABSOLUTE_PATH = 194,
        DRIVE_PATH = 195,
        SOURCE_FILE_PATH = 196,
        DEST_FILE_PATH = 197,
        SET_READ_ONLY = 198,
        IS_INCLUDE_HIDDEN = 199,
    };

    enum class eTWCOREDISKIO_OPERATION_RESP_PARMS : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWCOREDISKIO_OPERATION_RESP_PARMS (42))

        ABSOLUTE_FILE_PATH = 176,
        BLOCK_SIZE = 177,
        DISK_FILE_SIZE = 179,
        IS_CREATED = 180,
        IS_READ_ONLY = 183,
        DISK_FILE_POINTER = 187,
        BUFFER = 190,
        FAIL_PATH = 201,
        FILE_LIST = 202,
        DIR_LIST = 203,
        TIME_STAMP = 204,
        IS_ALREADY_EXISTING = 205,
        IS_DRIVE_VALID = 206,
    };

    enum class eTWHANDLE_DISKIO_REQ_DATA : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWHANDLE_DISKIO_REQ_DATA (43))

        COREDISKIO_OPERATION_REQ_PARMS = 173,
    };

    enum class eTWHANDLE_DISKIO_RESP_DATA : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWHANDLE_DISKIO_RESP_DATA (44))

        COREDISKIO_OPERATION_RESP_PARMS = 200,
    };

    enum class eTWCONSUME_COMPLETE_HANDOVER_BY_TWIN_REQDATA : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWCONSUME_COMPLETE_HANDOVER_BY_TWIN_REQDATA (45))

        TWIN_OS_PROCESSID = 166,
    };

    enum class eTWDC_COMPANY_OBJ : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWDC_COMPANY_OBJ (46))

        DC_COMPANY_PATH = 212,
        DC_COMPANY_NAME = 213,
    };

    enum class eTWEVENT_STAGE_REQUESTCONTEXT_SCHEMA : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWEVENT_STAGE_REQUESTCONTEXT_SCHEMA (47))

        OS_LANGUAGE = 146,
        STAGE_SCHEMA_ID = 215,
        USER_LANGUAGE = 216,
        USER_ID = 217,
        AUTHENTICATED_USER_ID = 218,
        STAGE_STATUS = 219,
        STAGE_POP = 220,
        STAGE_OWNER = 221,
        STAGE_FUNCTION_PTR = 222,
        STAGE_CONTINUATION_FUNCTION_PTR = 223,
        STAGE_CONTINUATION_CONDITION = 224,
        STAGE_CONTINUATION_API = 225,
        STAGE_CONTINUATION_DESTID = 226,
        STAGE_CONTINUATION_DESTID_TYPE = 227,
        STAGE_APIID = 228,
        STAGE_APIOWNER = 229,
        STAGE_TWAPISTATICFUNC = 230,
        STAGE_APICLASSMEMBERFUNC = 231,
        STAGE_DESTID = 232,
        STAGE_DESTID_TYPE = 233,
        COMMMGR_CALLBACK_FUNC = 234,
        TASKMODE_WAIT_ON_TASK = 235,
        TASKMODE_TASKCONSUMERFUNC = 236,
        TASKMODE_TOTAL_TASKS = 237,
        TASKMODE_SUCCESS_CONDITION = 238,
        TASKMODE_TASKS_DONE = 239,
        TASKMODE_TOTAL_SUCCESS = 240,
    };

    enum class eTWTWEVENT_OBJ : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWTWEVENT_OBJ (48))

        TWEVENT_ISEXECUTED = 242,
        TWEVENT_EVENTID = 243,
        TWEVENT_COMMID = 244,
        TWEVENT_PARENTID = 245,
        TWEVENT_TIMEDTASKID = 246,
        TWEVENT_ISTIMEDEVENTPERIODIC = 247,
        TWEvent_INTERESTEDEVENTS = 248,
        EVENT_STAGE_REQUESTCONTEXT = 249,
        EVENT_STAGE_INPUT = 250,
        EVENT_STAGE_OUTPUT = 251,
        EVENT_STAGE_SCRATCHPAD = 252,
    };

    enum class eTWINDIRECT_ROUTE_OBJ : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWINDIRECT_ROUTE_OBJ (49))

        NEXT_HOP_DESTID = 254,
        DEST_DESTID_ON_NEXT_HOP = 255,
        NUM_LEGS = 256,
        MTU = 257,
        LAST_STATE = 258,
        LAST_STATE_TIME = 259,
    };

    enum class eTWWIP_STEP : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWWIP_STEP (50))

        PACKET_TYPE = 261,
        NUM_RETRIES_AVAILABLE = 262,
        SUCCEEDED = 263,
        COMPLETION_ALERTABLE_WAIT = 264,
    };

    enum class eTWDIRECT_ROUTE_OBJ : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWDIRECT_ROUTE_OBJ (51))

        MTU = 257,
        LAST_STATE = 258,
        LAST_STATE_TIME = 259,
        WIP_STEP = 260,
        IPADDRESS = 266,
        IPID_SOURCE = 267,
        IPID_FOUND_REACHABLE_ONCE = 268,
        SRC_IPID_AS_SEEN_BY_DEST = 269,
        LPTTELEM = 270,
        STATE_CHANGE_ALERTABLE_WAIT = 271,
        PINGING_ON_BASE_DIT_ALERTABLE_WAIT = 272,
        REGISTERED_FOR_PING_ON_BASE_DIT_ALERTABLE_WAIT = 273,
        REACHED_ON_SIMPLE_PORTS_ALERTABLE_WAIT = 274,
        REGULAR_PORTS_REMEDY_SUCCEEDED_ALERTABLE_WAIT = 275,
        REGULAR_PORTS_REMEDY_APPLIED_ALERTABLE_WAIT = 276,
        CONTACTED_ON_SIMPLE_PORTS_ALERTABLE_WAIT = 277,
        REGISTER_WITH_ME_RECEIVED = 278,
    };

    enum class eTWOTHER_DIRECT_IPIDS : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWOTHER_DIRECT_IPIDS (52))

        IPADDRESS = 266,
        IPID_SOURCE = 267,
    };

    enum class eTWDEST_OBJ : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWDEST_OBJ (53))

        INDIRECT_ROUTE_OBJ = 253,
        DIRECT_ROUTE_OBJ = 265,
        OTHER_DIRECT_IPIDS = 279,
        PUID = 281,
        APP_TYPE = 282,
        PRODUCT_ID = 283,
        BUILD_VERSION = 284,
        IS_BOOTSTRAPPED = 285,
        UNIVERSAL_ID = 286,
        DIT_VERSION = 287,
        DIT_PORT = 288,
        SIMPLE_PORT = 289,
        MSG_IDS = 290,
        SRC_DIT_SOCK_ID = 291,
        SRC_DESTID_ON_DEST = 292,
        DIRECT_ROUTE_LPTTOFFSET = 293,
    };

    enum class eTWIOROOT_OBJ : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWIOROOT_OBJ (54))

        PUID = 281,
        IOROOT_TYPE = 295,
        IOROOT_NAME = 296,
        IS_PROCESS_EXCLUSIVE = 297,
        IS_NETWORKED_OR_REMOVABLE = 298,
        IOBASEPATH_IDS = 299,
        IOROOT_ALIASES = 300,
        IOROOT_STATUS = 301,
        PENDING_TASKS_QUEUE_PTR = 302,
    };

    enum class eTWTAF_FILE_INFO : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWTAF_FILE_INFO (55))

        PUID = 281,
        IOBASEPATH_ID = 304,
        ACTIVE_TAF_ID = 305,
    };

    enum class eTWDB_INFO : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWDB_INFO (56))

        PUID = 281,
        DUID = 307,
        MODE = 308,
    };

    enum class eTWIOBASEPATH_OBJ : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWIOBASEPATH_OBJ (57))

        TAF_FILE_INFO = 303,
        ACTIVE_TAF_ID = 305,
        DB_INFO = 306,
        IOROOT_ID = 310,
        IOBASEPATH_NAME = 311,
        IOBASEPATH_STATE = 312,
        FILE_INFO = 313,
        DIR_INFO = 314,
        IOBASEPATH_ALIASES = 315,
        LEADER_PUID = 316,
        ALTERNATE_LEADER_PUID = 317,
    };

    enum class eTWTAF_RUNNING_INFO : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWTAF_RUNNING_INFO (58))

        PUID = 281,
        RUNNING_NUMBER = 319,
        RUNNING_NUMBER_UTT = 320,
    };

    enum class eTWTAF_FILE_DATA : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWTAF_FILE_DATA (59))

        DEVICE_NAME = 143,
        OS_NAME = 144,
        IPADDRESS = 266,
        APP_TYPE = 282,
        TAF_RUNNING_INFO = 318,
        RUNNING_NUMBER = 319,
        RUNNING_NUMBER_UTT = 320,
        ONLINE_PUID = 322,
        OFFLINE_PUID = 323,
        APP_VERSION = 324,
        PROCESS_TYPE = 325,
        PROCESS_CLASS = 326,
    };

    enum class eTWTWDC_SECTION_METADATA_SCHEMA : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWTWDC_SECTION_METADATA_SCHEMA (60))

        DC_SECTION_CONTENT_LRUTIMER = 328,
        DC_SECTION_MESSAGE_DRIVEN = 329,
    };

    enum class eTWTWDC_METADATA_SCHEMA : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWTWDC_METADATA_SCHEMA (61))

        DC_TYPE = 94,
        TWDC_SECTION_METADATA_SCHEMA = 327,
        ID_MAX_BIT_SIZE = 331,
        ID_REUSE = 332,
        ID_QUARANTINE_TIME = 333,
        DC_PURPOSE = 334,
        DC_IS_PERSISTED = 335,
        DC_CONTENT_OBJECT = 336,
        DC_IS_MIRRORED = 337,
        DC_NEED_VERSIONING = 338,
        DC_PRESERVE_HISTORY = 339,
        DC_OPEN_ONLY_IN_EXCLUSIVE_MODE = 340,
        DC_ACCEPTABLE_OPEN_MODES = 341,
        DC_MULTI_SECTION = 342,
        DC_REPLICA_ID = 343,
        DC_GENERATION_ID = 344,
        DC_SHARDED_ACROSS_PROCESS = 345,
        DC_CONTENT_SHARDED_WITHIN_DC = 346,
        DC_SCHEMA_ID = 347,
        DC_FILENAME = 348,
        DC_CREATE_ALWAYS = 349,
        DC_INITIAL_SIZE = 350,
        DC_FILEPATH = 351,
        DC_FILE_EXTENSION = 352,
        DC_FAILED_PATH = 353,
        DC_FILE_TYPE = 354,
        DC_APP_BUILD_VERSION = 355,
        DC_OPEN_MODE = 356,
        DC_OPEN_FAIL_IF_MODE_ERROR = 357,
        DC_OPEN_FAIL_IF_DOESNOTEXIST = 358,
        DC_CREATE_FAIL_IF_EXIST = 359,
        DC_OPEN_CREATE_IF_DOESNOTEXIST = 360,
        DC_RESET_ON_OPEN = 361,
        DC_VERIFY_ON_OPEN = 362,
        DC_RESET_ON_VERIFY = 363,
        DC_OPEN_VALIDATE_BUILD_VERSION = 364,
        DC_APPLICATION_DATA = 365,
        DC_DUID = 366,
    };

    enum class eTWVERSION_OBJECT : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWVERSION_OBJECT (62))

        VERSION_TIME = 368,
        VERSION_BLOCKNUM = 369,
        VERSION_OBJID = 370,
        VERSION_MGMT_BLOCKNUM = 371,
    };

    enum class eTWTWAPI_IS_DUPLICATE_DUID_REQ_OBJ_ID : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWTWAPI_IS_DUPLICATE_DUID_REQ_OBJ_ID (63))

        TWAPI_DUID_FLD_ID = 373,
        TWAPI_PUID_FLD_ID = 374,
        TWAPI_RUNNING_NUMBER_FLD_ID = 375,
    };

    enum class eTWTWAPI_IS_DUPLICATE_DUID_RESP_OBJ_ID : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWTWAPI_IS_DUPLICATE_DUID_RESP_OBJ_ID (64))

        TWAPI_DUID_FLD_ID = 373,
    };

    enum class eTWOPEN_DB_REQUEST : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWOPEN_DB_REQUEST (65))

        SCHEMA_ID = 82,
        PUID = 281,
        DUID = 307,
        DB_TYPE = 378,
        OPEN_MODE = 379,
        WRITE_MODE_IS_MANDATORY = 380,
        OPEN_ACTION = 381,
        QUALIFICATION_MODE = 382,
        BASE_DIRECTORY_PATH = 383,
        DB_SUB_DIRECTORY = 384,
        DB_NAME = 385,
        GENERATION_ID = 386,
        REPLICA_ID = 387,
        REQUEST_STATUS = 388,
        DB_READ_ONLY_DUE_TO_PERMISSIONS = 389,
    };

    enum class eTWOPENDB_SCRATCHPAD : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWOPENDB_SCRATCHPAD (66))

        IOROOT_NAME = 296,
        TAF_FILE_INFO = 303,
        IOBASEPATH_ID = 304,
        ACTIVE_TAF_ID = 305,
        IOROOT_ID = 310,
        IOBASEPATH_NAME = 311,
        FILE_INFO = 313,
        DIR_INFO = 314,
        DB_READ_ONLY_DUE_TO_PERMISSIONS = 389,
        TAF_FILE_NAME = 391,
        FILE_HANDLE = 392,
        DISKIO_OP_STATUS = 393,
        TAF_FILES = 394,
        TAF_FILE_CREATED = 395,
        IOBASEPATH_CREATED = 396,
        IOROOT_CREATED = 397,
        TAF_MODEL = 398,
        TAF_FILE_IS_READ_ONLY = 399,
        TAF_FILE_INFO_REPEAT_NDX = 400,
        POTENTIAL_STALE_TAF_INFO = 401,
    };

    enum class eTWTAF_COORDINATION_REQUEST : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWTAF_COORDINATION_REQUEST (67))

        TAF_FILE_INFO = 303,
        IOBASEPATH_ID = 304,
        ACTIVE_TAF_ID = 305,
        DB_INFO = 306,
        IOBASEPATH_STATE = 312,
        FILE_INFO = 313,
        DIR_INFO = 314,
        RUNNING_NUMBER = 319,
        RUNNING_NUMBER_UTT = 320,
        REQUEST_STATUS = 388,
        ACTION = 403,
        RUNNING_NUMBER_NDX = 404,
    };

    enum class eTWVERSIONED_DS_BASE_REQUEST : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWVERSIONED_DS_BASE_REQUEST (68))

        REQUEST_STATUS = 388,
        REQUESTED_VERSION = 406,
        RESOLVED_VERSION = 407,
    };

    enum class eTWVERSIONED_DS_BASE_SCRATCHPAD : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWVERSIONED_DS_BASE_SCRATCHPAD (69))

        VERSION_PRIMARYOBJECT_DS_PTR = 409,
        VERSION_OBJECT_DS_PTR = 410,
        ITERATOR_OBJECT_DS_PTR = 411,
        VERSIONDS_DATA_PTR = 412,
        OBJECT_SUBSTORETYPE = 413,
        ID_ACTION = 414,
        OBJECT_ACTION = 415,
        INDEX_ACTION = 416,
        RESOLVED_OBJID_SCHEMAID = 417,
        RESOLVED_OBJID_CREATED_SCHEMAID = 418,
    };

    enum class eTWVERSIONED_DS_VERSION_REQUEST : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWVERSIONED_DS_VERSION_REQUEST (70))

        CREATED_OBJID = 420,
        MODIFIED_OBJID = 421,
        MAIN_DS_FINAL_LASTID = 422,
        HASHID_DS_FINAL_LASTID = 423,
        INDEX_DS_FINAL_LASTID = 424,
        AGGREGATE_DS_FINAL_LASTID = 425,
    };

    enum class eTWVERSIONED_DS_VERSION_SCRATCHPAD : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWVERSIONED_DS_VERSION_SCRATCHPAD (71))

        NEW_OBJECT = 427,
        EXISTING_OBJECT = 428,
        EDIT_SET = 429,
        EDIT_GET = 430,
        RESOLVED_HASHID = 431,
        OBJECT_RESULT_PTR = 432,
        OBJECT_SCHEMA_PTR = 433,
        DB_BLOCK_PTR = 434,
        DB_DISKOBJ_PTR = 435,
    };

    enum class eTWVERSIONED_DS_HASHID_REQUEST : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWVERSIONED_DS_HASHID_REQUEST (72))

        REQUESTED_OBJID = 437,
        REQUESTED_HASHKEY = 438,
        RESOLVED_OBJID = 439,
        RESOLVED_OBJID_CREATED = 440,
        RESOLVED_HASHKEY = 441,
    };

    enum class eTWVERSIONED_DS_HASHID_SCRATCHPAD : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWVERSIONED_DS_HASHID_SCRATCHPAD (73))

        NEW_OBJECT = 427,
        EXISTING_OBJECT = 428,
        EDIT_SET = 429,
        EDIT_GET = 430,
        RESOLVED_HASHID = 431,
        OBJECT_RESULT_PTR = 432,
        OBJECT_SCHEMA_PTR = 433,
        DB_BLOCK_PTR = 434,
        DB_DISKOBJ_PTR = 435,
    };

    enum class eTWVERSIONED_DS_OBJECT_REQUEST : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWVERSIONED_DS_OBJECT_REQUEST (74))

        REQUESTED_OBJID = 437,
        REQUESTED_HASHKEY = 438,
        RESOLVED_OBJID = 439,
        RESOLVED_OBJID_CREATED = 440,
        RESOLVED_HASHKEY = 441,
        REQUESTED_PRIORITY = 444,
        RESOLVED_MAIN_VERSION_OBJID = 445,
    };

    enum class eTWVERSIONED_DS_OBJECT_SCRATCHPAD : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWVERSIONED_DS_OBJECT_SCRATCHPAD (75))

        VERSION_OBJID = 370,
        NEW_OBJECT = 427,
        EXISTING_OBJECT = 428,
        EDIT_SET = 429,
        EDIT_GET = 430,
        RESOLVED_HASHID = 431,
        OBJECT_RESULT_PTR = 432,
        OBJECT_SCHEMA_PTR = 433,
        DB_BLOCK_PTR = 434,
        DB_DISKOBJ_PTR = 435,
        PREPARE_FOR_EDIT = 447,
        OBJECT_BLOCK_INFO = 448,
        OBJECT_VERSION = 449,
        OBJECT_VERSION_UTT = 450,
        WIP_VERSION = 451,
        WIP_VERSION_UTT = 452,
        OBJECT_RESULT_IS_SET = 453,
        OBJECT_RESULT_API_STATUS = 454,
        OBJECT_RESULT_STATUS = 455,
    };

    enum class eTWVERSIONED_DS_INDEX_SCRATCHPAD : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWVERSIONED_DS_INDEX_SCRATCHPAD (76))

        TIME_INDEX_VALUE = 100,
        REFID_INDEX_VALUE = 101,
        STRING_INDEX_VALUE = 102,
        INDEX_ELEM = 121,
        REQUESTED_INDEX_HASHKEY = 457,
        RESOLVED_INDEX_OBJECT_OBJID = 458,
        RESOLVED_INDEX_OBJECT_OBJID_CREATED = 459,
        INDEX_CONTINUATION_FUNCTION_PTR = 460,
        SUBINDEX_OBJECT_OBJID = 461,
        IS_FRESH_SUBINDEX_OBJECT_OBJID = 462,
        SUBINDEX_ID_CAPACITY = 463,
        SUBINDEX_ID_RANGE_END = 464,
        INDEX_ELEM_OBJTYPE = 465,
        INDEX_ELEM_OBJID = 466,
        IS_TIME_SENSITIVE = 467,
        CURRENT_INDEX_VALUE = 468,
        IS_TIME_BUCKET_CYCLE = 469,
        STRING_INDEX_IS_NEW = 470,
    };

    enum class eTWVERSIONED_DS_ITERATOR_REQUEST : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWVERSIONED_DS_ITERATOR_REQUEST (77))

        RESOLVED_ITERATOR_ID = 472,
        RESOLVED_ITERATOR_UTT = 473,
        RESOLVED_ITERATOR_RESULT_BEGIN_NDX = 474,
        RESOLVED_ITERATOR_RESULT_END_NDX = 475,
        REQUESTED_APPOBJTYPE = 476,
        REQUESTED_REFID = 477,
        REQUESTED_REFID_FIELDID = 478,
        REQUESTED_STRING = 479,
        REQUESTED_MATCH_STYLE = 480,
        REQUESTED_STRING_FIELDID = 481,
        REQUESTED_TIME_FILTER = 482,
        REQUESTED_DIRECTION_IS_BACKWARD = 483,
        REQUESTED_FROM_NDX = 484,
        REQUESTED_NUMBER_OF_IDS = 485,
        FILTERS_IGNORED_IN_RESULT = 486,
        REQUESTED_STRING_WAS_MULTIWORD = 487,
        RESULT_IDLIST = 488,
        RESULT_NO_MORE_IDS = 489,
        RESULT_TOTAL_IDS = 490,
        RESULT_ID_FROM_NDX = 491,
        RESULT_ID_TO_NDX = 492,
    };

    enum class eTWVERSIONED_DS_ITERATOR_SCRATCHPAD : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWVERSIONED_DS_ITERATOR_SCRATCHPAD (78))

        CONTINUE_ITERATION = 494,
        INDEX_LIST_PRIMARYINDEXOBJ_HASHKEY = 495,
        INDEX_LIST_PRIMARYINDEXOBJ_OBJID = 496,
        INDEX_LIST_CURRENT_PRIMARYOBJID_NDX = 497,
        INDEX_LIST_SUBINDEXOBJ_OBJID = 498,
        INDEX_LIST_CURRENT_SUBOBJID_NDX = 499,
        INDEX_LIST_CURRENT_OBJID = 500,
        INDEX_LIST_USE_STRINGFILTER = 501,
        INDEX_LIST_STRINGKEY = 502,
        INDEX_LIST_COMPARE_SCOPE = 503,
        INDEX_LIST_STRING_SCHEMAID = 504,
        INDEX_LIST_USE_APPOBJTYPEFILTER = 505,
        INDEX_LIST_APPOBJTYPE_SCHEMAID = 506,
        INDEX_LIST_USE_TIMEFILTER = 507,
        INDEX_LIST_FROMTIME = 508,
        INDEX_LIST_TOTIME = 509,
        INDEX_LIST_TIME_SCHEMAID = 510,
        INDEX_LIST_USE_REFIDFILTER = 511,
        INDEX_LIST_REFID = 512,
        INDEX_LIST_REFID_SCHEMAID = 513,
        INDEX_LIST_NO_MORE_IDS = 514,
        INDEX_LIST_REQUESTED_NUMIDS = 515,
        INDEX_LIST_GATHERED_NUMIDS = 516,
    };

    enum class eTWDS_ITERATOR_OBJECT_KEY : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWDS_ITERATOR_OBJECT_KEY (79))

        ITERATOR_RESOLVED_VERSION = 518,
        ITERATOR_PRIMARYINDEXOBJ_HASHKEY = 519,
        ITERATOR_USE_STRINGFILTER = 520,
        ITERATOR_STRINGKEY = 521,
        ITERATOR_COMPARE_SCOPE = 522,
        ITERATOR_USE_TIMEFILTER = 523,
        ITERATOR_FROMTIME = 524,
        ITERATOR_TOTIME = 525,
        ITERATOR_TIME_SCHEMAID = 526,
        ITERATOR_USE_REFIDFILTER = 527,
        ITERATOR_REFID = 528,
        ITERATOR_REFID_SCHEMAID = 529,
    };

    enum class eTWITERATOR_OBJECT : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWITERATOR_OBJECT (80))

        RESULT_NO_MORE_IDS = 489,
        RESULT_TOTAL_IDS = 490,
        ITERATOR_COMPLETE = 531,
        RESULTS = 532,
        IS_STRING_INDEX = 533,
        STRING_KEY = 534,
        STRING_PART = 535,
        STRING_HASHID = 536,
        STRING_PART_OBJID = 537,
        STRING_KEY_OBJID = 538,
        LAST_STRING_KEY_OBJID_DONE = 539,
        INDEX_OBJTYPE = 540,
        MAIN_INDEX_OBJID = 541,
        REFID_BUCKET_OBJID = 542,
        RESOLVED_TIME_FROM = 543,
        RESOLVED_TIME_TO = 544,
        RESOLVED_TIME_FIELDID = 545,
        CURRENT_PRIMARY_INDEX_OBJID = 546,
        TIME_BUCKETS_OBJID = 547,
        RESULT_AVBL_FROM = 548,
        RESULT_NUM_IDS = 549,
    };

    enum class eTWWIP_LIST : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWWIP_LIST (81))

        WIP_OBJID = 551,
        WIP_MODIFIED_OBJID = 552,
        MAIN_DS_INITIAL_LASTID = 553,
        HASHID_DS_INITIAL_LASTID = 554,
        INDEX_DS_INITIAL_LASTID = 555,
        AGGREGATE_DS_INITIAL_LASTID = 556,
    };

    enum class eTWQUERY_SCRATCHPAD : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWQUERY_SCRATCHPAD (82))

        QUERY_HASHKEY = 558,
        QUERY_OBJID = 559,
        QUERY_DETAILS = 560,
        PARENT_QUERY_DETAILS = 561,
        SOURCE_QUERY_DETAILS = 562,
    };

    enum class eTWQUERY_RANGE_DATA : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWQUERY_RANGE_DATA (83))

        RANGE_FROM = 564,
        RANGE_TO = 565,
        ACTIVE_EVENT_ID = 566,
        ID = 567,
    };

    enum class eTWQUERY_OBJECT : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWQUERY_OBJECT (84))

        QUERY_IS_COMPLETE = 569,
        FORWARD_QUERY_RANGE_DATA = 570,
        REVERSE_QUERY_RANGE_DATA = 571,
    };

    enum class eTWPRIMARY_QUERY_HASHKEY : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWPRIMARY_QUERY_HASHKEY (85))

        RESOLVED_VERSION = 407,
        RESOLVED_OBJID = 439,
        RESOLVED_SOURCE_DCID = 573,
        RESOLVED_APP_OBJTYPE = 574,
    };

    enum class eTWFILTER_QUERY_HASHKEY : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWFILTER_QUERY_HASHKEY (86))

        RESOLVED_PARENT_QUERYID = 576,
        RESOLVED_STRINGKEY = 577,
        RESOLVED_COMPARE_SCOPE = 578,
        RESOLVED_STRING_SCHEMAID = 579,
        RESOLVED_REFID = 580,
        RESOLVED_REFID_SCHEMAID = 581,
        RESOLVED_FROMTIME = 582,
        RESOLVED_TOTIME = 583,
        RESOLVED_TIME_SCHEMAID = 584,
    };

    enum class eTWRIGHTS_QUERY_HASHKEY : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWRIGHTS_QUERY_HASHKEY (87))

        RESOLVED_PARENT_QUERYID = 576,
    };

    enum class eTWSORTED_QUERY_HASHKEY : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWSORTED_QUERY_HASHKEY (88))

        RESOLVED_PARENT_QUERYID = 576,
        RESOLVED_SORT_DIRECTION = 587,
        RESOLVED_SORT_SCHEMAID = 588,
    };

    enum class eTWPRIMARY_QUERY : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWPRIMARY_QUERY (89))

        PRIMARY_QUERY_HASHKEY = 572,
        PARENT_QUERY_HASHKEY = 590,
        PARENT_QUERY_ID = 591,
        REQUEST_SOURCEDC = 592,
        REQUEST_APP_OBJTYPE = 593,
        REQUEST_OBJID = 594,
        REQUEST_VERSION = 595,
        REQUEST_FROMTIME = 596,
        REQUEST_TOTIME = 597,
        REQUEST_TIME_SCHEMAID = 598,
    };

    enum class eTWFILTER_SUB_QUERY : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWFILTER_SUB_QUERY (90))

        FILTER_QUERY_HASHKEY = 575,
        PARENT_QUERY_HASHKEY = 590,
        PARENT_QUERY_ID = 591,
        REQUEST_FROMTIME = 596,
        REQUEST_TOTIME = 597,
        REQUEST_TIME_SCHEMAID = 598,
        REQUEST_STRINGKEY = 600,
        REQUEST_COMPARE_SCOPE = 601,
        REQUEST_STRING_SCHEMAID = 602,
        REQUEST_REFID = 603,
        REQUEST_REFID_SCHEMAID = 604,
    };

    enum class eTWRIGHTS_SUB_QUERY : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWRIGHTS_SUB_QUERY (91))

        RIGHTS_QUERY_HASHKEY = 585,
        PARENT_QUERY_HASHKEY = 590,
        PARENT_QUERY_ID = 591,
        REQUEST_AUTHENTICATED_USERID = 606,
    };

    enum class eTWSORTING_SUB_QUERY : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWSORTING_SUB_QUERY (92))

        PARENT_QUERY_HASHKEY = 590,
        PARENT_QUERY_ID = 591,
        SORTING_QUERY_HASHKEY = 608,
        REQUEST_SORT_DIRECTION = 609,
        REQUEST_SORT_SCHEMAID = 610,
    };

    enum class eTWINDIVIDUAL_QUERY : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWINDIVIDUAL_QUERY (93))

        RANGE_FROM = 564,
        PRIMARY_QUERY = 589,
        FILTER_SUB_QUERY = 599,
        RIGHTS_SUB_QUERY = 605,
        SORTING_SUB_QUERY = 607,
        INDIVIDUAL_QUERY_HASHKEY = 612,
        RANGE_DIRECTION = 613,
        RANGE_NUMBER = 614,
    };

    enum class eTWCOMPOUND_QUERY : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWCOMPOUND_QUERY (94))

        RANGE_FROM = 564,
        INDIVIDUAL_QUERY = 611,
        RANGE_DIRECTION = 613,
        RANGE_NUMBER = 614,
        COMPOUND_QUERY_HASHKEY = 616,
    };

    enum class eTWREQUEST : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWREQUEST (95))

        INDIVIDUAL_QUERY = 611,
        COMPOUND_QUERY = 615,
    };

    enum class eTWBizSchema : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWBizSchema (96))

    };

    enum class eTWContactDetails : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWContactDetails (97))

        CONTACT_PERSON = 618,
        MAILING_NAME = 619,
        SON_OF = 620,
        DAUTHTER_OF = 621,
        ADDRESS = 622,
        FLAT_NUMBER = 623,
        FLOOR_NUMBER = 624,
        BUILDING_NAME = 625,
        NAME_OF_PREMISES_BUILDING = 625, //(Alias of: BUILDING_NAME)
        BUILDING_NUMBER = 626,
        ROAD = 627,
        STREET = 628,
        STREET_NAME = 628, //(Alias of: STREET)
        LANE = 629,
        AREA = 630,
        LOCATION = 631,
        DISTRICT = 632,
        TALUK = 633,
        CITY = 634,
        TOWN = 635,
        VILLAGE = 636,
        STATE = 637,
        COUNTRY = 638,
        COUNTRY_CODE = 639,
        COUNTRY_SUBDIVISION = 640,
        PO_BOX_NUMBER = 641,
        PIN_CODE = 642,
        POST_CODE = 643,
        STD_CODE = 644,
        PHONE_NO = 645,
        TELEPHONE_NO = 645, //(Alias of: PHONE_NO)
        MOBILE_NO = 646,
        FAX_NO = 647,
        EMAIL = 648,
        CC_EMAIL = 649,
        WEBSITE = 650,
        PLUS_CODE_ADDRESS = 651,
    };

    enum class eTWGSTDetails : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWGSTDetails (98))

        HSN_CODE = 652,
        HSN = 652, //(Alias of: HSN_CODE)
        HSN_DESCRIPTION = 653,
        SAC = 654,
        SAC_CODE = 654, //(Alias of: SAC)
        SAC_DESCRIPTION = 655,
        NATURE_OF_TRANSACTION = 656,
        REVERSE_CHARGE_APPLICABLE = 657,
        REVERSE_CHARGE_RATE = 658,
        STATE_NAME = 659,
        APPLICABLE_FROM = 660,
        CALCULATION_TYPE = 661,
        SLAB_RATE_APPLICABLE = 662,
        UPTO_ITEM_RATE = 663,
        TAX_TYPE = 664,
        COMPUTED_ON = 665,
        COMPUTE_BASED_ON_ITEM_RATE = 666,
        IGST_RATE = 667,
        CGST_RATE = 668,
        SGST_RATE = 669,
        CESS_RATE = 670,
        STATE_CESS_RATE = 671,
        VALUATION_TYPE = 672,
        TYPE_OF_SUPPLY = 673,
        NOTIFICATION_DATE = 674,
        NOTIFICATION_NUMBER = 675,
        REPORTING_UNIT_OF_MEASURE = 676,
    };

    enum class eTWGroupInformation : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWGroupInformation (99))

        HSN_CODE = 652,
        HSN = 652, //(Alias of: HSN_CODE)
        HSN_DESCRIPTION = 653,
        SAC = 654,
        SAC_CODE = 654, //(Alias of: SAC)
        SAC_DESCRIPTION = 655,
        NATURE_OF_TRANSACTION = 656,
        REVERSE_CHARGE_APPLICABLE = 657,
        REVERSE_CHARGE_RATE = 658,
        STATE_NAME = 659,
        APPLICABLE_FROM = 660,
        CALCULATION_TYPE = 661,
        SLAB_RATE_APPLICABLE = 662,
        UPTO_ITEM_RATE = 663,
        TAX_TYPE = 664,
        COMPUTED_ON = 665,
        COMPUTE_BASED_ON_ITEM_RATE = 666,
        IGST_RATE = 667,
        CGST_RATE = 668,
        SGST_RATE = 669,
        CESS_RATE = 670,
        STATE_CESS_RATE = 671,
        VALUATION_TYPE = 672,
        TYPE_OF_SUPPLY = 673,
        NOTIFICATION_DATE = 674,
        NOTIFICATION_NUMBER = 675,
        REPORTING_UNIT_OF_MEASURE = 676,
        NAME = 677,
        PARENT = 678,
        TYPE = 679,
        IS_SUB_LEDGER = 680,
        IS_REVENUE = 681,
        ALLOCATION_METHOD = 682,
        IS_NETT_BAL_FOR_REPORTING = 683,
        METHOD_OF_ALLOCATION_IN_PURCHASE = 684,
        TCS_APPLICABLE = 685,
        TDS_APPLICABLE = 686,
        MAINTAIN_BILLWISE = 687,
        COST_CENTRE_ON = 688,
        OPENING_BALANCE = 689,
        CLOSING_BALANCE = 690,
        COMPUTE_INTEREST_ON_BILLWISE = 691,
    };

    enum class eTWGroupStatutoryAndTaxationInformation : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWGroupStatutoryAndTaxationInformation (100))

    };

    enum class eTWGroupGSTDetails : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWGroupGSTDetails (101))

        HSN_CODE = 652,
        HSN = 652, //(Alias of: HSN_CODE)
        HSN_DESCRIPTION = 653,
        SAC = 654,
        SAC_CODE = 654, //(Alias of: SAC)
        SAC_DESCRIPTION = 655,
        NATURE_OF_TRANSACTION = 656,
        REVERSE_CHARGE_APPLICABLE = 657,
        REVERSE_CHARGE_RATE = 658,
        STATE_NAME = 659,
        APPLICABLE_FROM = 660,
        CALCULATION_TYPE = 661,
        SLAB_RATE_APPLICABLE = 662,
        UPTO_ITEM_RATE = 663,
        TAX_TYPE = 664,
        COMPUTED_ON = 665,
        COMPUTE_BASED_ON_ITEM_RATE = 666,
        IGST_RATE = 667,
        CGST_RATE = 668,
        SGST_RATE = 669,
        CESS_RATE = 670,
        STATE_CESS_RATE = 671,
        VALUATION_TYPE = 672,
        TYPE_OF_SUPPLY = 673,
        NOTIFICATION_DATE = 674,
        NOTIFICATION_NUMBER = 675,
        REPORTING_UNIT_OF_MEASURE = 676,
    };

    enum class eTWGroupTDSDetails : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWGroupTDSDetails (102))

        NAME = 677,
        SECTION = 692,
        PAYMENT_CODE = 693,
        REMITTANCE_CODE = 694,
        RATE_FOR_INDIVIDUALS_OR_HUF_WITH_PAN = 695,
        RATE_FOR_OTHER_DEDUCTED_TYPES_WITH_PAN = 696,
        IS_ZERO_RATED = 697,
        THRESHOLD_LIMIT = 698,
        EXEMPTION_LIMIT = 698, //(Alias of: THRESHOLD_LIMIT)
        DEDUCTEE_REFERENCE = 699,
        TAX_IDENTIFICATION_NUMBER = 700,
        UNIQUE_IDENTIFICATION_NUMBER = 700, //(Alias of: TAX_IDENTIFICATION_NUMBER)
        NAME_AS_ON_PAN = 701,
    };

    enum class eTWGroupTCSDetails : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWGroupTCSDetails (103))

        NAME = 677,
        SECTION = 692,
        PAYMENT_CODE = 693,
        REMITTANCE_CODE = 694,
        RATE_FOR_INDIVIDUALS_OR_HUF_WITH_PAN = 695,
        IS_ZERO_RATED = 697,
        THRESHOLD_LIMIT = 698,
        EXEMPTION_LIMIT = 698, //(Alias of: THRESHOLD_LIMIT)
        RATE_FOR_OTHER_COLLECTEE_TYPES_WITH_PAN = 702,
        RATE_FOR_OTHER_COLLECTEE_TYPES_WITHOUT_PAN = 703,
    };

    enum class eTWGroupServiceTaxDetails : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWGroupServiceTaxDetails (104))

        NAME = 677,
        TYPE_OF_SERVICE = 704,
        SERVICE_TAX_RATE = 705,
        EDUCATION_CESS_RATE = 706,
        SECONDARY_EDUCATION_CESS_RATE = 707,
        SWATCHH_BHARAT_CESS_RATE = 708,
        KRISHI_KALYAN_CESS_RATE = 709,
    };

    enum class eTWGroupExciseTariffDetails : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWGroupExciseTariffDetails (105))

        HSN_CODE = 652,
        VALUATION_TYPE = 672,
        REPORTING_UNIT_OF_MEASURE = 676,
        TARIFF_NAME = 710,
        RATE = 711,
    };

    enum class eTWLedgerInformation : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWLedgerInformation (106))

        NAME = 677,
        PARENT = 678,
        DESCRIPTION = 712,
        NOTES = 713,
        TYPE_OF_LEDGER = 714,
    };

    enum class eTWLedgerStatutoryAndTaxationInformation : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWLedgerStatutoryAndTaxationInformation (107))

        PAN = 715,
        INCOME_TAX_NUMBER = 715, //(Alias of: PAN)
        IT_NUMBER = 715, //(Alias of: PAN)
        PAN_STATUS = 716,
        TIN = 717,
        SALES_TAX_NUMBER = 717, //(Alias of: TIN)
        CST_NUMBER = 718,
        CENTRAL_TAX_NUMBER = 718, //(Alias of: CST_NUMBER)
    };

    enum class eTWLedgerExciseDetails : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWLedgerExciseDetails (108))

        HSN_CODE = 652,
        VALUATION_TYPE = 672,
        REPORTING_UNIT_OF_MEASURE = 676,
        TARIFF_NAME = 710,
        RATE = 711,
        ECC_NUMBER = 719,
        IMPORTER_ECC_NUMBER = 720,
        IEC_NUMBER = 721,
        RANGE = 722,
        DIVISION = 723,
        COMMISSIONNERATE = 724,
        JURISDICATION_APPLICABILITY_DETAILS = 725,
    };

    enum class eTWLedgerGSTDetails : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWLedgerGSTDetails (109))

        HSN_CODE = 652,
        HSN = 652, //(Alias of: HSN_CODE)
        HSN_DESCRIPTION = 653,
        SAC = 654,
        SAC_CODE = 654, //(Alias of: SAC)
        SAC_DESCRIPTION = 655,
        NATURE_OF_TRANSACTION = 656,
        REVERSE_CHARGE_APPLICABLE = 657,
        REVERSE_CHARGE_RATE = 658,
        STATE_NAME = 659,
        APPLICABLE_FROM = 660,
        CALCULATION_TYPE = 661,
        SLAB_RATE_APPLICABLE = 662,
        UPTO_ITEM_RATE = 663,
        TAX_TYPE = 664,
        COMPUTED_ON = 665,
        COMPUTE_BASED_ON_ITEM_RATE = 666,
        IGST_RATE = 667,
        CGST_RATE = 668,
        SGST_RATE = 669,
        CESS_RATE = 670,
        STATE_CESS_RATE = 671,
        VALUATION_TYPE = 672,
        TYPE_OF_SUPPLY = 673,
        NOTIFICATION_DATE = 674,
        NOTIFICATION_NUMBER = 675,
        REPORTING_UNIT_OF_MEASURE = 676,
        REGISTRATION_TYPE = 726,
        ASSESSEE_OF_OTHER_TERRITORY = 727,
        GSTIN = 728,
        UIN = 728, //(Alias of: GSTIN)
        E_COMMERCE_OPERATOR = 729,
        CONSIDER_PARTY_AS_DEEMED_EXPORTER_FOR_PURCHASES = 730,
        PARTY_TYPE = 731,
        TRANSPORTER = 732,
    };

    enum class eTWLedgerServiceTaxDetails : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWLedgerServiceTaxDetails (110))

        NAME = 677,
        TYPE_OF_SERVICE = 704,
        SERVICE_TAX_RATE = 705,
        EDUCATION_CESS_RATE = 706,
        SECONDARY_EDUCATION_CESS_RATE = 707,
        SWATCHH_BHARAT_CESS_RATE = 708,
        KRISHI_KALYAN_CESS_RATE = 709,
        SERVICE_TAX_REGISTRATION_NUMBER = 733,
        IS_PARTY_AN_ASSOCIATED_ENTERPRISE = 734,
        DOES_PARTY_BELONG_TO_TAXABLE_TERRITORY = 735,
    };

    enum class eTWLedgerTDSDetails : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWLedgerTDSDetails (111))

        NAME = 677,
        SECTION = 692,
        PAYMENT_CODE = 693,
        REMITTANCE_CODE = 694,
        RATE_FOR_INDIVIDUALS_OR_HUF_WITH_PAN = 695,
        RATE_FOR_OTHER_DEDUCTED_TYPES_WITH_PAN = 696,
        IS_ZERO_RATED = 697,
        THRESHOLD_LIMIT = 698,
        EXEMPTION_LIMIT = 698, //(Alias of: THRESHOLD_LIMIT)
        DEDUCTEE_REFERENCE = 699,
        TAX_IDENTIFICATION_NUMBER = 700,
        UNIQUE_IDENTIFICATION_NUMBER = 700, //(Alias of: TAX_IDENTIFICATION_NUMBER)
        NAME_AS_ON_PAN = 701,
    };

    enum class eTWLedgerTCSDetails : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWLedgerTCSDetails (112))

        NAME = 677,
        SECTION = 692,
        PAYMENT_CODE = 693,
        REMITTANCE_CODE = 694,
        RATE_FOR_INDIVIDUALS_OR_HUF_WITH_PAN = 695,
        IS_ZERO_RATED = 697,
        THRESHOLD_LIMIT = 698,
        EXEMPTION_LIMIT = 698, //(Alias of: THRESHOLD_LIMIT)
        RATE_FOR_OTHER_COLLECTEE_TYPES_WITH_PAN = 702,
        RATE_FOR_OTHER_COLLECTEE_TYPES_WITHOUT_PAN = 703,
    };

    enum class eTWLedgerBankAccountDetails : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWLedgerBankAccountDetails (113))

        ACCOUNT_HOLDERS_NAME = 736,
        ACCOUNT_NUMBER = 737,
        IFS_CODE = 738,
        IFSC = 738, //(Alias of: IFS_CODE)
        SWIFT_CODE = 739,
        BANK_NAME = 740,
        BRANCH = 741,
        BSR_CODE = 742,
        CLIENT_CODE = 743,
    };

    enum class eTWLedgerBankingConfiguration : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWLedgerBankingConfiguration (114))

        BANK_NAME = 740,
        EFFECTIVE_DATE_FOR_RECONCILIATION = 744,
        CHEQUE_BOOK = 745,
        CHECK_BOOK = 745, //(Alias of: CHEQUE_BOOK)
        FROM_NUMBER = 746,
        TO_NUMBER = 747,
        NUMBER_OF_CHEQUES = 748,
        NUMBER_OF_CHECKS = 748, //(Alias of: NUMBER_OF_CHEQUES)
        CHEQUE_BOOK_NAME = 749,
        CHECK_BOOK_NAME = 749, //(Alias of: CHEQUE_BOOK_NAME)
        CHEQUE_PRINTING = 750,
        CHECK_PRINTING = 750, //(Alias of: CHEQUE_PRINTING)
        USE_NOTIONAL_BANK_FOR_POST_DATED_VOUCHER = 751,
    };

    enum class eTWLedgerInterestCalculationDetails : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWLedgerInterestCalculationDetails (115))

        RATE = 711,
        CALCULATED_INTEREST_BASED_ON = 752,
        INCLUDE_TRANSACTION_DATE_FOR_INTEREST_CALCULATION_FOR_AMOUNTS_ADDED = 753,
        INCLUDE_TRANSACTION_DATE_FOR_INTEREST_CALCULATION_FOR_AMOUNTS_DEDUCTED = 754,
        INTEREST_STYLE = 755,
        INTEREST_BALANCES = 756,
    };

    enum class eTWLedgerContactDetails : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWLedgerContactDetails (116))

        CONTACT_PERSON = 618,
        MAILING_NAME = 619,
        SON_OF = 620,
        DAUTHTER_OF = 621,
        ADDRESS = 622,
        FLAT_NUMBER = 623,
        FLOOR_NUMBER = 624,
        BUILDING_NAME = 625,
        NAME_OF_PREMISES_BUILDING = 625, //(Alias of: BUILDING_NAME)
        BUILDING_NUMBER = 626,
        ROAD = 627,
        STREET = 628,
        STREET_NAME = 628, //(Alias of: STREET)
        LANE = 629,
        AREA = 630,
        LOCATION = 631,
        DISTRICT = 632,
        TALUK = 633,
        CITY = 634,
        TOWN = 635,
        VILLAGE = 636,
        STATE = 637,
        COUNTRY = 638,
        COUNTRY_CODE = 639,
        COUNTRY_SUBDIVISION = 640,
        PO_BOX_NUMBER = 641,
        PIN_CODE = 642,
        POST_CODE = 643,
        STD_CODE = 644,
        PHONE_NO = 645,
        TELEPHONE_NO = 645, //(Alias of: PHONE_NO)
        MOBILE_NO = 646,
        FAX_NO = 647,
        EMAIL = 648,
        CC_EMAIL = 649,
        WEBSITE = 650,
        PLUS_CODE_ADDRESS = 651,
    };

    enum class eTWLedgerPaymentDetails : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWLedgerPaymentDetails (117))

        CITY = 634,
        ACCOUNT_NUMBER = 737,
        IFS_CODE = 738,
        SWIFT_CODE = 739,
        BANK_NAME = 740,
        ACCOUNT_TYPE = 757,
        BANK_LOCATION = 758,
        BENEFICIARY_CODE = 759,
        COMPANY_BANK = 760,
        BRANCH_NAME = 761,
        CHEQUE_CROSS_COMMENT = 762,
        CHECK_CROSS_COMMENT = 762, //(Alias of: CHEQUE_CROSS_COMMENT)
        DEFAULT_TRANSACTION_TYPE = 763,
        DELIVERY_MODE = 764,
        DELIVERY_TO = 765,
        MICR_CODE = 766,
        PAYABLE_LOCATION = 767,
        PAYMENT_FAVOURING = 768,
        PRINT_LOCATION = 769,
        TRANSFER_MODE = 770,
    };

    enum class eTWCostCategoryInformation : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWCostCategoryInformation (118))

        NAME = 677,
        ALLOCATE_REVENUE_ITEMS = 771,
        ALLOCATE_NON_REVENUE_ITEMS = 772,
    };

    enum class eTWCostCentreInformation : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWCostCentreInformation (119))

        NAME = 677,
        PARENT = 678,
        OPENING_BALANCE = 689,
        USE_FOR_JOB_COSTING = 773,
    };

    enum class eTWCurrencyInformation : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWCurrencyInformation (120))

        NAME = 677,
        SYMBOL = 774,
        FORMAL_NAME = 775,
        ISO_CURRENCY_CODE = 776,
        NUMBER_OF_DECIMAL_PLACES = 777,
        NUMBER_OF_DECIMAL_PLACES_FOR_AMOUNT_IN_WORDS = 778,
        DECIMAL_SYMBOL = 779,
        SHOW_AMOUNT_IN_MILLIONS = 780,
        SUFFIX_SYMBOL_TO_AMOUNT = 781,
        ADD_SPACE_BETWEEN_AMOUNT_AND_SYMBOL = 782,
        WORD_REPRESENTING_AMOUNT_AFTER_DECIMAL = 783,
        NARRATION = 784,
    };

    enum class eTWExchangeRateInformation : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWExchangeRateInformation (121))

        DATE = 785,
        CURRENCY = 786,
        STANDARD_RATE = 787,
        SELLING_RATE = 788,
        BUYING_RATE = 789,
    };

    enum class eTWBudgetInformation : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWBudgetInformation (122))

        AMOUNT = 23,
        NAME = 677,
        FROM_DATE = 790,
        TO_DATE = 791,
        BUDGET_TYPE = 792,
        ACCOUNT_NAME = 793,
        COST_CENTRE = 794,
    };

    enum class eTWStockGroupInformation : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWStockGroupInformation (123))

        NAME = 677,
        PARENT = 678,
        CAN_QUANTIES_BE_ADDED = 795,
    };

    enum class eTWStockCategoryInformation : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWStockCategoryInformation (124))

        NAME = 677,
        PARENT = 678,
    };

    enum class eTWStockItemInformation : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWStockItemInformation (125))

        SIZE = 191,
        NAME = 677,
        PARENT = 678,
        RATE = 711,
        DESCRIPTION = 712,
        NOTES = 713,
        ITEM_NAME = 677, //(Alias of: NAME)
        PART_NUMBER = 796,
        MANUFACTURER_PART_NUMBER = 797,
        MPN = 797, //(Alias of: MANUFACTURER_PART_NUMBER)
        NATO_STOCK_NUMBER = 798,
        NSN = 798, //(Alias of: NATO_STOCK_NUMBER)
        BARCODE = 799,
        STOCK_KEEPING_UNIT = 799, //(Alias of: BARCODE)
        SKU = 799, //(Alias of: BARCODE)
        GLOBAL_TRADE_ITEM_NUMBER = 800,
        GTIN12 = 801,
        GTIN13 = 802,
        GTIN14 = 803,
        GTIN8 = 804,
        EAN = 804, //(Alias of: GTIN8)
        USER_DESCRIPTION = 805,
        ITEM_DESCRIPTION = 712, //(Alias of: DESCRIPTION)
        CATEGORY = 806,
        BRAND = 807,
        COLOUR = 808,
        COLOR = 809,
        MODEL = 810,
        UNITS_OF_MEASUREMENT = 811,
        ALTERNATE_UNITS = 812,
        CONVERSION_FACTOR = 813,
        BATCH_NUMBER = 814,
        LOT_NUMBER = 815,
        MFG_DATE = 816,
        MANUFACTURING_DATE = 816, //(Alias of: MFG_DATE)
        EXPIRY_DATE = 817,
        ACTUAL_QUANTITY = 818,
        BILLED_QUANTITY = 819,
        DISCOUNT = 820,
        TRACK_MFG_DATE = 821,
        EXPIRY_DATE_ON = 822,
        COSTING_METHOD = 823,
        MRP = 824,
        EXCISE_MRP_RATE = 825,
        EXCISE_MRP_ABATEMENT = 826,
        PRICE_DISCOUNT = 827,
        EFFECTIVE_DATE = 828,
        SERIAL_NUMBER = 829,
        ADDITIONAL_PROPERTY = 830,
        AGGREGATE_RATING = 831,
        AUDIENCE = 832,
        AWARD = 833,
        DEPTH = 834,
        ENERGY_CONSUMPTION_DETAILS = 835,
        HAS_MERCHANT_RETURN_POLICY = 836,
        HEIGHT = 837,
        ACCESSORY_FOR = 838,
        SPARE_PART_FOR = 839,
        CONSUMABLE_FOR = 840,
        RELATED_TO = 841,
        SIMILAR_TO = 842,
        IS_VARIANT_OF = 843,
        ITEM_CONDITION = 844,
        LOGO = 845,
        MANUFACTURER = 846,
        MATERIAL = 847,
        OFFERS = 848,
        PATTERN = 849,
        PRODUCTION_DATE = 850,
        PURCHASE_DATE = 851,
        RELEASE_DATE = 852,
        SLOGAN = 853,
        WEIGHT = 854,
        WIDTH = 855,
        ADDITIONAL_TYPE = 856,
        ALTERNATE_NAME = 857,
        IMAGE = 858,
        URL = 859,
        INVENTORY_LEVEL = 860,
        GTIN = 861,
        HAS_ENERGY_CONSUMPTION_DETAILS = 862,
        PRODUCT_GROUP = 863,
        IDENTIFIER = 864,
    };

    enum class eTWStockItemAttributes : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWStockItemAttributes (126))

    };

    enum class eTWStationeryAttributes : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWStationeryAttributes (127))

        HSN = 652, //(Alias of: HSN_CODE)
        CATEGORY = 806,
        BRAND = 807,
        COLOUR = 808,
        COLOR = 809,
        MRP = 824,
        MATERIAL = 847,
        SUB_BRAND = 865,
        VARIANT = 866,
        COMPANY = 867,
        PRODUCT_CATEGORY = 868,
        SEGMENT = 869,
        NET_WEIGHT = 870,
        CAPACITY_COMPOSITE = 871,
        TRADABLE_UNIT = 872,
        PACK_TYPE = 873,
        PACK_SIZE = 874,
        SUITABLE_FOR = 875,
        SIZE_SIMPLE = 876,
        MODEL_NUMBER = 877,
        COVER_MATERIAL = 878,
        SHAPE = 879,
        PATTERN_DESIGN = 880,
        FINISHING = 881,
        GRADE = 882,
        DIAMETER = 883,
        DIAMETRE = 883, //(Alias of: DIAMETER)
        ADDITIONAL_INFORMATION = 884,
        PRODUCT_DIMENSIONS = 885,
    };

    enum class eTWBooksAttributes : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWBooksAttributes (128))

        SIZE = 191,
        LOCATION = 631,
        HSN = 652, //(Alias of: HSN_CODE)
        BARCODE = 799,
        CATEGORY = 806,
        BRAND = 807,
        MRP = 824,
        COMPANY = 867,
        PRODUCT_CATEGORY = 868,
        SEGMENT = 869,
        NET_WEIGHT = 870,
        SUITABLE_FOR = 875,
        COVER_MATERIAL = 878,
        FINISHING = 881,
        ADDITIONAL_INFORMATION = 884,
        PRODUCT_DIMENSIONS = 885,
        COUNTRY_OF_ORIGIN = 886,
        BOOK_VOLUME = 887,
        PAPER_THICKNESS = 888,
        BINDING_TYPE = 889,
        NUMBER_OF_PAGES = 890,
        ISBN_10 = 891,
        ISBN_13 = 892,
        PUBLISHER = 893,
        EDITION = 894,
        GENRE = 895,
        SERIES = 896,
        AUTHOR = 897,
        LANGUAGE = 898,
    };

    enum class eTWPharmaceuticalAttributes : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWPharmaceuticalAttributes (129))

        LOCATION = 631,
        HSN = 652, //(Alias of: HSN_CODE)
        BARCODE = 799,
        CATEGORY = 806,
        BRAND = 807,
        COLOUR = 808,
        MRP = 824,
        WEIGHT = 854,
        SUB_BRAND = 865,
        VARIANT = 866,
        COMPANY = 867,
        PRODUCT_CATEGORY = 868,
        SEGMENT = 869,
        PACK_TYPE = 873,
        PACK_SIZE = 874,
        SUITABLE_FOR = 875,
        ADDITIONAL_INFORMATION = 884,
        COUNTRY_OF_ORIGIN = 886,
        GENERIC_NAME = 899,
        SUB_VARIANT = 900,
        FORM = 901,
        FLAVOUR = 902,
        FRAGRANCE = 903,
        VOLUME = 904,
        MEDICAL_PRACTICE = 905,
        PRESCRIPTION_DRUG_CLASS = 906,
        CERTIFICATIONS = 907,
        INGREDIENTS = 908,
        COMPOSITION = 909,
        CONCENTRATION = 910,
        USED_FOR = 911,
        COMPATIBLE_WITH = 912,
        FEATURES = 913,
        BENEFITS = 914,
        DOSAGE = 915,
        STORAGE_INFORMATION = 916,
        WARNINGS = 917,
        SIDE_EFFECTS = 918,
    };

    enum class eTWConsumerDurablesAttributes : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWConsumerDurablesAttributes (130))

        LOCATION = 631,
        HSN = 652, //(Alias of: HSN_CODE)
        TYPE = 679,
        CATEGORY = 806,
        BRAND = 807,
        COLOUR = 808,
        COLOR = 809,
        MRP = 824,
        MATERIAL = 847,
        PATTERN = 849,
        SUB_BRAND = 865,
        VARIANT = 866,
        COMPANY = 867,
        PRODUCT_CATEGORY = 868,
        SEGMENT = 869,
        NET_WEIGHT = 870,
        TRADABLE_UNIT = 872,
        PACK_TYPE = 873,
        PACK_SIZE = 874,
        SUITABLE_FOR = 875,
        SIZE_SIMPLE = 876,
        MODEL_NUMBER = 877,
        SHAPE = 879,
        FINISHING = 881,
        GRADE = 882,
        DIAMETER = 883,
        DIAMETRE = 883, //(Alias of: DIAMETER)
        ADDITIONAL_INFORMATION = 884,
        PRODUCT_DIMENSIONS = 885,
        COUNTRY_OF_ORIGIN = 886,
        FORM = 901,
        VOLUME = 904,
        CERTIFICATIONS = 907,
        COMPATIBLE_WITH = 912,
        FEATURES = 913,
        PACKAGE_DIMENSIONS = 919,
        PACKAGE_CONTENT = 920,
        CAPACITY = 921,
        CAPACITY_SIMPLE = 922,
        POWER_SOURCE = 923,
        VOLTAGE_ = 924,
        FREQUENCY = 925,
        PHASE = 926,
        POWER = 927,
        BATTERY_TYPE = 928,
        ENERGY_RATING = 929,
        CHARGE_TIME = 930,
        CONNECTIVTY = 931,
        APERTURE = 932,
        FIELD_OF_VIEW = 933,
        FOCAL_LENGTH = 934,
        CLOSE_FOCUS_LIMIT = 935,
        MAGNIFICATION = 936,
        FOCAL_RATIO = 937,
        WORKING_PRINCIPLE = 938,
        TEMPERATURE_RANGE = 939,
        INSTALLATION_TYPE = 940,
        COMPUTER_MEMORY_TYPE = 941,
        DISPLAY_TECHNOLOGY = 942,
        HARD_DISK_TECHNOLOGY = 943,
        STORAGE_SIZE = 944,
        DISPLAY_RESOLUTION = 945,
        OPERATING_SYSTEM = 946,
        PROCESSOR_SPEED = 947,
        PROCESSOR_TYPE = 948,
        RAM = 949,
        SCREEN_SIZE = 950,
        CPU_ARCHITECTURE = 951,
        AVERAGE_LIFE = 952,
        TECHNICAL_SPECIFICATIONS = 953,
        WARRANTY = 954,
        GUARANTEE = 955,
    };

    enum class eTWConstructionMaterial : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWConstructionMaterial (131))

        LOCATION = 631,
        HSN = 652, //(Alias of: HSN_CODE)
        TYPE = 679,
        BARCODE = 799,
        CATEGORY = 806,
        BRAND = 807,
        COLOUR = 808,
        COLOR = 809,
        MRP = 824,
        MATERIAL = 847,
        PATTERN = 849,
        SUB_BRAND = 865,
        VARIANT = 866,
        COMPANY = 867,
        PRODUCT_CATEGORY = 868,
        SEGMENT = 869,
        NET_WEIGHT = 870,
        TRADABLE_UNIT = 872,
        PACK_TYPE = 873,
        PACK_SIZE = 874,
        SUITABLE_FOR = 875,
        SIZE_SIMPLE = 876,
        MODEL_NUMBER = 877,
        SHAPE = 879,
        FINISHING = 881,
        GRADE = 882,
        ADDITIONAL_INFORMATION = 884,
        PRODUCT_DIMENSIONS = 885,
        COUNTRY_OF_ORIGIN = 886,
        FORM = 901,
        VOLUME = 904,
        CERTIFICATIONS = 907,
        PACKAGE_DIMENSIONS = 919,
        SIZE_COMPOSITE = 956,
        DIMENSIONS = 885, //(Alias of: PRODUCT_DIMENSIONS)
        MATERIAL_THICKNESS = 957,
        PACAKAGE_CONTENT = 958,
        SHELF_LIFE = 959,
        PURITY = 960,
        COMPOSITION_INFORMATION = 961,
        PARTICLE_SIZE = 962,
        FINENESS = 963,
        AGGREGATE_STRENGTH = 964,
        COMPRESSIVE_STRENGTH = 965,
        TENSILE_STRENGTH = 966,
        YIELD_STRENGTH = 967,
        HARDNESS_ = 968,
        CORROSION_RESISTANCE = 969,
        FIRE_RESISTANCE_DURABLITY = 970,
        SPECIFIC_GRAVITY = 971,
        BULK_DENSITY = 972,
        DENSITY = 973,
        SETTING_TIME = 974,
        DRYING_TIME = 975,
        DEGREE_OF_WHITENESS = 976,
        MOISTURE_CONTENT = 977,
        WATER_ABSORPTION = 978,
        WARRANTY_INFORMATION = 979,
    };

    enum class eTWStockItemDutiesAndTaxes : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWStockItemDutiesAndTaxes (132))

    };

    enum class eTWGSTRateDetails : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWGSTRateDetails (133))

        HSN_CODE = 652,
        HSN = 652, //(Alias of: HSN_CODE)
        HSN_DESCRIPTION = 653,
        SAC = 654,
        SAC_CODE = 654, //(Alias of: SAC)
        SAC_DESCRIPTION = 655,
        NATURE_OF_TRANSACTION = 656,
        REVERSE_CHARGE_APPLICABLE = 657,
        REVERSE_CHARGE_RATE = 658,
        STATE_NAME = 659,
        APPLICABLE_FROM = 660,
        CALCULATION_TYPE = 661,
        SLAB_RATE_APPLICABLE = 662,
        UPTO_ITEM_RATE = 663,
        TAX_TYPE = 664,
        COMPUTED_ON = 665,
        COMPUTE_BASED_ON_ITEM_RATE = 666,
        IGST_RATE = 667,
        CGST_RATE = 668,
        SGST_RATE = 669,
        CESS_RATE = 670,
        STATE_CESS_RATE = 671,
        VALUATION_TYPE = 672,
        TYPE_OF_SUPPLY = 673,
        NOTIFICATION_DATE = 674,
        NOTIFICATION_NUMBER = 675,
        REPORTING_UNIT_OF_MEASURE = 676,
        NON_GST_GOODS = 980,
        INELIGIBLE_FOR_INPUT_CREDIT = 981,
    };

    enum class eTWVATRateDetails : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWVATRateDetails (134))

        CALCULATION_TYPE = 661,
        UPTO_ITEM_RATE = 663,
        TAX_TYPE = 664,
        COMPUTE_BASED_ON_ITEM_RATE = 666,
        FROM_DATE = 790,
        ADDITIOAL_TAX = 982,
        BUSINESS_NATURE = 983,
        CESS_ON_VAT = 984,
        GOODS_NATURE = 985,
        GOODS_TYPE = 986,
        CALCULATED_ON_ACTUAL_QUANTITY = 987,
        LOCAL_ATTITIONAL_TAX_RATE = 988,
        LOCAL_CESS_ON_VAT = 989,
        PARTY_ORGANISATION_TYPE = 990,
        PARTY_ORGANIZATION_TYPE = 990, //(Alias of: PARTY_ORGANISATION_TYPE)
        RATE_OF_VAT = 991,
        VAT_COMMODITY_CODE = 992,
        VAT_COMMODITY_NAME = 993,
    };

    enum class eTWUOMInformation : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWUOMInformation (135))

        NAME = 677,
        TYPE = 679,
        SYMBOL = 774,
        FORMAL_NAME = 775,
        NUMBER_OF_DECIMAL_PLACES = 777,
        CONVERSION_FACTOR = 813,
        UNIT_QUANTITY_CODE = 994,
        FIRST_UNIT = 995,
        SECOND_UNIT = 996,
    };

    enum class eTWLocationInformation : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWLocationInformation (136))

        ADDRESS = 622,
        NAME = 677,
        PARENT = 678,
        IS_STORAGE_ALLOWED = 997,
        PROJECT_FOR_COSTING = 998,
        USED_FOR_STOCKS_WITH_THIRD_PARTY = 999,
        USED_FOR_THIRD_PARTY_STOCKS_WITH_US = 1000,
        IS_Excise_Tax_Unit = 1001,
    };

    enum class eTWEmployeeCategoryInformation : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWEmployeeCategoryInformation (137))

        NAME = 677,
    };

    enum class eTWEmployeeGroupInformation : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWEmployeeGroupInformation (138))

        NAME = 677,
        NOTES = 713,
    };

    enum class eTWEmployeeInformation : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWEmployeeInformation (139))

        NAME = 677,
        PARENT = 678,
        DISPLAY_NAME = 1002,
        DATE_OF_JOINING = 1003,
        EMPLOYEE_NUMBER = 1004,
        DESIGNATION = 1005,
        FUNCTION = 1006,
        GENDER = 1007,
        DATE_OF_BIRTH = 1008,
        BLOOD_GROUP = 1009,
        FATHER_NAME = 1010,
        MOTHER_NAME = 1011,
        SPOUSE_NAME = 1012,
        TRANSACTION_TYPE = 1013,
    };

    enum class eTWStatutoryDeatils : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWStatutoryDeatils (140))

        PAN = 715,
        INCOME_TAX_NUMBER = 715, //(Alias of: PAN)
        APPLICABLE_TAX_REGIME = 1014,
        AADHAAR_NUMBER = 1015,
        UNIVERSAL_ACCOUNT_NUMBER = 1016,
        PF_ACCOUNT_NUMBER = 1017,
        EPS_ACCOUNT_NUMBER = 1018,
        DATE_OF_JOINING_FOR_PF = 1019,
        PRAN = 1020,
        PR_ACCOUNT_NUMBER = 1020, //(Alias of: PRAN)
        ESI_NUMBER = 1021,
        ESI_DISPENSARY_NAME = 1022,
    };

    enum class eTWPassportAndVisaDetails : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWPassportAndVisaDetails (141))

        PASSPORT_NUMBER = 1023,
        COUNTRY_OF_ISSUE = 1024,
        PASSPORT_EXPIRY_DATE = 1025,
        VISA_NUMBER = 1026,
        VISA_EXPIRY_DATE = 1027,
    };

    enum class eTWContractDetails : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWContractDetails (142))

        WORK_PERMIT_NUMBER = 1028,
        CONTRACT_START_DATE = 1029,
        CONTRACT_EXPIRY_DATE = 1030,
    };

    enum class eTWEmployeeContactDetails : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWEmployeeContactDetails (143))

        CONTACT_PERSON = 618,
        MAILING_NAME = 619,
        SON_OF = 620,
        DAUTHTER_OF = 621,
        ADDRESS = 622,
        FLAT_NUMBER = 623,
        FLOOR_NUMBER = 624,
        BUILDING_NAME = 625,
        NAME_OF_PREMISES_BUILDING = 625, //(Alias of: BUILDING_NAME)
        BUILDING_NUMBER = 626,
        ROAD = 627,
        STREET = 628,
        STREET_NAME = 628, //(Alias of: STREET)
        LANE = 629,
        AREA = 630,
        LOCATION = 631,
        DISTRICT = 632,
        TALUK = 633,
        CITY = 634,
        TOWN = 635,
        VILLAGE = 636,
        STATE = 637,
        COUNTRY = 638,
        COUNTRY_CODE = 639,
        COUNTRY_SUBDIVISION = 640,
        PO_BOX_NUMBER = 641,
        PIN_CODE = 642,
        POST_CODE = 643,
        STD_CODE = 644,
        PHONE_NO = 645,
        TELEPHONE_NO = 645, //(Alias of: PHONE_NO)
        MOBILE_NO = 646,
        FAX_NO = 647,
        EMAIL = 648,
        CC_EMAIL = 649,
        WEBSITE = 650,
        PLUS_CODE_ADDRESS = 651,
    };

    enum class eTWEmployeeBankAccountDetails : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWEmployeeBankAccountDetails (144))

        ACCOUNT_HOLDERS_NAME = 736,
        IFS_CODE = 738,
        SWIFT_CODE = 739,
        BANK_NAME = 740,
        BRANCH = 741,
        BSR_CODE = 742,
        CLIENT_CODE = 743,
        ACCOUNT_NO = 1031,
        CROSS_CHEQUES_USING = 1032,
        CROSS_CHECKS_USING = 1032, //(Alias of: CROSS_CHEQUES_USING)
    };

    enum class eTWEmployeeSalaryDetails : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWEmployeeSalaryDetails (145))

        CALCULATION_TYPE = 661,
        EFFECTIVE_FROM = 1033,
        PAY_HEAD_NAME = 1034,
        PAY_HEAD_TYPE = 1035,
        INCOME_TYPE = 1036,
        AFFECT_NET_SALARY = 1037,
        NAME_TO_BE_DISPLAYED_IN_PAY_SLIP = 1038,
        USE_FOR_CALCULATION_OF_GRATUITY = 1039,
        INCOME_TAX_COMPONENT = 1040,
        TAX_CALCULATION_BASIS = 1041,
        DEDUCT_TDS_ACROSS_PERIOD = 1042,
    };

    enum class eTWPayHeadInformation : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWPayHeadInformation (146))

        NAME = 677,
    };

    enum class eTWBankAccountDetails : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWBankAccountDetails (147))

        ACCOUNT_HOLDERS_NAME = 736,
        IFS_CODE = 738,
        SWIFT_CODE = 739,
        BANK_NAME = 740,
        BRANCH = 741,
        BSR_CODE = 742,
        CLIENT_CODE = 743,
        ACCOUNT_NO = 1031,
    };

    enum class eTWGSTRegistrationDetails : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWGSTRegistrationDetails (148))

        STATE = 637,
        REGISTRATION_TYPE = 726,
        ASSESSEE_OF_OTHER_TERRITORY = 727,
        GSTIN = 728,
        UIN = 728, //(Alias of: GSTIN)
        GST_APPLICABLE_FROM = 1043,
        PERIODICITY_OF_GSTR1 = 1044,
        NATURE_OF_GOODS = 1045,
    };

    enum class eTWIncomeTaxDetails : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWIncomeTaxDetails (149))

        SON_OF = 620,
        PAN = 715,
        DESIGNATION = 1005,
        TAX_DEDUCTED_AND_COLLECTION_ACCOUNT_NUMBER = 1046,
        TAN = 1046, //(Alias of: TAX_DEDUCTED_AND_COLLECTION_ACCOUNT_NUMBER)
        TAN_REGISTRATION_NUMBER = 1047,
        INCOME_TAX_CIRCLE = 1048,
        INCOME_TAX_WARD = 1049,
        DEDUCTOR_TYPE = 1050,
        DEDUCTOR_BRANCH = 1051,
        DEDUCTOR_DIVISION = 1052,
        NAME_OF_PERSON_RESPONSIBLE = 1053,
        DAUGHTER_OF = 1054,
    };

    enum class eTWUBLInvoiceDetails : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWUBLInvoiceDetails (150))

        VERSION_NUMBER = 1055,
        INVOICE_REFERENCE_NUMBER = 1056,
        BUSINESS_PROCESS_TYPE = 1057,
        INVOICE_NUMBER = 1058,
        INVOICE_ISSUE_DATE = 1059,
        PAYMENT_DUE_DATE = 1060,
        INVOICE_TYPE_CODE = 1061,
        INVOICE_NOTE = 1062,
        VALUE_ADDED_TAX_POINT_DATE = 1063,
        INVOICE_CURRENCY_CODE = 1064,
        VAT_ACCOUNTING_CURRENCY_CODE = 1065,
        BUYER_ACCOUNTING_REFERENCE = 1066,
        BUYER_REFERENCE = 1067,
        DELIVERY_PERIOD = 1068,
        INVOICE_PERIOD = 1069,
        INVOICING_PERIOD_START_DATE = 1070,
        INVOICING_PERIOD_END_DATE = 1071,
        VALUE_ADDED_TAX_POINT_DATE_CODE = 1072,
        PURCHASE_ORDER_REFERENCE = 1073,
        SALES_ORDER_REFERENCE = 1074,
        PRECEDING_INVOICE_REFERENCE = 1075,
        INVOICE_DOCUMENT_REFERENCE = 1076,
    };

    enum class eTWOrderReference : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWOrderReference (151))

        PURCHASE_ORDER_REFERENCE = 1073,
        SALES_ORDER_REFERENCE = 1074,
        PRECEDING_INVOICE_REFERENCE = 1075,
    };

    enum class eTWInvoiceDocumentReference : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWInvoiceDocumentReference (152))

        PRECEDING_INVOICE_NUMBER = 1077,
        PRECEDING_INVOICE_ISSUE_DATE = 1078,
    };

    enum class eTWDespatchAdviceReference : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWDespatchAdviceReference (153))

        DESPATCH_ADVICE_REFERENCE = 1079,
    };

    enum class eTWReceiptAdviceReference : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWReceiptAdviceReference (154))

        RECEIVING_ADVICE_REFERENCE = 1080,
    };

    enum class eTWContractReference : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWContractReference (155))

        CONTRACT_REFERENCE = 1081,
    };

    enum class eTWSeller : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWSeller (156))

        CONTACT_PERSON = 618,
        MAILING_NAME = 619,
        SON_OF = 620,
        DAUTHTER_OF = 621,
        ADDRESS = 622,
        FLAT_NUMBER = 623,
        FLOOR_NUMBER = 624,
        BUILDING_NAME = 625,
        NAME_OF_PREMISES_BUILDING = 625, //(Alias of: BUILDING_NAME)
        BUILDING_NUMBER = 626,
        ROAD = 627,
        STREET = 628,
        STREET_NAME = 628, //(Alias of: STREET)
        LANE = 629,
        AREA = 630,
        LOCATION = 631,
        DISTRICT = 632,
        TALUK = 633,
        CITY = 634,
        TOWN = 635,
        VILLAGE = 636,
        STATE = 637,
        COUNTRY = 638,
        COUNTRY_CODE = 639,
        COUNTRY_SUBDIVISION = 640,
        PO_BOX_NUMBER = 641,
        PIN_CODE = 642,
        POST_CODE = 643,
        STD_CODE = 644,
        PHONE_NO = 645,
        TELEPHONE_NO = 645, //(Alias of: PHONE_NO)
        MOBILE_NO = 646,
        FAX_NO = 647,
        EMAIL = 648,
        CC_EMAIL = 649,
        WEBSITE = 650,
        PLUS_CODE_ADDRESS = 651,
        NAME = 677,
        TAX_IDENTIFICATION_NUMBER = 700,
        TIN = 717,
        GSTIN = 728,
        PARTY_NAME = 677, //(Alias of: NAME)
        SELLER_NAME = 677, //(Alias of: NAME)
        TRADING_NAME = 1082,
        LEGAL_NAME = 1082, //(Alias of: TRADING_NAME)
        ELECTRONIC_ADDRESS = 1083,
        ELECTRONIC_ADDRESS_IDENTIFICATION_SCHEME_IDENTIFIER = 1084,
        BANK_ASSIGNED_CREDITOR_IDENTIFIER = 1085,
        BANK_ASSIGNED_CREDITOR_IDENTIFIER_IDENTIFICATION_SCHEME_IDENTIFIER = 1086,
        VAT_IDENTIFIER = 1087,
        TAX_REGISTRATION_IDENTIFIER = 1088,
        LEGAL_REGISTRATION_IDENTIFIER = 1089,
        LEGAL_REGISTRATION_IDENTIFIER_IDENTIFICATION_SCHEME_IDENTIFIER = 1090,
        ADDITIONAL_LEGAL_INFORMATION = 1091,
        CONTACT_POINT = 1092,
    };

    enum class eTWBuyer : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWBuyer (157))

        CONTACT_PERSON = 618,
        MAILING_NAME = 619,
        SON_OF = 620,
        DAUTHTER_OF = 621,
        ADDRESS = 622,
        FLAT_NUMBER = 623,
        FLOOR_NUMBER = 624,
        BUILDING_NAME = 625,
        NAME_OF_PREMISES_BUILDING = 625, //(Alias of: BUILDING_NAME)
        BUILDING_NUMBER = 626,
        ROAD = 627,
        STREET = 628,
        STREET_NAME = 628, //(Alias of: STREET)
        LANE = 629,
        AREA = 630,
        LOCATION = 631,
        DISTRICT = 632,
        TALUK = 633,
        CITY = 634,
        TOWN = 635,
        VILLAGE = 636,
        STATE = 637,
        COUNTRY = 638,
        COUNTRY_CODE = 639,
        COUNTRY_SUBDIVISION = 640,
        PO_BOX_NUMBER = 641,
        PIN_CODE = 642,
        POST_CODE = 643,
        STD_CODE = 644,
        PHONE_NO = 645,
        TELEPHONE_NO = 645, //(Alias of: PHONE_NO)
        MOBILE_NO = 646,
        FAX_NO = 647,
        EMAIL = 648,
        CC_EMAIL = 649,
        WEBSITE = 650,
        PLUS_CODE_ADDRESS = 651,
        NAME = 677,
        TAX_IDENTIFICATION_NUMBER = 700,
        TIN = 717,
        GSTIN = 728,
        IDENTIFIER = 864,
        PARTY_NAME = 677, //(Alias of: NAME)
        SELLER_NAME = 677, //(Alias of: NAME)
        TRADING_NAME = 1082,
        LEGAL_NAME = 1082, //(Alias of: TRADING_NAME)
        ELECTRONIC_ADDRESS = 1083,
        ELECTRONIC_ADDRESS_IDENTIFICATION_SCHEME_IDENTIFIER = 1084,
        VAT_IDENTIFIER = 1087,
        LEGAL_REGISTRATION_IDENTIFIER = 1089,
        LEGAL_REGISTRATION_IDENTIFIER_IDENTIFICATION_SCHEME_IDENTIFIER = 1090,
        CONTACT_POINT = 1092,
        IDENTIFIER_IDENTIFICATION_SCHEME_IDENTIFIER = 1093,
        PAYEE_IDENTIFIER_OR_BANK_ASSIGNED_CREDITOR_IDENTIFIER = 1094,
        PAYEE_OR_BANK_ASSIGNED_CREDITOR_IDENTIFIER_IDENTIFICATION_SCHEME_IDENTIFIER = 1095,
        PAYEE_NAME = 1096,
        PAYEE_LEGAL_REGISTRATION_IDENTIFIER = 1097,
        PAYEE_LEGAL_REGISTRATION_IDENTIFIER_IDENTIFICATION_SCHEME_IDENTIFIER = 1098,
    };

    enum class eTWDeliveryInformation : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWDeliveryInformation (158))

        CONTACT_PERSON = 618,
        MAILING_NAME = 619,
        SON_OF = 620,
        DAUTHTER_OF = 621,
        ADDRESS = 622,
        FLAT_NUMBER = 623,
        FLOOR_NUMBER = 624,
        BUILDING_NAME = 625,
        NAME_OF_PREMISES_BUILDING = 625, //(Alias of: BUILDING_NAME)
        BUILDING_NUMBER = 626,
        ROAD = 627,
        STREET = 628,
        STREET_NAME = 628, //(Alias of: STREET)
        LANE = 629,
        AREA = 630,
        LOCATION = 631,
        DISTRICT = 632,
        TALUK = 633,
        CITY = 634,
        TOWN = 635,
        VILLAGE = 636,
        STATE = 637,
        COUNTRY = 638,
        COUNTRY_CODE = 639,
        COUNTRY_SUBDIVISION = 640,
        PO_BOX_NUMBER = 641,
        PIN_CODE = 642,
        POST_CODE = 643,
        STD_CODE = 644,
        PHONE_NO = 645,
        TELEPHONE_NO = 645, //(Alias of: PHONE_NO)
        MOBILE_NO = 646,
        FAX_NO = 647,
        EMAIL = 648,
        CC_EMAIL = 649,
        WEBSITE = 650,
        PLUS_CODE_ADDRESS = 651,
        PARTY_NAME = 677, //(Alias of: NAME)
        DELIVER_TO_PARTY_NAME = 677, //(Alias of: PARTY_NAME)
        ACTUAL_DELIVERY_DATE = 1099,
    };

    enum class eTWBatchAllocation : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWBatchAllocation (159))

        AMOUNT = 23,
        NARRATION = 784,
        ACTUAL_QUANTITY = 818,
        BILLED_QUANTITY = 819,
        BATCH_NAME = 1100,
        BATCH_RATE = 1101,
        BATCH_MRP = 1102,
        ESCALATION_RATE = 1103,
        BATCH_DISCOUNT = 1104,
        MANUFACTURED_DATE = 1105,
        EXPIRY_PERIOD = 1106,
        GODOWN_NAME = 1107,
        SOURCE_GODOWN_NAME = 1108,
        DESTINATION_GODOWN_NAME = 1109,
        ADDITIONALL_AMOUNT = 1110,
        ADDITIONAL_EXPENSE_AMOUNT = 1111,
        INDENT_NUMBER = 1112,
        ORDER_NUMBER = 1113,
        ORDER_PRE_CLOSURE_DATE = 1114,
        ORDER_PRE_CLOSURE_QUANTITY = 1115,
        ORDER_PRE_CLOSURE_REASON = 1116,
        ORDER_TYPE = 1117,
        TRACKING_NUMBER = 1118,
    };

    enum class eTWBankRelatedDetails : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWBankRelatedDetails (160))

        AMOUNT = 23,
        CITY = 634,
        EMAIL = 648,
        NAME = 677,
        ACCOUNT_NUMBER = 737,
        IFS_CODE = 738,
        BANK_NAME = 740,
        ACCOUNT_TYPE = 757,
        BANK_LOCATION = 758,
        BENEFICIARY_CODE = 759,
        BRANCH_NAME = 761,
        CHEQUE_CROSS_COMMENT = 762,
        CHECK_CROSS_COMMENT = 762, //(Alias of: CHEQUE_CROSS_COMMENT)
        DELIVERY_MODE = 764,
        DELIVERY_TO = 765,
        MICR_CODE = 766,
        PAYABLE_LOCATION = 767,
        PAYMENT_FAVOURING = 768,
        PRINT_LOCATION = 769,
        TRANSFER_MODE = 770,
        NARRATION = 784,
        DATE = 785,
        BATCH_NUMBER = 814,
        TRANSACTION_TYPE = 1013,
        BENEFICIARY_BANK_CHARGES = 1119,
        IMB_CODE = 1120,
        TRANSACTION_ID = 1121,
        UNIQUE_REFERENCE_NUMBER = 1122,
        CARD_NUMBER = 1123,
        APPROVAL_CODE = 1124,
        MERCHANT_ID = 1125,
        TERMINAL_ID = 1126,
        TIP_AMOUNT = 1127,
        TIP_REMARKS = 1128,
        BANK_EMPLOYEE_NAME = 1129,
        BANK_PARTY_NAME = 1130,
        BANK_CODE = 1131,
        BANKERS_DATE = 1132,
        BANKERS_REMARKS = 1133,
        BANK_REFERENCE = 1134,
        CASH_DENOMINATION = 1135,
        CHEQUE_PRINTED = 1136,
        CHECK_PRINTED = 1136, //(Alias of: CHEQUE_PRINTED)
        CHEQUE_RANGE = 1137,
        CHECK_RANGE = 1137, //(Alias of: CHEQUE_RANGE)
        CHEQUE_NUMBER = 1138,
        CHECK_NUMBER = 1138, //(Alias of: CHEQUE_NUMBER)
        CLEARING_BANK_CODE = 1139,
        INSTRUMENT_DATE = 1140,
        INSTRUMENT_NUMBER = 1141,
        INSTRUMENT_RETURN_DATE = 1142,
        LOCAL_BANK_CHARGES = 1143,
        PDC_ACTUAL_DATE = 1144,
        PDC_REMARKS = 1145,
        DRAWEE_BANK_CODE = 1146,
        PAYABLE_LOCATION_CODE = 1147,
        PAYMENT_MODE = 1148,
        PAYMENT_GATEWAY = 1149,
        PRINT_LOCATION_CODE = 1150,
        PAYMENT_ADVICE_STATUS = 1151,
        RESERVATION_STATUS = 1152,
        SETTLE_AMOUNT = 1153,
        STATUS = 1154,
        TRANSACTION_NAME = 1155,
        VOID_AMOUNT = 1156,
    };

    enum class eTWInvTransactionDetails : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWInvTransactionDetails (161))

        TRANSACTION_TYPE = 1013,
        SUB_TRANSACTION_TYPE = 1157,
        TRANSASCTION_CATEGORY = 1158,
        ECOMMERCE_GSTIN = 1159,
    };

    enum class eTWInvDocumentDetails : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWInvDocumentDetails (162))

        DOCUMENT_TYPE = 1160,
        DOCUMENT_NUMBER = 1161,
        DOCUMENT_DATE = 1162,
    };

    enum class eTWInvExportDetails : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWInvExportDetails (163))

        CURRENCY = 786,
        EXPORT_CATEGORY = 1163,
        SHIPPING_BILL_NO = 1164,
        SHIPPING_BILL_DATE = 1165,
        PORT_CODE = 1166,
        INVOICE_VALUE_IN_CURRENCY = 1167,
    };

    enum class eTWInvSellerDetails : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWInvSellerDetails (164))

        FLOOR_NUMBER = 624,
        BUILDING_NAME = 625,
        BUILDING_NUMBER = 626,
        LOCATION = 631,
        DISTRICT = 632,
        STATE = 637,
        LEGAL_NAME = 1082, //(Alias of: TRADING_NAME)
        SELLER_GSTIN = 1168,
        TRADE_NAME = 1082, //(Alias of: LEGAL_NAME)
        PINCODE = 1169,
    };

    enum class eTWInvBuyerDetails : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWInvBuyerDetails (165))

        FLOOR_NUMBER = 624,
        BUILDING_NAME = 625,
        BUILDING_NUMBER = 626,
        LOCATION = 631,
        DISTRICT = 632,
        STATE = 637,
        LEGAL_NAME = 1082, //(Alias of: TRADING_NAME)
        TRADE_NAME = 1082, //(Alias of: LEGAL_NAME)
        PINCODE = 1169,
        BUYER_GSTIN = 1170,
    };

    enum class eTWInvDespatchDetails : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWInvDespatchDetails (166))

        FLOOR_NUMBER = 624,
        BUILDING_NAME = 625,
        BUILDING_NUMBER = 626,
        LOCATION = 631,
        DISTRICT = 632,
        STATE = 637,
        NAME = 677,
        PINCODE = 1169,
    };

    enum class eTWInvShippingDetails : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWInvShippingDetails (167))

        FLOOR_NUMBER = 624,
        BUILDING_NAME = 625,
        BUILDING_NUMBER = 626,
        LOCATION = 631,
        DISTRICT = 632,
        STATE = 637,
        NAME = 677,
        PINCODE = 1169,
    };

    enum class eTWInvInvoiceValues : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWInvInvoiceValues (168))

        ASSESSABLE_VALUE = 1171,
        IGST_VALUE = 1172,
        CGST_VALUE = 1173,
        SGST_VALUE = 1174,
        CESS_NON_ADVOL = 1175,
        CESS_VALUE = 1176,
        TOTAL_INVOICE_VALUE = 1177,
    };

    enum class eTWInvItemDetails : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWInvItemDetails (169))

        QUANTITY = 26,
        HSN_CODE = 652,
        IGST_RATE = 667,
        CGST_RATE = 668,
        SGST_RATE = 669,
        NAME = 677,
        DESCRIPTION = 712,
        DISCOUNT = 820,
        UNIT_CODE = 1178,
        UNIT_PRICE = 1179,
        SELLING_PRICE = 1180,
        CESS_ADVOL_RATE = 1181,
        CESS_NON_ADVOL_RATE = 1182,
        TOTAL_PRICE = 1183,
    };

    enum class eTWInvPaymentDetails : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWInvPaymentDetails (170))

        PAYMENT_DUE_DATE = 1060,
        ACCOUNT_DETAILS = 1184,
        BALANCE_AMOUNT = 1185,
    };

    enum class eTWProductInformation : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWProductInformation (171))

        SIZE = 191,
        PRODUCT_ID = 283,
        NAME = 677,
        DESCRIPTION = 712,
        MPN = 797, //(Alias of: MANUFACTURER_PART_NUMBER)
        NSN = 798, //(Alias of: NATO_STOCK_NUMBER)
        BARCODE = 799,
        SKU = 799, //(Alias of: BARCODE)
        GTIN12 = 801,
        GTIN13 = 802,
        GTIN14 = 803,
        GTIN8 = 804,
        CATEGORY = 806,
        BRAND = 807,
        COLOUR = 808,
        COLOR = 809,
        MODEL = 810,
        SERIAL_NUMBER = 829,
        ADDITIONAL_PROPERTY = 830,
        AGGREGATE_RATING = 831,
        AUDIENCE = 832,
        AWARD = 833,
        DEPTH = 834,
        HAS_MERCHANT_RETURN_POLICY = 836,
        HEIGHT = 837,
        ACCESSORY_FOR = 838,
        SPARE_PART_FOR = 839,
        CONSUMABLE_FOR = 840,
        RELATED_TO = 841,
        SIMILAR_TO = 842,
        IS_VARIANT_OF = 843,
        ITEM_CONDITION = 844,
        LOGO = 845,
        MANUFACTURER = 846,
        MATERIAL = 847,
        OFFERS = 848,
        PATTERN = 849,
        PRODUCTION_DATE = 850,
        PURCHASE_DATE = 851,
        RELEASE_DATE = 852,
        SLOGAN = 853,
        WEIGHT = 854,
        WIDTH = 855,
        IMAGE = 858,
        URL = 859,
        INVENTORY_LEVEL = 860,
        GTIN = 861,
        HAS_ENERGY_CONSUMPTION_DETAILS = 862,
        PRODUCT_GROUP = 863,
        IDENTIFIER = 864,
        PRODUCT_DESCRIPTION = 712, //(Alias of: DESCRIPTION)
        ADDITIONALTYPE = 1186,
        ALTERNATENAME = 1187,
    };

    enum class eTWProductAttributes : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWProductAttributes (172))

    };

    enum class eTWStationeryProductAttributes : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWStationeryProductAttributes (182))

        HSN = 652, //(Alias of: HSN_CODE)
        CATEGORY = 806,
        BRAND = 807,
        COLOUR = 808,
        COLOR = 809,
        MRP = 824,
        MATERIAL = 847,
        SUB_BRAND = 865,
        VARIANT = 866,
        COMPANY = 867,
        PRODUCT_CATEGORY = 868,
        SEGMENT = 869,
        NET_WEIGHT = 870,
        CAPACITY_COMPOSITE = 871,
        TRADABLE_UNIT = 872,
        PACK_TYPE = 873,
        PACK_SIZE = 874,
        SUITABLE_FOR = 875,
        SIZE_SIMPLE = 876,
        MODEL_NUMBER = 877,
        COVER_MATERIAL = 878,
        SHAPE = 879,
        PATTERN_DESIGN = 880,
        FINISHING = 881,
        GRADE = 882,
        DIAMETER = 883,
        DIAMETRE = 883, //(Alias of: DIAMETER)
        ADDITIONAL_INFORMATION = 884,
        PRODUCT_DIMENSIONS = 885,
    };

    enum class eTWBooksProductAttributes : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWBooksProductAttributes (183))

        SIZE = 191,
        LOCATION = 631,
        HSN = 652, //(Alias of: HSN_CODE)
        BARCODE = 799,
        CATEGORY = 806,
        BRAND = 807,
        MRP = 824,
        COMPANY = 867,
        PRODUCT_CATEGORY = 868,
        SEGMENT = 869,
        NET_WEIGHT = 870,
        SUITABLE_FOR = 875,
        COVER_MATERIAL = 878,
        FINISHING = 881,
        ADDITIONAL_INFORMATION = 884,
        PRODUCT_DIMENSIONS = 885,
        COUNTRY_OF_ORIGIN = 886,
        BOOK_VOLUME = 887,
        PAPER_THICKNESS = 888,
        BINDING_TYPE = 889,
        NUMBER_OF_PAGES = 890,
        ISBN_10 = 891,
        ISBN_13 = 892,
        PUBLISHER = 893,
        EDITION = 894,
        GENRE = 895,
        SERIES = 896,
        AUTHOR = 897,
        LANGUAGE = 898,
    };

    enum class eTWPharmaceuticalProductAttributes : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWPharmaceuticalProductAttributes (184))

        LOCATION = 631,
        HSN = 652, //(Alias of: HSN_CODE)
        BARCODE = 799,
        CATEGORY = 806,
        BRAND = 807,
        COLOUR = 808,
        MRP = 824,
        WEIGHT = 854,
        SUB_BRAND = 865,
        VARIANT = 866,
        COMPANY = 867,
        PRODUCT_CATEGORY = 868,
        SEGMENT = 869,
        PACK_TYPE = 873,
        PACK_SIZE = 874,
        SUITABLE_FOR = 875,
        ADDITIONAL_INFORMATION = 884,
        COUNTRY_OF_ORIGIN = 886,
        GENERIC_NAME = 899,
        SUB_VARIANT = 900,
        FORM = 901,
        FLAVOUR = 902,
        FRAGRANCE = 903,
        VOLUME = 904,
        MEDICAL_PRACTICE = 905,
        PRESCRIPTION_DRUG_CLASS = 906,
        CERTIFICATIONS = 907,
        INGREDIENTS = 908,
        COMPOSITION = 909,
        CONCENTRATION = 910,
        USED_FOR = 911,
        COMPATIBLE_WITH = 912,
        FEATURES = 913,
        BENEFITS = 914,
        DOSAGE = 915,
        STORAGE_INFORMATION = 916,
        WARNINGS = 917,
        SIDE_EFFECTS = 918,
    };

    enum class eTWConsumerDurablesProductAttributes : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWConsumerDurablesProductAttributes (185))

        LOCATION = 631,
        HSN = 652, //(Alias of: HSN_CODE)
        TYPE = 679,
        CATEGORY = 806,
        BRAND = 807,
        COLOUR = 808,
        COLOR = 809,
        MRP = 824,
        MATERIAL = 847,
        PATTERN = 849,
        SUB_BRAND = 865,
        VARIANT = 866,
        COMPANY = 867,
        PRODUCT_CATEGORY = 868,
        SEGMENT = 869,
        NET_WEIGHT = 870,
        TRADABLE_UNIT = 872,
        PACK_TYPE = 873,
        PACK_SIZE = 874,
        SUITABLE_FOR = 875,
        SIZE_SIMPLE = 876,
        MODEL_NUMBER = 877,
        SHAPE = 879,
        FINISHING = 881,
        GRADE = 882,
        DIAMETER = 883,
        DIAMETRE = 883, //(Alias of: DIAMETER)
        ADDITIONAL_INFORMATION = 884,
        PRODUCT_DIMENSIONS = 885,
        COUNTRY_OF_ORIGIN = 886,
        FORM = 901,
        VOLUME = 904,
        CERTIFICATIONS = 907,
        COMPATIBLE_WITH = 912,
        FEATURES = 913,
        PACKAGE_DIMENSIONS = 919,
        PACKAGE_CONTENT = 920,
        CAPACITY = 921,
        CAPACITY_SIMPLE = 922,
        POWER_SOURCE = 923,
        VOLTAGE_ = 924,
        FREQUENCY = 925,
        PHASE = 926,
        POWER = 927,
        BATTERY_TYPE = 928,
        ENERGY_RATING = 929,
        CHARGE_TIME = 930,
        CONNECTIVTY = 931,
        APERTURE = 932,
        FIELD_OF_VIEW = 933,
        FOCAL_LENGTH = 934,
        CLOSE_FOCUS_LIMIT = 935,
        MAGNIFICATION = 936,
        FOCAL_RATIO = 937,
        WORKING_PRINCIPLE = 938,
        TEMPERATURE_RANGE = 939,
        INSTALLATION_TYPE = 940,
        COMPUTER_MEMORY_TYPE = 941,
        DISPLAY_TECHNOLOGY = 942,
        HARD_DISK_TECHNOLOGY = 943,
        STORAGE_SIZE = 944,
        DISPLAY_RESOLUTION = 945,
        OPERATING_SYSTEM = 946,
        PROCESSOR_SPEED = 947,
        PROCESSOR_TYPE = 948,
        RAM = 949,
        SCREEN_SIZE = 950,
        CPU_ARCHITECTURE = 951,
        AVERAGE_LIFE = 952,
        TECHNICAL_SPECIFICATIONS = 953,
        WARRANTY = 954,
        GUARANTEE = 955,
    };

    enum class eTWConstructionMaterialProductAttributes : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWConstructionMaterialProductAttributes (186))

        LOCATION = 631,
        HSN = 652, //(Alias of: HSN_CODE)
        TYPE = 679,
        BARCODE = 799,
        CATEGORY = 806,
        BRAND = 807,
        COLOUR = 808,
        COLOR = 809,
        MRP = 824,
        MATERIAL = 847,
        PATTERN = 849,
        SUB_BRAND = 865,
        VARIANT = 866,
        COMPANY = 867,
        PRODUCT_CATEGORY = 868,
        SEGMENT = 869,
        NET_WEIGHT = 870,
        TRADABLE_UNIT = 872,
        PACK_TYPE = 873,
        PACK_SIZE = 874,
        SUITABLE_FOR = 875,
        SIZE_SIMPLE = 876,
        MODEL_NUMBER = 877,
        SHAPE = 879,
        FINISHING = 881,
        GRADE = 882,
        ADDITIONAL_INFORMATION = 884,
        PRODUCT_DIMENSIONS = 885,
        COUNTRY_OF_ORIGIN = 886,
        FORM = 901,
        VOLUME = 904,
        CERTIFICATIONS = 907,
        PACKAGE_DIMENSIONS = 919,
        SIZE_COMPOSITE = 956,
        DIMENSIONS = 885, //(Alias of: PRODUCT_DIMENSIONS)
        MATERIAL_THICKNESS = 957,
        PACAKAGE_CONTENT = 958,
        SHELF_LIFE = 959,
        PURITY = 960,
        COMPOSITION_INFORMATION = 961,
        PARTICLE_SIZE = 962,
        FINENESS = 963,
        AGGREGATE_STRENGTH = 964,
        COMPRESSIVE_STRENGTH = 965,
        TENSILE_STRENGTH = 966,
        YIELD_STRENGTH = 967,
        HARDNESS_ = 968,
        CORROSION_RESISTANCE = 969,
        FIRE_RESISTANCE_DURABLITY = 970,
        SPECIFIC_GRAVITY = 971,
        BULK_DENSITY = 972,
        DENSITY = 973,
        SETTING_TIME = 974,
        DRYING_TIME = 975,
        DEGREE_OF_WHITENESS = 976,
        MOISTURE_CONTENT = 977,
        WATER_ABSORPTION = 978,
        WARRANTY_INFORMATION = 979,
    };

    enum class eTWProductDutiesAndTaxes : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWProductDutiesAndTaxes (173))

    };

    enum class eTWProductGSTRateDetails : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWProductGSTRateDetails (189))

        HSN = 652, //(Alias of: HSN_CODE)
        HSN_DESCRIPTION = 653,
        SAC = 654,
        SAC_DESCRIPTION = 655,
        REVERSE_CHARGE_APPLICABLE = 657,
        APPLICABLE_FROM = 660,
        UPTO_ITEM_RATE = 663,
        TAX_TYPE = 664,
        COMPUTED_ON = 665,
        COMPUTE_BASED_ON_ITEM_RATE = 666,
        IGST_RATE = 667,
        CGST_RATE = 668,
        SGST_RATE = 669,
        CESS_RATE = 670,
        STATE_CESS_RATE = 671,
        VALUATION_TYPE = 672,
        NON_GST_GOODS = 980,
        INELIGIBLE_FOR_INPUT_CREDIT = 981,
    };

    enum class eTWProductVATRateDetails : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWProductVATRateDetails (190))

        CALCULATION_TYPE = 661,
        UPTO_ITEM_RATE = 663,
        TAX_TYPE = 664,
        COMPUTE_BASED_ON_ITEM_RATE = 666,
        FROM_DATE = 790,
        ADDITIOAL_TAX = 982,
        BUSINESS_NATURE = 983,
        CESS_ON_VAT = 984,
        GOODS_NATURE = 985,
        GOODS_TYPE = 986,
        CALCULATED_ON_ACTUAL_QUANTITY = 987,
        LOCAL_ATTITIONAL_TAX_RATE = 988,
        LOCAL_CESS_ON_VAT = 989,
        PARTY_ORGANISATION_TYPE = 990,
        PARTY_ORGANIZATION_TYPE = 990, //(Alias of: PARTY_ORGANISATION_TYPE)
        RATE_OF_VAT = 991,
        VAT_COMMODITY_CODE = 992,
        VAT_COMMODITY_NAME = 993,
    };

    enum class eTWBrandInformation : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWBrandInformation (174))

        NAME = 677,
        DESCRIPTION = 712,
        LOGO = 845,
        SLOGAN = 853,
        IMAGE = 858,
        AGGREGATERATING = 1188,
        REVIEW = 1189,
    };

    enum class eTWEnergyConsumptionDetails : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWEnergyConsumptionDetails (175))

        ENERGY_EFFICIENCY_SCALE_MAX = 1190,
        ENERGY_EFFICIENCY_SCALE_MIN = 1191,
        ENERGY_EFFICIENCY_CATEGORY = 1192,
    };

    enum class eTWMerchantReturnPolicy : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWMerchantReturnPolicy (176))

        IN_STORE_RETURNS_OFFERED = 1193,
        MERCHANT_RETURN_DAYS = 1194,
        MERCHANT_RETURN_LINK = 1195,
        REFUND_TYPE = 1196,
        RETURN_FEES = 1197,
        RETURN_POLICY_CATEGORY = 1198,
    };

    enum class eTWVehicleInformation : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWVehicleInformation (177))

        PRODUCTION_DATE = 850,
        PURCHASE_DATE = 851,
        ACCELERATION_TIME = 1199,
        BODY_TYPE = 1200,
        CALL_SIGN = 1201,
        CARGO_VOLUME = 1202,
        DATE_VEHICLE_FIRST_REGISTERED = 1203,
        DRIVE_WHEEL_CONFIGURATION = 1204,
        EMISSIONS_CO2 = 1205,
        FUEL_CAPACITY = 1206,
        FUEL_CONSUMPTION = 1207,
        FUEL_EFFICIENCY = 1208,
        FUEL_TYPE = 1209,
        KNOWN_VEHICLE_DAMAGES = 1210,
        MEETS_EMISSION_STANDARD = 1211,
        MILEAGE_FROM_ODOMETER = 1212,
        MODEL_DATE = 1213,
        NUMBER_OF_AIR_BAGS = 1214,
        NUMBER_OF_AXLES = 1215,
        NUMBER_OF_DOORS = 1216,
        NUMBER_OF_FORWARD_GEARS = 1217,
        NUMBER_OF_PREVIOUS_OWNERS = 1218,
        PAY_LOAD = 1219,
        SEATING_CAPACITY = 1220,
        SPEED = 1221,
        STEERING_POSITION = 1222,
        TONGUE_WEIGHT = 1223,
        TRAILER_WEIGHT = 1224,
        VEHICLE_CONFIGURATION = 1225,
        VEHICLE_ENGINE = 1226,
        VEHICLE_IDENTIFICATION_NUMBER = 1227,
        VEHICLE_INTERIOR_COLOUR = 1228,
        VEHICLE_INTERIOR_COLOR = 1228, //(Alias of: VEHICLE_INTERIOR_COLOUR)
        VEHICLE_INTERIORTYPE = 1229,
        VEHICLE_MODEL_DATE = 1230,
        VEHICLE_SEATING_CAPACITY = 1231,
        VEHICLE_SPECIAL_USAGE = 1232,
        VEHICLE_TRANSMISSION = 1233,
        WEIGHT_TOTAL = 1234,
        WHEEL_BASE = 1235,
    };

    enum class eTWOwnershipInformation : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWOwnershipInformation (178))

        NAME = 677,
        ACQUIRED_FROM = 1236,
        OWNED_FROM = 1237,
        OWNED_THROUGH = 1238,
        TYPE_OF_GOOD = 1239,
    };

    enum class eTWServiceInformation : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWServiceInformation (179))

        NAME = 677,
        DESCRIPTION = 712,
        CATEGORY = 806,
        BRAND = 807,
        AGGREGATE_RATING = 831,
        AUDIENCE = 832,
        AWARD = 833,
        LOGO = 845,
        OFFERS = 848,
        SLOGAN = 853,
        IMAGE = 858,
        REVIEW = 1189,
        AREA_SERVED = 1240,
        AVAILABLE_CHANNEL = 1241,
        BROKER = 1242,
        HOURS_AVAILABLE = 1243,
        IS_RELATED_TO = 1244,
        IS_SIMILAR_TO = 1245,
        PROVIDER = 1246,
        PROVIDER_MOBILITY = 1247,
        SERVICE_OUTPUT = 1248,
        SERVICE_TYPE = 1249,
        TERMS_OF_SERVICE = 1250,
        ISSUEDTHROUGH = 1251,
        ITEMOFFERED = 1252,
    };

    enum class eTWPermitInformation : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWPermitInformation (180))

        NAME = 677,
        DESCRIPTION = 712,
        IMAGE = 858,
        ISSUED_BY = 1253,
        ISSUED_THROUGH = 1254,
        PERMIT_AUDIENCE = 1255,
        VALID_FOR = 1256,
        VALID_FROM = 1257,
        VALID_IN = 1258,
        VALID_UNTIL = 1259,
    };

    enum class eTWBedDetails : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWBedDetails (181))

        NAME = 677,
        DESCRIPTION = 712,
        IMAGE = 858,
        NUMBER_OF_BEDS = 1260,
        TYPE_OF_BED = 1261,
    };

    enum class eTWDimensions : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWDimensions (187))

        DEPTH = 834,
        HEIGHT = 837,
        WEIGHT = 854,
        WIDTH = 855,
        DIAMETER = 883,
        DIAMETRE = 883, //(Alias of: DIAMETER)
        LENGTH = 1262,
        THICKNESS = 1263,
        BREADTH = 1264,
    };

    enum class eTWMeasurement : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWMeasurement (188))

        DEPTH = 834,
        HEIGHT = 837,
        WIDTH = 855,
        NET_WEIGHT = 870,
        PRODUCT_DIMENSIONS = 885,
        VOLUME = 904,
        PACKAGE_DIMENSIONS = 919,
        SIZE_COMPOSITE = 956,
        MATERIAL_THICKNESS = 957,
        SHELF_LIFE = 959,
        PARTICLE_SIZE = 962,
        AGGREGATE_STRENGTH = 964,
        COMPRESSIVE_STRENGTH = 965,
        TENSILE_STRENGTH = 966,
        YIELD_STRENGTH = 967,
        FIRE_RESISTANCE_DURABLITY = 970,
        BULK_DENSITY = 972,
        DENSITY = 973,
        SETTING_TIME = 974,
        DRYING_TIME = 975,
        LENGTH = 1262,
        THICKNESS = 1263,
        BREADTH = 1264,
        GROSS_WEIGHT = 1265,
    };

    enum class eTWPersonDetails : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWPersonDetails (191))

        ADDRESS = 622,
        EMAIL = 648,
        NAME = 677,
        PARENT = 678,
        DESCRIPTION = 712,
        BRAND = 807,
        AWARD = 833,
        HEIGHT = 837,
        RELATED_TO = 841,
        WEIGHT = 854,
        IMAGE = 858,
        URL = 859,
        GENDER = 1007,
        CONTACT_POINT = 1092,
        ALTERNATENAME = 1187,
        GIVEN_NAME = 1266,
        AFFILIATION = 1267,
        ALUMNI_OF = 1268,
        BIRTH_DATE = 1269,
        BIRTH_PLACE = 1270,
        CHILDREN = 1271,
        COLLEAGUE = 1272,
        DEATH_DATE = 1273,
        DEATH_PLACE = 1274,
        DUNS = 1275,
        FAMILY_NAME = 1276,
        FAX_NUMBER = 1277,
        FOLLOWS = 1278,
        FUNDER = 1279,
        GLOBAL_LOCATION_NUMBER = 1280,
        OCCUPATION = 1281,
        HOME_LOCATION = 1282,
        HONORIFIC_PREFIX = 1283,
        HONORIFIC_SUFFIX = 1284,
        ISICV4 = 1285,
        JOB_TITLE = 1286,
        KNOWS = 1287,
        KNOWS_ABOUT = 1288,
        KNOWS_LANGUAGE = 1289,
        MAKES_OFFER = 1290,
        MEMBER_OF = 1291,
        NAICS = 1292,
        NATIONALITY = 1293,
        NET_WORTH = 1294,
        OWNS = 1295,
        PERFORMER_IN = 1296,
        PUBLISHING_PRINCIPLES = 1297,
        SEEKS = 1298,
        SIBLING = 1299,
        SPONSOR = 1300,
        SPOUSE = 1301,
        TAXID = 1302,
        TELEPHONE = 1303,
        VATID = 1304,
        WORK_LOCATION = 1305,
        WORKS_FOR = 1306,
    };

    enum class eTWPersonalContactDetails : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWPersonalContactDetails (193))

        CONTACT_PERSON = 618,
        MAILING_NAME = 619,
        SON_OF = 620,
        DAUTHTER_OF = 621,
        ADDRESS = 622,
        FLAT_NUMBER = 623,
        FLOOR_NUMBER = 624,
        BUILDING_NAME = 625,
        NAME_OF_PREMISES_BUILDING = 625, //(Alias of: BUILDING_NAME)
        BUILDING_NUMBER = 626,
        ROAD = 627,
        STREET = 628,
        STREET_NAME = 628, //(Alias of: STREET)
        LANE = 629,
        AREA = 630,
        LOCATION = 631,
        DISTRICT = 632,
        TALUK = 633,
        CITY = 634,
        TOWN = 635,
        VILLAGE = 636,
        STATE = 637,
        COUNTRY = 638,
        COUNTRY_CODE = 639,
        COUNTRY_SUBDIVISION = 640,
        PO_BOX_NUMBER = 641,
        PIN_CODE = 642,
        POST_CODE = 643,
        STD_CODE = 644,
        PHONE_NO = 645,
        TELEPHONE_NO = 645, //(Alias of: PHONE_NO)
        MOBILE_NO = 646,
        FAX_NO = 647,
        EMAIL = 648,
        CC_EMAIL = 649,
        WEBSITE = 650,
        PLUS_CODE_ADDRESS = 651,
    };

    enum class eTWOccupationInformation : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWOccupationInformation (192))

        DESCRIPTION = 712,
        EDUCATION_REQUIREMENTS = 1307,
        ESTIMATED_SALARY = 1308,
        EXPERIENCE_REQUIREMENTS = 1309,
        OCCUPATION_LOCATION = 1310,
        OCCUPATIONAL_CATEGORY = 1311,
        QUALIFICATIONS = 1312,
        RESPONSIBILITIES = 1313,
        SKILLS = 1314,
    };

    enum class eTWVoucher : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWVoucher (194))

        EFFECTIVE_DATE = 828,
        VOUCHER_NARATION = 1315,
    };

    enum class eTWTransactionDetails : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWTransactionDetails (195))

        REVERSE_CHARGE_APPLICABLE = 657,
        TRANSACTION_TYPE = 1013,
        SUB_TRANSACTION_TYPE = 1157,
        TRANSASCTION_CATEGORY = 1158,
        ECOMMERCE_GSTIN = 1159,
        DOCUMENT_TYPE = 1160,
        DOCUMENT_NUMBER = 1161,
        DOCUMENT_DATE = 1162,
        SUPPLY_TYPE = 1316,
    };

    enum class eTWVoucherOrderDetails : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWVoucherOrderDetails (196))

        ORDER_NUMBER = 1113,
        TERMS_OF_PAYMENT = 1317,
        TERMS_OF_DELIVERY = 1318,
        MODE_OF_PAYMENT = 1319,
        OTHER_REFERENCES = 1320,
    };

    enum class eTWVoucherOriginalInvoiceDetails : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWVoucherOriginalInvoiceDetails (197))

        ORIGINAL_INVOICE_BOOK_NAME = 1321,
        ORIGINAL_INVOICE_NUMBER = 1322,
        ORIGINAL_INVOICE_DATE = 1323,
    };

    enum class eTWVoucherExportDetails : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWVoucherExportDetails (198))

        COUNTRY_CODE = 639,
        CURRENCY = 786,
        EXPORT_CATEGORY = 1163,
        SHIPPING_BILL_DATE = 1165,
        PORT_CODE = 1166,
        INVOICE_VALUE_IN_CURRENCY = 1167,
        PLACE_OF_RECEIPT_BY_SHIPPER = 1324,
        VESSEL_NUMBER = 1325,
        FLIGHT_NUMBER = 1326,
        PORT_OF_LOADING = 1327,
        PORT_OF_DISCHARGE = 1328,
        COUNTRY_TO = 1329,
        SHIPPING_BILL_NUMBER = 1330,
        BILL_OF_ENTRY_NUMBER = 1331,
        BILL_OF_ENTRY_DATE = 1332,
        FOREIGN_CURRENCY_CODE = 1333,
        REFUND_CLAIM = 1334,
        EXPORT_DUTY = 1335,
    };

    enum class eTWVoucherImportDetails : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWVoucherImportDetails (199))

        PORT_CODE = 1166,
        PLACE_OF_RECEIPT_BY_SHIPPER = 1324,
        VESSEL_NUMBER = 1325,
        FLIGHT_NUMBER = 1326,
        PORT_OF_LOADING = 1327,
        PORT_OF_DISCHARGE = 1328,
        COUNTRY_TO = 1329,
        SHIPPING_BILL_NUMBER = 1330,
        BILL_OF_ENTRY_NUMBER = 1331,
        BILL_OF_ENTRY_DATE = 1332,
        MARKS = 1336,
        NUMBER_OF_PACKAGES = 1337,
    };

    enum class eTWVouchereWayBillDetails : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWVouchereWayBillDetails (200))

        DOCUMENT_TYPE = 1160,
        DOCUMENT_NUMBER = 1161,
        DOCUMENT_DATE = 1162,
        SUPPLY_TYPE = 1316,
        SUB_SUPPLY_TYPE = 1338,
        SUB_SYPPLY_DESCRIPTION = 1339,
        STATE_OF_SUPPLY = 1340,
        TYPE_OF_TRANSACTION = 1341,
        EWAY_BILL_NUMBER = 1342,
        EWAY_BILL_DATE = 1343,
        EWAY_BILL_VALID_UPTO = 1344,
        EWAY_BILL_STATUS = 1345,
        EWAY_BILL_ALERT = 1346,
        EWAY_BILL_ERROR_CODE = 1347,
        EWAY_BILL_INFO = 1348,
        CONSOLIDATED_BILL_DATE = 1349,
        CONSOLIDATED_BILL_NUMBER = 1350,
        SHIPPED_FROM_STATE = 1351,
        SHIPPED_TO_DATE = 1352,
    };

    enum class eTWeWayBillCONSIGNEEDetails : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWeWayBillCONSIGNEEDetails (201))

        CONTACT_PERSON = 618,
        MAILING_NAME = 619,
        SON_OF = 620,
        DAUTHTER_OF = 621,
        ADDRESS = 622,
        FLAT_NUMBER = 623,
        FLOOR_NUMBER = 624,
        BUILDING_NAME = 625,
        NAME_OF_PREMISES_BUILDING = 625, //(Alias of: BUILDING_NAME)
        BUILDING_NUMBER = 626,
        ROAD = 627,
        STREET = 628,
        STREET_NAME = 628, //(Alias of: STREET)
        LANE = 629,
        AREA = 630,
        LOCATION = 631,
        DISTRICT = 632,
        TALUK = 633,
        CITY = 634,
        TOWN = 635,
        VILLAGE = 636,
        STATE = 637,
        COUNTRY = 638,
        COUNTRY_CODE = 639,
        COUNTRY_SUBDIVISION = 640,
        PO_BOX_NUMBER = 641,
        PIN_CODE = 642,
        POST_CODE = 643,
        STD_CODE = 644,
        PHONE_NO = 645,
        TELEPHONE_NO = 645, //(Alias of: PHONE_NO)
        MOBILE_NO = 646,
        FAX_NO = 647,
        EMAIL = 648,
        CC_EMAIL = 649,
        WEBSITE = 650,
        PLUS_CODE_ADDRESS = 651,
        NAME = 677,
        GSTIN = 728,
        UIN = 728, //(Alias of: GSTIN)
        LEGAL_NAME = 1082, //(Alias of: TRADING_NAME)
        TRADE_NAME = 1082, //(Alias of: LEGAL_NAME)
        GST_REGISTRATION_TYPE = 1353,
        PLACE_OF_SUPPLY = 1354,
    };

    enum class eTWeWayBillCONSIGNORDetails : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWeWayBillCONSIGNORDetails (202))

        CONTACT_PERSON = 618,
        MAILING_NAME = 619,
        SON_OF = 620,
        DAUTHTER_OF = 621,
        ADDRESS = 622,
        FLAT_NUMBER = 623,
        FLOOR_NUMBER = 624,
        BUILDING_NAME = 625,
        NAME_OF_PREMISES_BUILDING = 625, //(Alias of: BUILDING_NAME)
        BUILDING_NUMBER = 626,
        ROAD = 627,
        STREET = 628,
        STREET_NAME = 628, //(Alias of: STREET)
        LANE = 629,
        AREA = 630,
        LOCATION = 631,
        DISTRICT = 632,
        TALUK = 633,
        CITY = 634,
        TOWN = 635,
        VILLAGE = 636,
        STATE = 637,
        COUNTRY = 638,
        COUNTRY_CODE = 639,
        COUNTRY_SUBDIVISION = 640,
        PO_BOX_NUMBER = 641,
        PIN_CODE = 642,
        POST_CODE = 643,
        STD_CODE = 644,
        PHONE_NO = 645,
        TELEPHONE_NO = 645, //(Alias of: PHONE_NO)
        MOBILE_NO = 646,
        FAX_NO = 647,
        EMAIL = 648,
        CC_EMAIL = 649,
        WEBSITE = 650,
        PLUS_CODE_ADDRESS = 651,
        NAME = 677,
        GSTIN = 728,
        UIN = 728, //(Alias of: GSTIN)
        LEGAL_NAME = 1082, //(Alias of: TRADING_NAME)
        TRADE_NAME = 1082, //(Alias of: LEGAL_NAME)
    };

    enum class eTWeWayBillTransporterDetails : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWeWayBillTransporterDetails (203))

        MODE_OF_TRANSPORTATION = 1355,
        TYPE_OF_VEHCILE = 1356,
        DISTANCE_OF_TRANSPORTATION = 1357,
        TRANSPORTER_ID = 1358,
        TRANSPORTER_NAME = 1359,
        TRANSPORTER_DOC_NUMBER = 1360,
        TRANSPORTER_DOC_DATE = 1361,
        VEHICLE_NUMBER = 1362,
        UQC = 1363,
        TOTAL_QTY = 1364,
    };

    enum class eTWeWayBillProductDetails : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWeWayBillProductDetails (204))

        IGST_RATE = 667,
        CGST_RATE = 668,
        SGST_RATE = 669,
        CESS_RATE = 670,
        NAME_OF_THE_PRODUCT = 1365,
        DESCRIPTION_OF_THE_PRODUCT = 1366,
        HSN_CODE_OF_THE_PRODUCT = 1367,
        QUANTITY_OF_PRODUCT_IN_NUMBERS = 1368,
        UNIT_OF_THE_PRODUCT = 1369,
        TAXABLE_AMOUNT = 1370,
        CESS_NON_ADVOLERUM = 1371,
    };

    enum class eTWeWayBillDocumentTotalDetails : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWeWayBillDocumentTotalDetails (205))

        TOTAL_INVOICE_VALUE = 1177,
        OTHER_VALUE = 1372,
        TOTAL_VALUE = 1373,
        CGST_AMOUNT = 1374,
        SGST_AMOUNT = 1375,
        IGST_AMOUNT = 1376,
        CESS_AMOUNT = 1377,
        CESS_NON_ADVOL_AMOUNT = 1378,
    };

    enum class eTWVoucherPartyDocumentDetails : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWVoucherPartyDocumentDetails (206))

        CHALLANS_NUMBER = 1379,
        DESPATCHED_THROUGH = 1380,
        DESTINATION = 1381,
        CARRIER_NAME = 1382,
        BILL_OF_LADING_NUMBER = 1383,
        LR_RR_NUMBER = 1384,
        BILL_OF_LADING_DATE = 1385,
        LR_RR_DATE = 1386,
        AGENT_NAME = 1387,
    };

    enum class eTWVoucherProcessInstruction : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWVoucherProcessInstruction (207))

        DURATION_OF_PROCESS = 1388,
        NATURE_OF_PROCESSING = 1389,
    };

    enum class eTWVoucherAttendance : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWVoucherAttendance (208))

        VALUE = 17,
        EMPLOYEE_NUMBER = 1004,
        EMPLOYEE_NAME = 1390,
        ATTENDANCE_TYPE = 1391,
        PRODUCTION_TYPE = 1392,
        UNIT = 1393,
    };

    enum class eTWVoucherReferenceDetails : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWVoucherReferenceDetails (209))

        REFERENCE_NUMBER = 1394,
        REFERENCE_DATE = 1395,
    };

    enum class eTWVoucherTransporterDetails : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWVoucherTransporterDetails (210))

        DATE = 785,
        DOCUMENT_NUMBER = 1161,
        DOCUMENT_DATE = 1162,
        TRANSPORTER_ID = 1358,
        TRANSPORTER_NAME = 1359,
        VEHICLE_NUMBER = 1362,
        TRANSPORT_MODE = 1396,
        VEHICLE_NAME = 1397,
        VEHICLE_TYPE = 1398,
        LADING_NUMBER = 1399,
        RR_NUMBER = 1400,
        AIRWAY_NUMBER = 1401,
        DISTANCE = 1402,
        PLACE_OF_CHANGE = 1403,
        REASON_FOR_CHANGE = 1404,
        STATE_OF_CHANGE = 1405,
        REMARKS = 1406,
    };

    enum class eTWDespatchDetails : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWDespatchDetails (211))

    };

    enum class eTWVoucherBillToDetails : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWVoucherBillToDetails (212))

        FLOOR_NUMBER = 624,
        BUILDING_NAME = 625,
        BUILDING_NUMBER = 626,
        LOCATION = 631,
        DISTRICT = 632,
        STATE = 637,
        NAME = 677,
        GSTIN = 728,
        PINCODE = 1169,
        CONSIGNEE = 1407,
    };

    enum class eTWVoucherShipToDetails : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWVoucherShipToDetails (213))

        ADDRESS = 622,
        FLOOR_NUMBER = 624,
        BUILDING_NAME = 625,
        BUILDING_NUMBER = 626,
        LOCATION = 631,
        DISTRICT = 632,
        STATE = 637,
        NAME = 677,
        GSTIN = 728,
        LEGAL_NAME = 1082, //(Alias of: TRADING_NAME)
        TRADE_NAME = 1082, //(Alias of: LEGAL_NAME)
        PINCODE = 1169,
        ADDRESS_TYPE = 1408,
        PLACE = 1409,
    };

    enum class eTWVoucherBillFromDetails : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWVoucherBillFromDetails (214))

        MODE = 308,
        LOCATION = 631,
        STATE = 637,
        NAME = 677,
        GSTIN = 728,
        UIN = 728, //(Alias of: GSTIN)
        TRANSPORTER = 732,
        PINCODE = 1169,
        VEHICLE_NUMBER = 1362,
        LADING_NUMBER = 1399,
        RR_NUMBER = 1400,
        AIRWAY_NUMBER = 1401,
        CONSIGNOR = 1410,
        DOC_NUMBER = 1411,
    };

    enum class eTWVoucherDispatchFromDetails : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWVoucherDispatchFromDetails (215))

        ADDRESS = 622,
        STATE = 637,
        PINCODE = 1169,
        ADDRESS_TYPE = 1408,
        PLACE = 1409,
    };

    enum class eTWVoucherReceiptDetails : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWVoucherReceiptDetails (216))

        DESTINATION = 1381,
        CARRIER_NAME = 1382,
        LR_RR_NUMBER = 1384,
        BILL_OF_LADING_DATE = 1385,
        LR_RR_DATE = 1386,
        TRACKING_NO = 1412,
        DESPATCH_DOC_NUMBER = 1413,
        DISPATCH_THROUGH = 1414,
        CARRIER_AGENT = 1415,
        BILL_OF_LADING = 1416,
        MOTOR_VEHICLE_NUMBER = 1417,
    };

    enum class eTWVoucherExciseDetails : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWVoucherExciseDetails (217))

        INSPECTION_DOCUMENT_NUMBER = 1418,
        INSPECTION_DOCUMENT_DATE = 1419,
        TAX_UNIT = 1420,
        RULE_11_SERIAL_NO = 1421,
        SL_NUMBER_IN_PLA = 1422,
        SL_NUMBER_IN_RG_23 = 1423,
        DATE_AND_TIME_OF_INVOICE = 1424,
        DATE_AND_TIME_OF_REMOVAL = 1425,
        NATURAL_OF_REMOVAL = 1426,
        CERTIFICATE_TYPE = 1427,
    };

    enum class eTWVoucherInventoryDetails : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWVoucherInventoryDetails (218))

        AMOUNT = 23,
        QUANTITY = 26,
        LOCATION = 631,
        HSN_CODE = 652,
        IGST_RATE = 667,
        CGST_RATE = 668,
        SGST_RATE = 669,
        STATE_CESS_RATE = 671,
        NAME = 677,
        RATE = 711,
        DESCRIPTION = 712,
        BARCODE = 799,
        USER_DESCRIPTION = 805,
        ITEM_DESCRIPTION = 712, //(Alias of: DESCRIPTION)
        MFG_DATE = 816,
        EXPIRY_DATE = 817,
        ACTUAL_QUANTITY = 818,
        BILLED_QUANTITY = 819,
        DISCOUNT = 820,
        MRP = 824,
        EFFECTIVE_DATE = 828,
        COUNTRY_OF_ORIGIN = 886,
        GODOWN_NAME = 1107,
        DESTINATION_GODOWN_NAME = 1109,
        ORDER_NUMBER = 1113,
        UNIT_CODE = 1178,
        UNIT_PRICE = 1179,
        SELLING_PRICE = 1180,
        CESS_ADVOL_RATE = 1181,
        CESS_NON_ADVOL_RATE = 1182,
        TOTAL_PRICE = 1183,
        CGST_AMOUNT = 1374,
        SGST_AMOUNT = 1375,
        IGST_AMOUNT = 1376,
        CESS_NON_ADVOL_AMOUNT = 1378,
        SEQUENCE_NUMBER = 1428,
        MARGINAL = 1429,
        BATCH = 1430,
        PRODUCT_SERIAL_NUMBER = 1431,
        LOT_NO = 1432,
        FREE_QUANTITY = 1433,
        DISCOUNT_PERCENTAGE = 1434,
        DISCOUNT_AMOUNT = 1435,
        ADDITIONAL_AMOUNT = 1436,
        SUPPLIER_INVOICE_NUMBER = 1437,
        SUPPLIER_INVOICE_DATE = 1438,
        GST_RATE = 1439,
        CESS_ADVOL_AMOUNT = 1440,
        STATE_CESS_AMOUNT = 1441,
        STATE_CESS_NON_ADVOL_RATE = 1442,
        STATE_CESS_NON_ADVOL_AMOUNT = 1443,
    };

    enum class eTWVoucherVATDetails : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWVoucherVATDetails (219))

        DOCUMENT_TYPE = 1160,
        TRANSPORTER_NAME = 1359,
        VEHICLE_NUMBER = 1362,
        CARRIER_NAME = 1382,
        BILL_OF_LADING_NUMBER = 1383,
        LR_RR_NUMBER = 1384,
        BILL_OF_LADING_DATE = 1385,
        LR_RR_DATE = 1386,
        AGENT_NAME = 1387,
        E_SUGAM_DETAILS = 1444,
        INVOICE_NO = 1445,
        INVOICE_DATE = 1446,
        E_SUGAM_NUMBER = 1447,
        INVOICE_DELIVERY_DATE = 1448,
        FROM_PLACE = 1449,
        TO_PLACE = 1450,
        CATEGORY_OF_TRANSACTION = 1451,
        DESPATCH_THROUGH = 1452,
        QUANTITY_WITH_UNITS = 1453,
        TAX_CLASSIFICATION = 1454,
    };

    enum class eTWVoucherGSTDetails : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWVoucherGSTDetails (220))

        TAX_CLASSIFICATION = 1454,
        REASON_FOR_ISSUING_NOTE = 1455,
        BUYER_DEBIT_NOTE_NO = 1456,
        BUYER_DEBIT_NOTE_DATE = 1457,
    };

    enum class eTWVoucherBillWiseDetails : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWVoucherBillWiseDetails (221))

        AMOUNT = 23,
        NAME = 677,
        LEDGER_NAME = 1458,
        ACCOUNT = 1458, //(Alias of: LEDGER_NAME)
        TYPE_OF_REFERENCE = 1459,
        DUE_DATE = 1460,
        CREDIT_DAYS = 1461,
    };

    enum class eTWVoucherEInvoiceDetails : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWVoucherEInvoiceDetails (222))

        ACK_NUMBER = 1462,
        ACK_DATE = 1463,
        IRN = 1464,
        SIQNED_QR_CODE = 1465,
    };

    enum class eTWVoucherItemAllocationsDetails : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWVoucherItemAllocationsDetails (223))

        AMOUNT = 23,
        QUANTITY = 26,
        RATE = 711,
        FOR_STOCK_ITEM = 1466,
        FOR_ORDER_NUMBER = 1467,
        TRACK_COMPONENTS = 1468,
        STOCK_ITEM = 1469,
        PER = 1470,
        DUE_ON = 1471,
    };

    enum class eTWSellerDetails : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWSellerDetails (224))

        FLOOR_NUMBER = 624,
        BUILDING_NAME = 625,
        BUILDING_NUMBER = 626,
        LOCATION = 631,
        DISTRICT = 632,
        STATE = 637,
        LEGAL_NAME = 1082, //(Alias of: TRADING_NAME)
        SELLER_GSTIN = 1168,
        TRADE_NAME = 1082, //(Alias of: LEGAL_NAME)
        PINCODE = 1169,
    };

    enum class eTWBuyerDetails : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWBuyerDetails (225))

        CONTACT_PERSON = 618,
        MAILING_NAME = 619,
        SON_OF = 620,
        DAUTHTER_OF = 621,
        ADDRESS = 622,
        FLAT_NUMBER = 623,
        FLOOR_NUMBER = 624,
        BUILDING_NAME = 625,
        NAME_OF_PREMISES_BUILDING = 625, //(Alias of: BUILDING_NAME)
        BUILDING_NUMBER = 626,
        ROAD = 627,
        STREET = 628,
        STREET_NAME = 628, //(Alias of: STREET)
        LANE = 629,
        AREA = 630,
        LOCATION = 631,
        DISTRICT = 632,
        TALUK = 633,
        CITY = 634,
        TOWN = 635,
        VILLAGE = 636,
        STATE = 637,
        COUNTRY = 638,
        COUNTRY_CODE = 639,
        COUNTRY_SUBDIVISION = 640,
        PO_BOX_NUMBER = 641,
        PIN_CODE = 642,
        POST_CODE = 643,
        STD_CODE = 644,
        PHONE_NO = 645,
        TELEPHONE_NO = 645, //(Alias of: PHONE_NO)
        MOBILE_NO = 646,
        FAX_NO = 647,
        EMAIL = 648,
        CC_EMAIL = 649,
        WEBSITE = 650,
        PLUS_CODE_ADDRESS = 651,
        LEGAL_NAME = 1082, //(Alias of: TRADING_NAME)
        TRADE_NAME = 1082, //(Alias of: LEGAL_NAME)
        BUYER_GSTIN = 1170,
        GST_REGISTRATION_TYPE = 1353,
        PLACE_OF_SUPPLY = 1354,
        BUYER_UIN = 1472,
    };

    enum class eTWInvoiceValues : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWInvoiceValues (226))

        ASSESSABLE_VALUE = 1171,
        IGST_VALUE = 1172,
        CGST_VALUE = 1173,
        SGST_VALUE = 1174,
        CESS_NON_ADVOL = 1175,
        CESS_VALUE = 1176,
        TOTAL_INVOICE_VALUE = 1177,
    };

    enum class eTWPaymentDetails : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWPaymentDetails (227))

        PAYMENT_DUE_DATE = 1060,
        ACCOUNT_DETAILS = 1184,
        BALANCE_AMOUNT = 1185,
    };

    enum class eTWDenomination : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWDenomination (228))

        AMOUNT = 23,
        DENOMINATIONS_FOR = 1473,
        DENOMINATION = 1474,
        TOTAL_AMOUNT = 1475,
        DIFFERECE = 1476,
    };

    enum class eTWPOSDetails : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWPOSDetails (229))

        POS_CARD_NUMBER = 1477,
        POS_CASH_RECEIVED = 1478,
        POS_CARD_LEDGER = 1479,
        POS_CASH_LEDGER = 1480,
        POS_GIFT_LEDGER = 1481,
        POS_CHEQUE_LEDGER = 1482,
        POS_CHECK_LEDGER = 1482, //(Alias of: POS_CHEQUE_LEDGER)
        POS_CHEQUE_NUMBER = 1483,
        POS_CHECK_NUMBER = 1483, //(Alias of: POS_CHEQUE_NUMBER)
        POS_CHEQUE_BANK_NAME = 1484,
        POS_CHECK_BANK_NAME = 1484, //(Alias of: POS_CHEQUE_BANK_NAME)
    };

    enum class eTWLedgerEntry : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWLedgerEntry (230))

        AMOUNT = 23,
        LEDGER_NAME = 1458,
    };

    enum class eTWLedgerVATInfo : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWLedgerVATInfo (231))

        ASSESSABLE_VALUE = 1171,
        TAX_CLASSIFICATION_NAME = 1485,
        RATE_OF_CESS_ON_VAT = 1486,
        RATE_OF_ADDL_VAT = 1487,
        VAT_TAX_RATE = 1488,
        VAT_CALCULATION_TYPE = 1489,
        ITEM_QTY = 1490,
        COMMODITY_NAME = 1491,
        WORKS_CONTRACT_COST_OF_LAND = 1492,
        WORKS_CONTRACT_TYPE = 1493,
        WORKS_CONTRACT_DED_LABOUR_CHARGES = 1494,
        WORKS_CONTRACT_DESCRIPTION = 1495,
        WORKS_CONTRACT_OTHER_DEDUCTION_AMT = 1496,
        WORKS_CONTRACT_VALUE_OF_TAX_FREE_GOODS = 1497,
        WORKS_CONTRACT_OTHER_CHARGES = 1498,
        WORKS_CONTRACT_SUB_CONTRACTOR_AMOUNT = 1499,
        COMMODITY_CODE = 1500,
        SCHEDULE = 1501,
        SCHEDULE_SERIAL_NUMBER = 1502,
        IS_ZR_BASIC_SERVICE = 1503,
    };

    enum class eTWLedgerGSTInfo : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWLedgerGSTInfo (232))

        ASSESSABLE_VALUE = 1171,
        GST_TAX_RATE = 1504,
        IGST_LIABILITY = 1505,
        CGST_LIABILITY = 1506,
        SGST_LIABILITY = 1507,
        CESS_LIABILITY = 1508,
        OVERRRIDDEN_CLASSIFICATION = 1509,
        OVERRRIDDEN_NATURE = 1510,
        OVERRRIDDEN_ASSESSABLE_VALUE = 1511,
        ASSBL_VALUE = 1512,
        RATE_DETAILS = 1513,
        OVERRRIDDEN_INELIGIBLE_ITC = 1514,
        OVERRRIDDEN_IS_REV_CHARGE_APPL = 1515,
        OVERRRIDDEN_TAXABILITY = 1516,
        HSN_SAC_CODE = 1517,
        GST_DUTY_HEAD = 1518,
    };

    enum class eTWBillAllocations : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWBillAllocations (233))

        AMOUNT = 23,
        NAME = 677,
        BILL_CREDIT_PERIOD = 1519,
        INTEREST_COLLECTION = 1520,
    };

    enum class eTWCostCentreAllocations : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWCostCentreAllocations (234))

        AMOUNT = 23,
        NAME = 677,
        ACTUAL_QTY = 1521,
        BILLED_QTY = 1522,
    };

    enum class eTWCostCategoryAllocations : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWCostCategoryAllocations (235))

        CATEGORY_NAME = 1523,
    };

    enum class eTWVoucherValueDetails : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWVoucherValueDetails (236))

        DISCOUNT = 820,
        TOTAL_ASSESSABLE_VALUE_OF_ALL_ITEMS = 1524,
        CGST_VALUE_OF_ALL_ITEMS = 1525,
        SGST_VALUE_OF_ALL_ITEMS = 1526,
        IGST_VALUE_OF_ALL_ITEMS = 1527,
        CESS_VALUE_OF_ALL_ITEMS = 1528,
        STATE_CESS_VALUE_OF_ALL_ITEMS = 1529,
        OTHER_CHARGES = 1530,
        ROUNDOFF_AMOUNT = 1531,
        FINAL_VOUCHER_VALUE = 1532,
        VOUCHER_VALUE_IN_FOREIGN_CURRENCY = 1533,
    };

    enum class eTWCompanyInformation : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWCompanyInformation (237))

        MAILING_NAME = 619,
        COMPANY_NAME = 1534,
        FINANCIAL_YEAR_BEGINNING_FROM = 1535,
        BOOKS_BEGINNING_FROM = 1536,
        BASE_CURRENCY = 1537,
    };

    enum class eTWCompanyAddress : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWCompanyAddress (238))

        CONTACT_PERSON = 618,
        MAILING_NAME = 619,
        SON_OF = 620,
        DAUTHTER_OF = 621,
        ADDRESS = 622,
        FLAT_NUMBER = 623,
        FLOOR_NUMBER = 624,
        BUILDING_NAME = 625,
        NAME_OF_PREMISES_BUILDING = 625, //(Alias of: BUILDING_NAME)
        BUILDING_NUMBER = 626,
        ROAD = 627,
        STREET = 628,
        STREET_NAME = 628, //(Alias of: STREET)
        LANE = 629,
        AREA = 630,
        LOCATION = 631,
        DISTRICT = 632,
        TALUK = 633,
        CITY = 634,
        TOWN = 635,
        VILLAGE = 636,
        STATE = 637,
        COUNTRY = 638,
        COUNTRY_CODE = 639,
        COUNTRY_SUBDIVISION = 640,
        PO_BOX_NUMBER = 641,
        PIN_CODE = 642,
        POST_CODE = 643,
        STD_CODE = 644,
        PHONE_NO = 645,
        TELEPHONE_NO = 645, //(Alias of: PHONE_NO)
        MOBILE_NO = 646,
        FAX_NO = 647,
        EMAIL = 648,
        CC_EMAIL = 649,
        WEBSITE = 650,
        PLUS_CODE_ADDRESS = 651,
    };

    enum class eTWCompanyStatutoryInformation : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWCompanyStatutoryInformation (239))

    };

    enum class eTWCompanyGSTDetails : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWCompanyGSTDetails (240))

        STATE = 637,
        REGISTRATION_TYPE = 726,
        ASSESSEE_OF_OTHER_TERRITORY = 727,
        GSTIN = 728,
        GST_APPLICABLE_FROM = 1043,
        REGULAR = 1538,
        COMPOSITE = 1539,
        PERIODICITY = 1540,
        TAX_RATE_FOR_TAXABLE_TURNOVER = 1541,
        BASIS_FOR_TAX_CALCULATION = 1542,
        INTEGRATED_TAX_RATE = 1543,
        CESS = 1544,
        TAXABILITY = 1545,
        LUT_BOND_NUMBER = 1546,
        LUT_BOND_APPLICABLE_FROM = 1547,
        LUT_BOND_APPLICABLE_TO = 1548,
    };

    enum class eTWCompanyEwaybill : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWCompanyEwaybill (241))

        PIN_CODE = 642,
        THRESHOLD_LIMIT = 698,
        APPLICABILITY = 1549,
        AAPLICABLE_FROM = 1550,
        INCLUDE_INVOICE_VALUE = 1551,
        INCLUDE_TAXABLE_AND_EXEMPT_GOODS_VALUE = 1552,
        INCLUDE_GOODS_VALUE = 1553,
        APPLICABLE_FOR_INTRASTATE = 1554,
    };

    enum class eTWCompanyEinvoice : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWCompanyEinvoice (242))

        APPLICABLE_FROM = 660,
        BILL_FROM_PLACE = 1555,
        DEFAULT_PERIOD_FOR_THE_EINVOICE_REPORT = 1556,
    };

    enum class eTWSingaporeGSTDetails : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWSingaporeGSTDetails (243))

        GST_REGISTRATION_NUMBER = 1557,
        COMPANY_REGISTRATION_NUMBER = 1558,
    };

    enum class eTWCompanyExciseDetails : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWCompanyExciseDetails (244))

        NAME = 677,
        ECC_NUMBER = 719,
        IEC_NUMBER = 721,
        REGISTRATION_TYPE = 726,
        IS_COMPANY_LTU = 1559,
        DEACTIVATE_FROM = 1560,
    };

    enum class eTWExciseConctDetails : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWExciseConctDetails (245))

        CONTACT_PERSON = 618,
        MAILING_NAME = 619,
        SON_OF = 620,
        DAUTHTER_OF = 621,
        ADDRESS = 622,
        FLAT_NUMBER = 623,
        FLOOR_NUMBER = 624,
        BUILDING_NAME = 625,
        NAME_OF_PREMISES_BUILDING = 625, //(Alias of: BUILDING_NAME)
        BUILDING_NUMBER = 626,
        ROAD = 627,
        STREET = 628,
        STREET_NAME = 628, //(Alias of: STREET)
        LANE = 629,
        AREA = 630,
        LOCATION = 631,
        DISTRICT = 632,
        TALUK = 633,
        CITY = 634,
        TOWN = 635,
        VILLAGE = 636,
        STATE = 637,
        COUNTRY = 638,
        COUNTRY_CODE = 639,
        COUNTRY_SUBDIVISION = 640,
        PO_BOX_NUMBER = 641,
        PIN_CODE = 642,
        POST_CODE = 643,
        STD_CODE = 644,
        PHONE_NO = 645,
        TELEPHONE_NO = 645, //(Alias of: PHONE_NO)
        MOBILE_NO = 646,
        FAX_NO = 647,
        EMAIL = 648,
        CC_EMAIL = 649,
        WEBSITE = 650,
        PLUS_CODE_ADDRESS = 651,
    };

    enum class eTWRG23DDetails : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWRG23DDetails (246))

        PREFIX = 1561,
        SUFFIX = 1562,
    };

    enum class eTWTariffDetails : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWTariffDetails (247))

        HSN_CODE = 652,
        VALUATION_TYPE = 672,
        REPORTING_UNIT_OF_MEASURE = 676,
        TARIFF_NAME = 710,
        EXCISE_RATE = 1563,
    };

    enum class eTWJurisdictionDetails : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWJurisdictionDetails (248))

        ADDRESS = 622,
        APPLICABLE_FROM = 660,
        NAME = 677,
        RANGE = 722,
        DIVISION = 723,
        COMMISSIONERATE = 1564,
        CODE = 1565,
    };

    enum class eTWCompanyVATDetails : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWCompanyVATDetails (249))

        STATE = 637,
        TAX_TYPE = 664,
        TIN = 717,
        DEACTIVATE_FROM = 1560,
        INTERSTATE_SALES_TAX_NUMBER = 1566,
        TAX_RATE = 1567,
    };

    enum class eTWAdditionalVATDetails : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWAdditionalVATDetails (250))

        DESIGNATION = 1005,
        PLACE = 1409,
        PERIODICITY = 1540,
        LVO_VSO_CODE = 1568,
        AUTHORISED_PERSON = 1569,
        AUTHORIZED_PERSON = 1569, //(Alias of: AUTHORISED_PERSON)
    };

    enum class eTWBahrainVATDetails : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWBahrainVATDetails (251))

        PERIODICITY = 1540,
        TAX_RATE = 1567,
        TRN = 1570,
        REGISTRATION_DATE = 1571,
        IGNORE_MISMATCH_UPTO = 1572,
        PRIMARY_MAILING_DETAILS = 1573,
    };

    enum class eTWSaudiVATDetails : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWSaudiVATDetails (252))

        PERIODICITY = 1540,
        TAX_RATE = 1567,
        REGISTRATION_DATE = 1571,
        IGNORE_MISMATCH_UPTO = 1572,
        PRIMARY_MAILING_DETAILS = 1573,
        VAT_NUMBER = 1574,
    };

    enum class eTWUKVATDetails : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWUKVATDetails (253))

        VAT_REGISTRATION_NUMBER = 1575,
    };

    enum class eTWPhilippinesVATDetails : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWPhilippinesVATDetails (254))

        VAT_REGISTRATION_NUMBER = 1575,
        VAT_APPLICABLE_FROM = 1576,
        RDO_CODE = 1577,
        LINE_OF_BUSINESS = 1578,
    };

    enum class eTWNepalVATDetails : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWNepalVATDetails (255))

        INCOME_TAX_NUMBER = 715, //(Alias of: PAN)
        LOCAL_SALES_TAX_NUMBER = 1579,
        PAN_NUMBER = 1580,
    };

    enum class eTWKenyaVATDetails : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWKenyaVATDetails (256))

        VAT_NUMBER = 1574,
        VAT_APPLICABLE_FROM = 1576,
        PIN = 1581,
        TYPES_OF_DEVICE = 1582,
        DEVICE_NUMBER = 1583,
    };

    enum class eTWAdditionalKenyaVATDetails : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWAdditionalKenyaVATDetails (257))

        STREET = 628,
        TOWN = 635,
        PO_BOX_NUMBER = 641,
        CODE = 1565,
        AUTHORISED_SIGNATORY = 1584,
        AUTHORIZED_SIGNATORY = 1584, //(Alias of: AUTHORISED_SIGNATORY)
        BUILDING = 1585,
    };

    enum class eTWInodonesiaVATDetails : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWInodonesiaVATDetails (258))

        VAT_REGISTRATION_NUMBER = 1575,
        VAT_REGISTRATION_DATE = 1586,
        TAX_INVOICE_CODE = 1587,
    };

    enum class eTWGhanaVATDetails : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWGhanaVATDetails (259))

        DESIGNATION = 1005,
        VAT_APPLICABLE_FROM = 1576,
        AUTHORISED_SIGNATORY = 1584,
        AUTHORIZED_SIGNATORY = 1584, //(Alias of: AUTHORISED_SIGNATORY)
        VAT_TIN_REGULAR = 1588,
        VAT_TIN_REGULAR_OLD = 1589,
        CURRENT_TAX_OFFICE = 1590,
        NAME_OF_GRA_OFFICE = 1591,
    };

    enum class eTWBotswanaVATDetails : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWBotswanaVATDetails (260))

        CAPACITY = 921,
        AUTHORISED_PERSON = 1569,
        AUTHORIZED_PERSON = 1569, //(Alias of: AUTHORISED_PERSON)
        VAT_APPLICABLE_FROM = 1576,
        VAT_TIN_REGULAR = 1588,
    };

    enum class eTWBangladeshVATDetails : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWBangladeshVATDetails (261))

        TIN = 717,
        VAT_APPLICABLE_FROM = 1576,
        ACTIVITY_CODE = 1592,
        AREA_CODE = 1593,
    };

    enum class eTWUAEVATDetails : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWUAEVATDetails (262))

        PERIODICITY = 1540,
        TRN = 1570,
        REGISTRATION_DATE = 1571,
        IGNORE_MISMATCH_UPTO = 1572,
        EMIRATE = 1594,
        MAILING_ADDRESS = 1595,
    };

    enum class eTWOmanVATDetails : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWOmanVATDetails (263))

        TAX_RATE = 1567,
        REGISTRATION_DATE = 1571,
        IGNORE_MISMATCH_UPTO = 1572,
        MAILING_ADDRESS = 1595,
        VATIN = 1596,
    };

    enum class eTWPayrollStatutoryDetails : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWPayrollStatutoryDetails (264))

    };

    enum class eTWProvidentFund : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWProvidentFund (265))

        COMPANY_CODE = 1597,
        COMPANY_ACCOUNT_GROUP_CODE = 1598,
        COMPANY_SECURITY_CODE = 1599,
    };

    enum class eTWEmployeeStateInsurance : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWEmployeeStateInsurance (266))

        COMPANY_CODE = 1597,
        ESI_BRANCH_OFFICE = 1600,
        STANDARD_WORKING_DAYS_PER_MONTH = 1601,
    };

    enum class eTWNationalPensionScheme : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWNationalPensionScheme (267))

        CORPORATE_REGISTRATION_NUMBER = 1602,
        CORPORATE_BRANCH_OFFICE_NUMBER = 1603,
    };

    enum class eTWIncomeTax : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWIncomeTax (268))

        SON_OF = 620,
        PAN = 715,
        DESIGNATION = 1005,
        TAX_DEDUCTED_AND_COLLECTION_ACCOUNT_NUMBER = 1046,
        TAN = 1046, //(Alias of: TAX_DEDUCTED_AND_COLLECTION_ACCOUNT_NUMBER)
        TAN_REGISTRATION_NUMBER = 1047,
        DEDUCTOR_TYPE = 1050,
        DEDUCTOR_BRANCH = 1051,
        DEDUCTOR_DIVISION = 1052,
        NAME_OF_PERSON_RESPONSIBLE = 1053,
        DAUGHTER_OF = 1054,
        INCOME_TAX_CIRCLE_OR_WARD = 1604,
    };

    enum class eTWTCSDetails : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWTCSDetails (269))

        IGNORE_IT_EXEMPTION_LIMIT_FOR_TDS_DEDUCTION = 1605,
        ACTIVATE_TDS_FOR_STOCK_ITEMS = 1606,
    };

    enum class eTWCompanyTCSCollectorDetails : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWCompanyTCSCollectorDetails (270))

        STD_CODE = 644,
        PHONE_NO = 645,
        TAN = 1046, //(Alias of: TAX_DEDUCTED_AND_COLLECTION_ACCOUNT_NUMBER)
        TAN_REGISTRATION_NUMBER = 1047,
        TAX_DEDUCTION_AND_COLLECTION_ACCOUNT_NUMBER = 1046, //(Alias of: TAN)
        COLLECTOR_TYPE = 1607,
        COLLECTOR_BRANCH = 1608,
        COLLECTOR_DIVISION = 1609,
        E_MAIL = 1610,
    };

    enum class eTWPersonResponsibleForTCS : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWPersonResponsibleForTCS (271))

        CONTACT_PERSON = 618,
        MAILING_NAME = 619,
        SON_OF = 620,
        DAUTHTER_OF = 621,
        ADDRESS = 622,
        FLAT_NUMBER = 623,
        FLOOR_NUMBER = 624,
        BUILDING_NAME = 625,
        NAME_OF_PREMISES_BUILDING = 625, //(Alias of: BUILDING_NAME)
        BUILDING_NUMBER = 626,
        ROAD = 627,
        STREET = 628,
        STREET_NAME = 628, //(Alias of: STREET)
        LANE = 629,
        AREA = 630,
        LOCATION = 631,
        DISTRICT = 632,
        TALUK = 633,
        CITY = 634,
        TOWN = 635,
        VILLAGE = 636,
        STATE = 637,
        COUNTRY = 638,
        COUNTRY_CODE = 639,
        COUNTRY_SUBDIVISION = 640,
        PO_BOX_NUMBER = 641,
        PIN_CODE = 642,
        POST_CODE = 643,
        STD_CODE = 644,
        PHONE_NO = 645,
        TELEPHONE_NO = 645, //(Alias of: PHONE_NO)
        MOBILE_NO = 646,
        FAX_NO = 647,
        EMAIL = 648,
        CC_EMAIL = 649,
        WEBSITE = 650,
        PLUS_CODE_ADDRESS = 651,
        NAME = 677,
        PAN = 715,
        DESIGNATION = 1005,
    };

    enum class eTWSurchargeAndCessDetailsForTCS : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWSurchargeAndCessDetailsForTCS (272))

        CESS_RATE = 670,
        EXEMPTION_LIMIT = 698, //(Alias of: THRESHOLD_LIMIT)
        SECONDARY_EDUCATION_CESS_RATE = 707,
        RESIDENTIAL_STATUS = 1611,
        COLLECTEE_STATUS = 1612,
        APPLICABLE_DATE = 1613,
        SURCHARGE_RATE = 1614,
    };

    enum class eTWTDSDetails : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWTDSDetails (273))

        IGNORE_IT_EXEMPTION_LIMIT_FOR_TDS_DEDUCTION = 1605,
        ACTIVATE_TDS_FOR_STOCK_ITEMS = 1606,
    };

    enum class eTWCompanyTDSDeductorDetails : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWCompanyTDSDeductorDetails (274))

        STD_CODE = 644,
        PHONE_NO = 645,
        TAN_REGISTRATION_NUMBER = 1047,
        DEDUCTOR_TYPE = 1050,
        DEDUCTOR_BRANCH = 1051,
        DEDUCTOR_DIVISION = 1052,
        TAX_DEDUCTION_AND_COLLECTION_ACCOUNT_NUMBER = 1046, //(Alias of: TAN)
        E_MAIL = 1610,
    };

    enum class eTWPersonResponsibleForTDS : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWPersonResponsibleForTDS (275))

        SON_OF = 620,
        FLAT_NUMBER = 623,
        NAME_OF_PREMISES_BUILDING = 625, //(Alias of: BUILDING_NAME)
        ROAD = 627,
        STREET = 628,
        LANE = 629,
        AREA = 630,
        LOCATION = 631,
        DISTRICT = 632,
        CITY = 634,
        TOWN = 635,
        STATE = 637,
        PIN_CODE = 642,
        STD_CODE = 644,
        NAME = 677,
        PAN = 715,
        DESIGNATION = 1005,
        DAUGHTER_OF = 1054,
        TELEPHONE = 1303,
        MOBILE_NUMBER = 1615,
        EMAIL_ID = 1616,
    };

    enum class eTWSurchargeAndCessDetailsForTDS : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWSurchargeAndCessDetailsForTDS (276))

        CESS_RATE = 670,
        EXEMPTION_LIMIT = 698, //(Alias of: THRESHOLD_LIMIT)
        SECONDARY_EDUCATION_CESS_RATE = 707,
        RESIDENTIAL_STATUS = 1611,
        APPLICABLE_DATE = 1613,
        SURCHARGE_RATE = 1614,
        DEDUCTEE_STATUS = 1617,
    };

    enum class eTWForm24QeTDS : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWForm24QeTDS (277))

        PAN = 715,
        TAN = 1046, //(Alias of: TAX_DEDUCTED_AND_COLLECTION_ACCOUNT_NUMBER)
        PERMANENT_ACCOUNT_NUMBER = 1618,
        FINANCIAL_YEAR = 1619,
        QUARTER_ENDED = 1620,
        TOKEN_NUMBER = 1621,
        TYPE_OF_DEDUCTOR = 1622,
        NAME_OF_EMPLOYER = 1623,
        GOVERNMENT_NAME = 1624,
        AIN_CODE = 1625,
        GSTN = 1626,
        PAN_OF_PERSON_RESPONSIBLE = 1627,
    };

    enum class eTWForm24QDeductorDetails : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWForm24QDeductorDetails (278))

        CONTACT_PERSON = 618,
        MAILING_NAME = 619,
        SON_OF = 620,
        DAUTHTER_OF = 621,
        ADDRESS = 622,
        FLAT_NUMBER = 623,
        FLOOR_NUMBER = 624,
        BUILDING_NAME = 625,
        NAME_OF_PREMISES_BUILDING = 625, //(Alias of: BUILDING_NAME)
        BUILDING_NUMBER = 626,
        ROAD = 627,
        STREET = 628,
        STREET_NAME = 628, //(Alias of: STREET)
        LANE = 629,
        AREA = 630,
        LOCATION = 631,
        DISTRICT = 632,
        TALUK = 633,
        CITY = 634,
        TOWN = 635,
        VILLAGE = 636,
        STATE = 637,
        COUNTRY = 638,
        COUNTRY_CODE = 639,
        COUNTRY_SUBDIVISION = 640,
        PO_BOX_NUMBER = 641,
        PIN_CODE = 642,
        POST_CODE = 643,
        STD_CODE = 644,
        PHONE_NO = 645,
        TELEPHONE_NO = 645, //(Alias of: PHONE_NO)
        MOBILE_NO = 646,
        FAX_NO = 647,
        EMAIL = 648,
        CC_EMAIL = 649,
        WEBSITE = 650,
        PLUS_CODE_ADDRESS = 651,
    };

    enum class eTWForm24QPersonResponsible : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWForm24QPersonResponsible (279))

        CONTACT_PERSON = 618,
        MAILING_NAME = 619,
        SON_OF = 620,
        DAUTHTER_OF = 621,
        ADDRESS = 622,
        FLAT_NUMBER = 623,
        FLOOR_NUMBER = 624,
        BUILDING_NAME = 625,
        NAME_OF_PREMISES_BUILDING = 625, //(Alias of: BUILDING_NAME)
        BUILDING_NUMBER = 626,
        ROAD = 627,
        STREET = 628,
        STREET_NAME = 628, //(Alias of: STREET)
        LANE = 629,
        AREA = 630,
        LOCATION = 631,
        DISTRICT = 632,
        TALUK = 633,
        CITY = 634,
        TOWN = 635,
        VILLAGE = 636,
        STATE = 637,
        COUNTRY = 638,
        COUNTRY_CODE = 639,
        COUNTRY_SUBDIVISION = 640,
        PO_BOX_NUMBER = 641,
        PIN_CODE = 642,
        POST_CODE = 643,
        STD_CODE = 644,
        PHONE_NO = 645,
        TELEPHONE_NO = 645, //(Alias of: PHONE_NO)
        MOBILE_NO = 646,
        FAX_NO = 647,
        EMAIL = 648,
        CC_EMAIL = 649,
        WEBSITE = 650,
        PLUS_CODE_ADDRESS = 651,
    };

    enum class eTWFormTaxPaidtoCentralGov : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWFormTaxPaidtoCentralGov (280))

        BSR_CODE = 742,
        TAX = 1628,
        EDUCATION_CESS = 1629,
        FEE = 1630,
        PENALTY = 1631,
        TOTAL_AMOUNT_DEPOSITED = 1632,
        BSR_RECIEPT_NUMBER = 1633,
        CHALLAN_SERIAL_NUMBER = 1634,
        DATE_OF_CHALLAN_DEPOSITED = 1635,
        DATE_OF_TRANSFER_VOUCHER = 1636,
        MINOR_HEAD_OF_CHALLAN = 1637,
    };

    enum class eTWAnnexIDeducteeWiseBreakUp : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWAnnexIDeducteeWiseBreakUp (281))

        BSR_CODE = 742,
        TAN = 1046, //(Alias of: TAX_DEDUCTED_AND_COLLECTION_ACCOUNT_NUMBER)
        NAME_OF_EMPLOYER = 1623,
        TAX = 1628,
        EDUCATION_CESS = 1629,
        BSR_RECIEPT_NUMBER = 1633,
        CHALLAN_SERIAL_NUMBER = 1634,
        DATE_OF_CHALLAN_DEPOSITED = 1635,
        DATE_OF_TRANSFER_VOUCHER = 1636,
        AMOUNT_AS_PER_CHALLAN = 1638,
        TOTAL_TDS_ALLOCATED = 1639,
        TOTAL_INTEREST_ALLOCATED = 1640,
        EMPLOYEE_REFERENCE_NUMBER = 1641,
        PAN_OF_EMPLOYEE = 1642,
        NAME_OF_EMPLOYEE = 1643,
        SECTION_CODE = 1644,
        DATE_OF_PAYMENT = 1645,
        DATE_OF_DEDUCTION = 1646,
        AMOUNT_PAID = 1647,
        TOTAL_TDS = 1648,
        TOTAL_TDS_DEPOSITED = 1649,
        DATE_OF_DEPOSIT = 1650,
        REASON_FOR_DIFFERENCE_IN_DEPOSIT = 1651,
        NUMBER_OF_CERTIFICATE_ISSUED = 1652,
    };

    enum class eTWAnnexIIDeducteeWiseBreakUp : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWAnnexIIDeducteeWiseBreakUp (282))

        SERIAL_NUMBER = 829,
        EDUCATION_CESS = 1629,
        PAN_OF_EMPLOYEE = 1642,
        NAME_OF_EMPLOYEE = 1643,
        RESIDENT_INDIVIDUAL_AGE_60_TO_80 = 1653,
        RESIDENT_INDIVIDUAL_AGE_80_OR_MORE = 1654,
        WOMEN_AGE_LESS_THAN_60 = 1655,
        OTHER_INDIVIDUALS = 1656,
        EMPLOYEMENT_DATE = 1657,
        TAXABLE_AMOUNT_ON_WHICH_PREVIOUS_EMPLOYER_DEDUCTED_TAX = 1658,
        TAXABLE_AMOUNT_ON_WHICH_CURRENT_EMPLOYER_DEDUCTED_TAX = 1659,
        TOTAL_SALARY = 1660,
        TOTAL_DEDUCTION_UNDER_SEC_16_SUBSEC_II = 1661,
        TOTAL_DEDUCTION_UNDER_SEC_16_SUBSEC_III = 1662,
        INCOME_CHARGEABLE_UNDER_SALARIES = 1663,
        INCOME_UNDER_OTHER_THAN_SALARY_OFFERED_TDS = 1664,
        GROSS_TOTAL_INCOME = 1665,
        AGRR_DEDUCTION_UNDER_80C_80CCD_80CCD1 = 1666,
        AMOUNT_DEDUCTIBLE_CHAPTER_VI = 1667,
        TOTAL_TAXABLE_INCOME = 1668,
        INCOME_TAX_ON_TOTAL_INCOME = 1669,
        INCOME_TAX_RELIEF_UNDER_SEC_89 = 1670,
        NET_TAX_PAYABLE = 1671,
        TOTAL_TDS_BY_CURRENT_EMPLOYER_FOR_WHOLE_YEAR = 1672,
        TOTAL_TDS_BY_PREVIOUS_EMPLOYER_FOR_WHOLE_YEAR = 1673,
        SHORTFALL_OR_EXCESS_IN_TAX_DEDUCTION = 1674,
        TAX_DEUCTED_AT_HIGHER_RATE_NON_FURNISHING_PAN = 1675,
        HOUSE_RENT_ALLOWANCE = 1676,
        PAN_OF_LANLORD1 = 1677,
        NAME_OF_LANDLORD1 = 1678,
        PAN_OF_LANLORD2 = 1679,
        NAME_OF_LANDLORD2 = 1680,
        INTEREST_PAID_FROM_INCOME_FROM_HOUSE = 1681,
        PAN_OF_LENDER1 = 1682,
        NAME_OF_LENDER1 = 1683,
        PAN_OF_LENDER2 = 1684,
        NAME_OF_LENDER2 = 1685,
        CONTRIBUTIONS_PAID_BY_THE_TRUSTEES_OF_AN_APPROVED_SUPERANNUATION_FUND = 1686,
        NAME_OF_SUPERANNUATION_FUND = 1687,
        FROM_DATE_OF_CONTRIBUTION = 1688,
        TO_DATE_OF_CONTRIBUTION = 1689,
        AMOUNT_OF_CONTRIBUTION_REPAID_ON_ACCOUNT_OF_PRINCIPAL_AND_INTEREST = 1690,
        AVERAGE_RATE_OF_DEDUCTION_OF_TAX_DURING_THE_PRECEDING_THREE_YEARS = 1691,
        AMOUNT_OF_TAX_DEDUCTED_ON_REPAYMENT = 1692,
    };

    enum class eTWForm26QeTDS : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWForm26QeTDS (283))

        PAN = 715,
        TAN = 1046, //(Alias of: TAX_DEDUCTED_AND_COLLECTION_ACCOUNT_NUMBER)
        FINANCIAL_YEAR = 1619,
        QUARTER_ENDED = 1620,
        TOKEN_NUMBER = 1621,
        TYPE_OF_DEDUCTOR = 1622,
        GOVERNMENT_NAME = 1624,
        AIN_CODE = 1625,
        GSTN = 1626,
        PAN_OF_PERSON_RESPONSIBLE = 1627,
        NAME_OF_DEDUCTOR = 1693,
    };

    enum class eTWForm26QDeductorDetails : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWForm26QDeductorDetails (284))

        CONTACT_PERSON = 618,
        MAILING_NAME = 619,
        SON_OF = 620,
        DAUTHTER_OF = 621,
        ADDRESS = 622,
        FLAT_NUMBER = 623,
        FLOOR_NUMBER = 624,
        BUILDING_NAME = 625,
        NAME_OF_PREMISES_BUILDING = 625, //(Alias of: BUILDING_NAME)
        BUILDING_NUMBER = 626,
        ROAD = 627,
        STREET = 628,
        STREET_NAME = 628, //(Alias of: STREET)
        LANE = 629,
        AREA = 630,
        LOCATION = 631,
        DISTRICT = 632,
        TALUK = 633,
        CITY = 634,
        TOWN = 635,
        VILLAGE = 636,
        STATE = 637,
        COUNTRY = 638,
        COUNTRY_CODE = 639,
        COUNTRY_SUBDIVISION = 640,
        PO_BOX_NUMBER = 641,
        PIN_CODE = 642,
        POST_CODE = 643,
        STD_CODE = 644,
        PHONE_NO = 645,
        TELEPHONE_NO = 645, //(Alias of: PHONE_NO)
        MOBILE_NO = 646,
        FAX_NO = 647,
        EMAIL = 648,
        CC_EMAIL = 649,
        WEBSITE = 650,
        PLUS_CODE_ADDRESS = 651,
    };

    enum class eTWForm26QPersonResponsible : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWForm26QPersonResponsible (285))

        CONTACT_PERSON = 618,
        MAILING_NAME = 619,
        SON_OF = 620,
        DAUTHTER_OF = 621,
        ADDRESS = 622,
        FLAT_NUMBER = 623,
        FLOOR_NUMBER = 624,
        BUILDING_NAME = 625,
        NAME_OF_PREMISES_BUILDING = 625, //(Alias of: BUILDING_NAME)
        BUILDING_NUMBER = 626,
        ROAD = 627,
        STREET = 628,
        STREET_NAME = 628, //(Alias of: STREET)
        LANE = 629,
        AREA = 630,
        LOCATION = 631,
        DISTRICT = 632,
        TALUK = 633,
        CITY = 634,
        TOWN = 635,
        VILLAGE = 636,
        STATE = 637,
        COUNTRY = 638,
        COUNTRY_CODE = 639,
        COUNTRY_SUBDIVISION = 640,
        PO_BOX_NUMBER = 641,
        PIN_CODE = 642,
        POST_CODE = 643,
        STD_CODE = 644,
        PHONE_NO = 645,
        TELEPHONE_NO = 645, //(Alias of: PHONE_NO)
        MOBILE_NO = 646,
        FAX_NO = 647,
        EMAIL = 648,
        CC_EMAIL = 649,
        WEBSITE = 650,
        PLUS_CODE_ADDRESS = 651,
    };

    enum class eTWForm26QTaxPaidtoCentralGov : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWForm26QTaxPaidtoCentralGov (286))

        BSR_CODE = 742,
        TAX = 1628,
        EDUCATION_CESS = 1629,
        FEE = 1630,
        PENALTY = 1631,
        TOTAL_AMOUNT_DEPOSITED = 1632,
        BSR_RECIEPT_NUMBER = 1633,
        CHALLAN_SERIAL_NUMBER = 1634,
        DATE_OF_CHALLAN_DEPOSITED = 1635,
        DATE_OF_TRANSFER_VOUCHER = 1636,
        MINOR_HEAD_OF_CHALLAN = 1637,
        MODE_OF_DEPOSIT = 1694,
    };

    enum class eTWAnnexI26QDeducteeWiseBreakUp : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWAnnexI26QDeducteeWiseBreakUp (287))

        BSR_CODE = 742,
        TAN = 1046, //(Alias of: TAX_DEDUCTED_AND_COLLECTION_ACCOUNT_NUMBER)
        TAX = 1628,
        BSR_RECIEPT_NUMBER = 1633,
        CHALLAN_SERIAL_NUMBER = 1634,
        DATE_OF_CHALLAN_DEPOSITED = 1635,
        DATE_OF_TRANSFER_VOUCHER = 1636,
        AMOUNT_AS_PER_CHALLAN = 1638,
        TOTAL_INTEREST_ALLOCATED = 1640,
        SECTION_CODE = 1644,
        DATE_OF_PAYMENT = 1645,
        DATE_OF_DEDUCTION = 1646,
        AMOUNT_PAID = 1647,
        NUMBER_OF_CERTIFICATE_ISSUED = 1652,
        NAME_OF_DEDUCTOR = 1693,
        TOTAL_TAX_ALLOCATED = 1695,
        DEDUCTEE_REFERENCE_NUMBER = 1696,
        DEDUCTEE_CODE = 1697,
        PAN_OF_DEDUCTEE = 1698,
        NAME_OF_DEDUCTEE = 1699,
        TOTAL_TAX_DEDUCTED = 1700,
        TOTAL_TAX_DEPOSITED = 1701,
        DATE_OF_DEDECTED = 1702,
        REASON_FOR_DIFFERENCE_IN_DEDUCTION = 1703,
    };

    enum class eTWForm27QeTDS : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWForm27QeTDS (288))

        PAN = 715,
        TAN = 1046, //(Alias of: TAX_DEDUCTED_AND_COLLECTION_ACCOUNT_NUMBER)
        TAN_REGISTRATION_NUMBER = 1047,
        FINANCIAL_YEAR = 1619,
        QUARTER_ENDED = 1620,
        TOKEN_NUMBER = 1621,
        TYPE_OF_DEDUCTOR = 1622,
        GOVERNMENT_NAME = 1624,
        AIN_CODE = 1625,
        GSTN = 1626,
        PAN_OF_PERSON_RESPONSIBLE = 1627,
        NAME_OF_DEDUCTER = 1704,
    };

    enum class eTWForm27QDeductorDetails : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWForm27QDeductorDetails (289))

        CONTACT_PERSON = 618,
        MAILING_NAME = 619,
        SON_OF = 620,
        DAUTHTER_OF = 621,
        ADDRESS = 622,
        FLAT_NUMBER = 623,
        FLOOR_NUMBER = 624,
        BUILDING_NAME = 625,
        NAME_OF_PREMISES_BUILDING = 625, //(Alias of: BUILDING_NAME)
        BUILDING_NUMBER = 626,
        ROAD = 627,
        STREET = 628,
        STREET_NAME = 628, //(Alias of: STREET)
        LANE = 629,
        AREA = 630,
        LOCATION = 631,
        DISTRICT = 632,
        TALUK = 633,
        CITY = 634,
        TOWN = 635,
        VILLAGE = 636,
        STATE = 637,
        COUNTRY = 638,
        COUNTRY_CODE = 639,
        COUNTRY_SUBDIVISION = 640,
        PO_BOX_NUMBER = 641,
        PIN_CODE = 642,
        POST_CODE = 643,
        STD_CODE = 644,
        PHONE_NO = 645,
        TELEPHONE_NO = 645, //(Alias of: PHONE_NO)
        MOBILE_NO = 646,
        FAX_NO = 647,
        EMAIL = 648,
        CC_EMAIL = 649,
        WEBSITE = 650,
        PLUS_CODE_ADDRESS = 651,
    };

    enum class eTWForm27QPersonResponsible : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWForm27QPersonResponsible (290))

        CONTACT_PERSON = 618,
        MAILING_NAME = 619,
        SON_OF = 620,
        DAUTHTER_OF = 621,
        ADDRESS = 622,
        FLAT_NUMBER = 623,
        FLOOR_NUMBER = 624,
        BUILDING_NAME = 625,
        NAME_OF_PREMISES_BUILDING = 625, //(Alias of: BUILDING_NAME)
        BUILDING_NUMBER = 626,
        ROAD = 627,
        STREET = 628,
        STREET_NAME = 628, //(Alias of: STREET)
        LANE = 629,
        AREA = 630,
        LOCATION = 631,
        DISTRICT = 632,
        TALUK = 633,
        CITY = 634,
        TOWN = 635,
        VILLAGE = 636,
        STATE = 637,
        COUNTRY = 638,
        COUNTRY_CODE = 639,
        COUNTRY_SUBDIVISION = 640,
        PO_BOX_NUMBER = 641,
        PIN_CODE = 642,
        POST_CODE = 643,
        STD_CODE = 644,
        PHONE_NO = 645,
        TELEPHONE_NO = 645, //(Alias of: PHONE_NO)
        MOBILE_NO = 646,
        FAX_NO = 647,
        EMAIL = 648,
        CC_EMAIL = 649,
        WEBSITE = 650,
        PLUS_CODE_ADDRESS = 651,
    };

    enum class eTW27QTaxPaidtoCentralGov : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTW27QTaxPaidtoCentralGov (291))

        BSR_CODE = 742,
        TAX = 1628,
        EDUCATION_CESS = 1629,
        FEE = 1630,
        PENALTY = 1631,
        TOTAL_AMOUNT_DEPOSITED = 1632,
        BSR_RECIEPT_NUMBER = 1633,
        CHALLAN_SERIAL_NUMBER = 1634,
        DATE_OF_CHALLAN_DEPOSITED = 1635,
        DATE_OF_TRANSFER_VOUCHER = 1636,
        MINOR_HEAD_OF_CHALLAN = 1637,
        MODE_OF_DEPOSIT = 1694,
        SURCHARGE = 1705,
        INTEREST = 1706,
    };

    enum class eTWAnnexI27QDeducteeWiseBreakUp : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWAnnexI27QDeducteeWiseBreakUp (292))

        BSR_CODE = 742,
        TAN = 1046, //(Alias of: TAX_DEDUCTED_AND_COLLECTION_ACCOUNT_NUMBER)
        TAX = 1628,
        EDUCATION_CESS = 1629,
        BSR_RECIEPT_NUMBER = 1633,
        CHALLAN_SERIAL_NUMBER = 1634,
        DATE_OF_CHALLAN_DEPOSITED = 1635,
        DATE_OF_TRANSFER_VOUCHER = 1636,
        AMOUNT_AS_PER_CHALLAN = 1638,
        TOTAL_TDS_ALLOCATED = 1639,
        TOTAL_INTEREST_ALLOCATED = 1640,
        SECTION_CODE = 1644,
        DATE_OF_PAYMENT = 1645,
        DATE_OF_DEDUCTION = 1646,
        AMOUNT_PAID = 1647,
        NUMBER_OF_CERTIFICATE_ISSUED = 1652,
        NAME_OF_DEDUCTOR = 1693,
        DEDUCTEE_REFERENCE_NUMBER = 1696,
        DEDUCTEE_CODE = 1697,
        PAN_OF_DEDUCTEE = 1698,
        NAME_OF_DEDUCTEE = 1699,
        TOTAL_TAX_DEDUCTED = 1700,
        TOTAL_TAX_DEPOSITED = 1701,
        DATE_OF_DEDECTED = 1702,
        REASON_FOR_DIFFERENCE_IN_DEDUCTION = 1703,
        SURCHARGE = 1705,
        RATE_AT_WHICH_DEDUCTED = 1707,
        UNIQUE_ACKNOWLEDGEMENT_15CA = 1708,
        REMMITANCE_MADE_TO_COUNTRY = 1709,
        E_MAIL_OF_DEDUCTEE = 1710,
        CONTACT_NUMBER_OF_DEDUCTEE = 1711,
        ADDRESS_OF_DEDUCTEE = 1712,
        TIN_OF_DEDUCTEE = 1713,
        UNIQUE_IDENTIFICATION_NUMBER_OF_DEDUCTEE = 1714,
    };

    enum class eTWForm27EQeTDS : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWForm27EQeTDS (293))

        PAN = 715,
        TAN = 1046, //(Alias of: TAX_DEDUCTED_AND_COLLECTION_ACCOUNT_NUMBER)
        TAN_REGISTRATION_NUMBER = 1047,
        FINANCIAL_YEAR = 1619,
        QUARTER_ENDED = 1620,
        TOKEN_NUMBER = 1621,
        GOVERNMENT_NAME = 1624,
        AIN_CODE = 1625,
        GSTN = 1626,
        PAN_OF_PERSON_RESPONSIBLE = 1627,
        TYPE_OF_COLLECTOR = 1715,
        NAME_OF_COLLECTOR = 1716,
    };

    enum class eTWForm27EQCOLLECTORDetails : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWForm27EQCOLLECTORDetails (294))

        CONTACT_PERSON = 618,
        MAILING_NAME = 619,
        SON_OF = 620,
        DAUTHTER_OF = 621,
        ADDRESS = 622,
        FLAT_NUMBER = 623,
        FLOOR_NUMBER = 624,
        BUILDING_NAME = 625,
        NAME_OF_PREMISES_BUILDING = 625, //(Alias of: BUILDING_NAME)
        BUILDING_NUMBER = 626,
        ROAD = 627,
        STREET = 628,
        STREET_NAME = 628, //(Alias of: STREET)
        LANE = 629,
        AREA = 630,
        LOCATION = 631,
        DISTRICT = 632,
        TALUK = 633,
        CITY = 634,
        TOWN = 635,
        VILLAGE = 636,
        STATE = 637,
        COUNTRY = 638,
        COUNTRY_CODE = 639,
        COUNTRY_SUBDIVISION = 640,
        PO_BOX_NUMBER = 641,
        PIN_CODE = 642,
        POST_CODE = 643,
        STD_CODE = 644,
        PHONE_NO = 645,
        TELEPHONE_NO = 645, //(Alias of: PHONE_NO)
        MOBILE_NO = 646,
        FAX_NO = 647,
        EMAIL = 648,
        CC_EMAIL = 649,
        WEBSITE = 650,
        PLUS_CODE_ADDRESS = 651,
    };

    enum class eTWForm27EQPersonResponsible : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWForm27EQPersonResponsible (295))

        CONTACT_PERSON = 618,
        MAILING_NAME = 619,
        SON_OF = 620,
        DAUTHTER_OF = 621,
        ADDRESS = 622,
        FLAT_NUMBER = 623,
        FLOOR_NUMBER = 624,
        BUILDING_NAME = 625,
        NAME_OF_PREMISES_BUILDING = 625, //(Alias of: BUILDING_NAME)
        BUILDING_NUMBER = 626,
        ROAD = 627,
        STREET = 628,
        STREET_NAME = 628, //(Alias of: STREET)
        LANE = 629,
        AREA = 630,
        LOCATION = 631,
        DISTRICT = 632,
        TALUK = 633,
        CITY = 634,
        TOWN = 635,
        VILLAGE = 636,
        STATE = 637,
        COUNTRY = 638,
        COUNTRY_CODE = 639,
        COUNTRY_SUBDIVISION = 640,
        PO_BOX_NUMBER = 641,
        PIN_CODE = 642,
        POST_CODE = 643,
        STD_CODE = 644,
        PHONE_NO = 645,
        TELEPHONE_NO = 645, //(Alias of: PHONE_NO)
        MOBILE_NO = 646,
        FAX_NO = 647,
        EMAIL = 648,
        CC_EMAIL = 649,
        WEBSITE = 650,
        PLUS_CODE_ADDRESS = 651,
    };

    enum class eTW27EQTaxPaidtoCentralGov : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTW27EQTaxPaidtoCentralGov (296))

        BSR_CODE = 742,
        TAX = 1628,
        EDUCATION_CESS = 1629,
        FEE = 1630,
        PENALTY = 1631,
        TOTAL_AMOUNT_DEPOSITED = 1632,
        BSR_RECIEPT_NUMBER = 1633,
        CHALLAN_SERIAL_NUMBER = 1634,
        DATE_OF_CHALLAN_DEPOSITED = 1635,
        DATE_OF_TRANSFER_VOUCHER = 1636,
        MINOR_HEAD_OF_CHALLAN = 1637,
        MODE_OF_DEPOSIT = 1694,
        SURCHARGE = 1705,
        INTEREST = 1706,
    };

    enum class eTWAnnexI27EQPartyWiseBreakUp : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWAnnexI27EQPartyWiseBreakUp (297))

        BSR_CODE = 742,
        TAN = 1046, //(Alias of: TAX_DEDUCTED_AND_COLLECTION_ACCOUNT_NUMBER)
        TAX = 1628,
        EDUCATION_CESS = 1629,
        BSR_RECIEPT_NUMBER = 1633,
        CHALLAN_SERIAL_NUMBER = 1634,
        DATE_OF_CHALLAN_DEPOSITED = 1635,
        DATE_OF_TRANSFER_VOUCHER = 1636,
        AMOUNT_AS_PER_CHALLAN = 1638,
        TOTAL_INTEREST_ALLOCATED = 1640,
        DATE_OF_PAYMENT = 1645,
        AMOUNT_PAID = 1647,
        NUMBER_OF_CERTIFICATE_ISSUED = 1652,
        TOTAL_TAX_DEPOSITED = 1701,
        SURCHARGE = 1705,
        NAME_OF_COLLECTOR = 1716,
        TOTAL_TCS_ALLOCATED = 1717,
        PARTY_REFERENCE_NUMBER = 1718,
        PARTY_CODE = 1719,
        PAN_OF_PARTY = 1720,
        NAME_OF_PARTY = 1721,
        COLLECTION_CODE = 1722,
        TOTAL_TAX_COLLECTED = 1723,
        RATE_AT_WHICH_COLLECTED = 1724,
        DATE_OF_COLLECTED = 1725,
        REASON_FOR_DIFFERENCE_IN_COLLECTION = 1726,
        DEDUCTEE_NON_RESIDENT = 1727,
        DEDUCTEE_WITH_PERMANENT_ESTABLISHEMENT_IN_INDIA = 1728,
    };

    enum class eTWForm27AeTDS : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWForm27AeTDS (298))

        PAN = 715,
        TAN = 1046, //(Alias of: TAX_DEDUCTED_AND_COLLECTION_ACCOUNT_NUMBER)
        FINANCIAL_YEAR = 1619,
        QUARTER_ENDED = 1620,
        TYPE_OF_DEDUCTOR = 1622,
        PAN_OF_PERSON_RESPONSIBLE = 1627,
        NAME_OF_DEDUCTOR = 1693,
        TYPE_OF_COLLECTOR = 1715,
        NAME_OF_COLLECTOR = 1716,
        ASSESSMENT_YEAR = 1729,
        PREVIOUS_RECEIPT_NUMBER = 1730,
        TOTAL_ANNEXURES_ENCLOSED = 1731,
        OTHER_INFORMATION = 1732,
    };

    enum class eTWForm27ADetails : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWForm27ADetails (299))

        CONTACT_PERSON = 618,
        MAILING_NAME = 619,
        SON_OF = 620,
        DAUTHTER_OF = 621,
        ADDRESS = 622,
        FLAT_NUMBER = 623,
        FLOOR_NUMBER = 624,
        BUILDING_NAME = 625,
        NAME_OF_PREMISES_BUILDING = 625, //(Alias of: BUILDING_NAME)
        BUILDING_NUMBER = 626,
        ROAD = 627,
        STREET = 628,
        STREET_NAME = 628, //(Alias of: STREET)
        LANE = 629,
        AREA = 630,
        LOCATION = 631,
        DISTRICT = 632,
        TALUK = 633,
        CITY = 634,
        TOWN = 635,
        VILLAGE = 636,
        STATE = 637,
        COUNTRY = 638,
        COUNTRY_CODE = 639,
        COUNTRY_SUBDIVISION = 640,
        PO_BOX_NUMBER = 641,
        PIN_CODE = 642,
        POST_CODE = 643,
        STD_CODE = 644,
        PHONE_NO = 645,
        TELEPHONE_NO = 645, //(Alias of: PHONE_NO)
        MOBILE_NO = 646,
        FAX_NO = 647,
        EMAIL = 648,
        CC_EMAIL = 649,
        WEBSITE = 650,
        PLUS_CODE_ADDRESS = 651,
    };

    enum class eTWForm27APersonResponsible : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWForm27APersonResponsible (300))

        CONTACT_PERSON = 618,
        MAILING_NAME = 619,
        SON_OF = 620,
        DAUTHTER_OF = 621,
        ADDRESS = 622,
        FLAT_NUMBER = 623,
        FLOOR_NUMBER = 624,
        BUILDING_NAME = 625,
        NAME_OF_PREMISES_BUILDING = 625, //(Alias of: BUILDING_NAME)
        BUILDING_NUMBER = 626,
        ROAD = 627,
        STREET = 628,
        STREET_NAME = 628, //(Alias of: STREET)
        LANE = 629,
        AREA = 630,
        LOCATION = 631,
        DISTRICT = 632,
        TALUK = 633,
        CITY = 634,
        TOWN = 635,
        VILLAGE = 636,
        STATE = 637,
        COUNTRY = 638,
        COUNTRY_CODE = 639,
        COUNTRY_SUBDIVISION = 640,
        PO_BOX_NUMBER = 641,
        PIN_CODE = 642,
        POST_CODE = 643,
        STD_CODE = 644,
        PHONE_NO = 645,
        TELEPHONE_NO = 645, //(Alias of: PHONE_NO)
        MOBILE_NO = 646,
        FAX_NO = 647,
        EMAIL = 648,
        CC_EMAIL = 649,
        WEBSITE = 650,
        PLUS_CODE_ADDRESS = 651,
    };

    enum class eTWForm27ACONTROL : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWForm27ACONTROL (301))

        SERIAL_NUMBER = 829,
        AMOUNT_PAID = 1647,
        NO_OF_RECORDS = 1733,
        TAX_COLLECTED = 1734,
        TAX_DEDUCTED = 1735,
        TAX_DEPOSITED = 1736,
    };

    enum class eTWMCASchema : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWMCASchema (302))

    };

    enum class eTWMCAAcquisitions : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWMCAAcquisitions (303))

        TYPE = 679,
        FACEVALUE = 1737,
        INVESTMENT_NAME = 1738,
        NATURE = 1739,
        NUMBER_OF_UNITS = 1740,
        PURCHASE_VALUE = 1741,
        SELLING_VALUE = 1742,
        UNITS_SOLD = 1743,
    };

    enum class eTWMCAAuiditorInformation : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWMCAAuiditorInformation (304))

        AUDITOR_INFORMATION_ID = 1744,
        AUDITOR_INFORMATION = 1745,
        AUDITOR_INFORMATION_OPINION = 1746,
    };

    enum class eTWMCABorrowingInformation : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWMCABorrowingInformation (305))

        ID = 567,
        BORROWER_ID = 1747,
        BORROWER_NOTE = 1748,
        BORROWER_DETAIL_ID = 1749,
        BORROWER_DETAILED_NOTE = 1750,
        BORROWER_DETAILED_ADDITIONAL_NOTE = 1751,
        BORROWER_DETAILED_NOTE_DATE = 1752,
        BORROWER_SECURED_VALUE = 1753,
        BORROWER_UNSECURED_VALUE = 1754,
        BORROWER_ST_SECURED_VALUE = 1755,
        BORROWER_ST_UNSECURED_VALUE = 1756,
    };

    enum class eTWMCAComponents : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWMCAComponents (306))

        COMPONENT_NAME = 1757,
        IMPORTED_PERCENTAGE = 1758,
        IMPORTED_VALUE = 1759,
        INDIGENOUS_PERCENTAGE = 1760,
        INDIGENOUS_VALUE = 1761,
    };

    enum class eTWMCAEmployeeBenefits : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWMCAEmployeeBenefits (307))

        ID = 567,
        DOMESTIC_VALUE = 1762,
        DOMESTIC_NOTE = 1763,
        FOREIGN_VALUE = 1764,
        FOREIGN_NOTE = 1765,
        MULTIPLE_EMPLOYEE_VALUE = 1766,
        MULTIPLE_EMPLOYEE_NOTE = 1767,
        NOTE = 1768,
        NUMBER = 1769,
    };

    enum class eTWMCAImpairmentDetails : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWMCAImpairmentDetails (308))

        NOTE = 1768,
        LA_CASH_GENERATING_UNIT = 1770,
        LA_CASH_GENERATING_UNIT_NOTE = 1771,
        LA_CASH_GENERATING_UNIT_VALUE = 1772,
        LA_INDIVIDUAL_VALUE = 1773,
        TA_CASH_GENERATING_UNIT = 1774,
        TA_CASH_GENERATING_UNIT_NOTE = 1775,
        TA_CASH_GENERATING_UNIT_VALUE = 1776,
        TA_INDIVIDUAL_VALUE = 1777,
    };

    enum class eTWMCAImpairment : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWMCAImpairment (309))

        CLASSNAME = 1778,
        IMPAIRMENT_LOSS_VALUE = 1779,
        IMPAIRMENT_LOSS_REVERSAL_VALUE = 1780,
        LINE_ITEM_NOTE = 1781,
        REVERSAL_IMPAIRMENT_LOSS_VALUE = 1782,
        REVERSAL_IMPAIRMENT_LOSS_REVERSAL_VALUE = 1783,
        REVERSAL_LINE_ITEM_NOTE = 1784,
    };

    enum class eTWMCAInventories : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWMCAInventories (310))

        MODE = 308,
        ID = 567,
        NATURE = 1739,
        CERTIFICATION_NUMBER = 1785,
        CERTIFICATE_INVENTORY_NUMBER = 1786,
        GOODS_IN_TRANSIT_VALUE = 1787,
        INVENTORY_VALUE = 1788,
    };

    enum class eTWMCALoansAndAdvances : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWMCALoansAndAdvances (311))

        ID = 567,
        LOAN_ADVANCE_ID = 1789,
        LOAN_ADVANCE_NOTE = 1790,
        LOAN_ADVANCE_LT_DOUBTFUL_VALUE = 1791,
        LOAN_ADVANCE_LT_SECURED_VALUE = 1792,
        LOAN_ADVANCE_LT_UNSECURED_VALUE = 1793,
        LOAN_ADVANCE_ST_DOUBTFUL_VALUE = 1794,
        LOAN_ADVANCE_ST_SECURED_VALUE = 1795,
        LOAN_ADVANCE_ST_UNSECURED_VALUE = 1796,
    };

    enum class eTWMCAOtherProvisions : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWMCAOtherProvisions (312))

        ID = 567,
        NOTE = 1768,
        LEGAL_PROC_VALUE = 1797,
        MISC_VALUE = 1798,
        ONEROUS_VALUE = 1799,
        REFUND_VALUE = 1800,
        RESTORATION_VALUE = 1801,
        RESTRUCTURING_VALUE = 1802,
        WARRANTY_VALUE = 1803,
    };

    enum class eTWMCAProductProperties : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWMCAProductProperties (313))

        ID = 567,
        OPENING_BALANCE = 689,
        CLOSING_BALANCE = 690,
        DEPLETION_VALUE = 1804,
        OTHER_ADJUSTMENT_VALUE = 1805,
        PRE_PROD_PL_VALUE = 1806,
        PROD_PROP_VALUE = 1807,
        TOTAL_CHANGES_VALUE = 1808,
        TRANSFERRED_VALUE = 1809,
    };

    enum class eTWMCAProductServices : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWMCAProductServices (314))

        QUANTITY = 26,
        TYPE = 679,
        DESCRIPTION = 712,
        DESCRIPTION_OF_CATEGORY = 1810,
        HIGHEST_TURNOVER = 1811,
        ITC = 1812,
        TURNOVER = 1813,
        UNIT_OF_MEASURE = 1814,
        UOM = 1814, //(Alias of: UNIT_OF_MEASURE)
    };

    enum class eTWMCARawMaterials : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWMCARawMaterials (315))

        OPENING_BALANCE = 689,
        CLOSING_BALANCE = 690,
        CATEGORY = 806,
        NATURE = 1739,
        CONSUMED_AMOUNT = 1815,
        SALES_AMOUNT = 1816,
        STOCK_ITEM_NAME = 1817,
    };

    enum class eTWMCASegement : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWMCASegement (316))

        ID = 567,
        NAME = 677,
        TYPE = 679,
        INTER_SEGMENT = 1818,
        SEGMENT_ID = 1819,
        SEGMENT_NATURE = 1820,
        UNALLOCATED_SEGMENT = 1821,
    };

    enum class eTWMCAShareholders : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWMCAShareholders (317))

        COUNTRY = 638,
        TYPE = 679,
        PAN = 715,
        NUMBER = 1769,
        SHAREHOLDER_NAME = 1822,
        CIN = 1823,
        CLASS = 1824,
        PERCENTAGE = 1825,
    };

    enum class eTWXBRL : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWXBRL (318))

    };

    enum class eTWXBRLAmalgamation : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWXBRLAmalgamation (319))

        COUNTRY = 638,
        EFFECTIVE_DATE = 828,
        COMPANY_NAME = 1534,
        CIN = 1823,
        DISCLOSURE = 1826,
        NATURE_OF_BUSSINESS = 1827,
        METHOD_OF_ACC = 1828,
        STATUTE_SCHEMA = 1829,
        RESERVES_ACC_TREAT = 1830,
        RESERVES_ACC_TREAT_DEVIATION = 1831,
        RESERVES_ACC_TREAT_REASON = 1832,
        SHARES_DESCRIPTION = 1833,
        NO_OF_SHARES = 1834,
        PERCCMP_EQUITY_SHARES = 1835,
        CONSIDERATION_PAID = 1836,
    };

    enum class eTWXBRLDetails : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWXBRLDetails (320))

        AMOUNT = 23,
        ID = 567,
        DATE = 785,
        ADDITIONAL_AMOUNT = 1436,
        NOTE = 1768,
        NUMBER = 1769,
        NOTE_HTML = 1837,
        ADDITIONAL_NOTE = 1838,
        ADDITIONAL_DATE = 1839,
        ADDITIONAL_NUMBER = 1840,
    };

    enum class eTWXBRLAuditorDetail : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWXBRLAuditorDetail (321))

        CONTACT_PERSON = 618,
        MAILING_NAME = 619,
        SON_OF = 620,
        DAUTHTER_OF = 621,
        ADDRESS = 622,
        FLAT_NUMBER = 623,
        FLOOR_NUMBER = 624,
        BUILDING_NAME = 625,
        NAME_OF_PREMISES_BUILDING = 625, //(Alias of: BUILDING_NAME)
        BUILDING_NUMBER = 626,
        ROAD = 627,
        STREET = 628,
        STREET_NAME = 628, //(Alias of: STREET)
        LANE = 629,
        AREA = 630,
        LOCATION = 631,
        DISTRICT = 632,
        TALUK = 633,
        CITY = 634,
        TOWN = 635,
        VILLAGE = 636,
        STATE = 637,
        COUNTRY = 638,
        COUNTRY_CODE = 639,
        COUNTRY_SUBDIVISION = 640,
        PO_BOX_NUMBER = 641,
        PIN_CODE = 642,
        POST_CODE = 643,
        STD_CODE = 644,
        PHONE_NO = 645,
        TELEPHONE_NO = 645, //(Alias of: PHONE_NO)
        MOBILE_NO = 646,
        FAX_NO = 647,
        EMAIL = 648,
        CC_EMAIL = 649,
        WEBSITE = 650,
        PLUS_CODE_ADDRESS = 651,
        PAN = 715,
        AUDIT_FIRM_NAME = 1841,
        AUDITOR_NAME = 1842,
        MEMBERSHIP_NUMBER = 1843,
        SRN_NUMBER = 1844,
        AUDIT_REPORT_SIGN_DATE = 1845,
        BS_SIGN_DATE = 1846,
    };

    enum class eTWXBRLDebentureDetail : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWXBRLDebentureDetail (322))

        NATURE = 1739,
        CLASS = 1824,
        BOOK_VALUE = 1847,
        DEBENTURE_NUMBER = 1848,
        DEBENTURE_RATE = 1849,
        DEBENTURE_VALUE = 1850,
        EARLIEST_DATE_OF_RED = 1851,
        NOMINAL_AMOUNT = 1852,
        NOMINAL_VALUE = 1853,
        TERMS_OF_RED_CONV = 1854,
    };

    enum class eTWXBRLGoodsDetail : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWXBRLGoodsDetail (323))

        NATURE_OF_GOODS = 1045,
        UOM = 1814, //(Alias of: UNIT_OF_MEASURE)
        CLASS_OF_GOODS = 1855,
        PHYSICAL_QUANTITY_OF_STOCK_GOODS = 1856,
        PHYSICAL_VALUE_OF_STOCK_GOODS = 1857,
        QUANTITY_OF_GOODS_PURCHASED = 1858,
        QUANTITY_OF_GOODS_SOLD = 1859,
        QUANTITY_OF_STOCK_GOODS = 1860,
        Unit_of_Measure = 1814, //(Alias of: UOM)
        VALUE_OF_GOODS_PURCHASED = 1861,
        VALUE_OF_GOODS_SOLD = 1862,
        VALUE_OF_STOCK_GOODS = 1863,
    };

    enum class eTWXBRLDirectorsRemuneration : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWXBRLDirectorsRemuneration (324))

        NAME = 677,
        DESIGNATION = 1005,
        DATE_OF_BIRTH = 1008,
        TOTAL_SALARY = 1660,
        DISCLOSURE = 1826,
        DISCLOSURE_HTML = 1864,
        ID_NUMBER = 1865,
        DOB = 1008, //(Alias of: DATE_OF_BIRTH)
        QUALIFICATION = 1866,
        SHARES_HELD = 1867,
        BASIC_PAY = 1868,
        ALLOWANCES = 1869,
        PERQUISITES = 1870,
        COMMISSION = 1871,
        SITTING_FEES = 1872,
        STOCK_COMPENSATION = 1873,
        POST_RETIREMENT_BENEFITS = 1874,
        OTHER_COMPENSATION = 1875,
        REMUNERATION = 1876,
    };

    enum class eTWXBRLForeignBankBalanceDetails : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWXBRLForeignBankBalanceDetails (325))

        BANK_NAME = 740,
        BALANCE_AMOUNT = 1185,
        COUNTRY_NAME = 1877,
        MAXIMUM_BALANCE_AMOUNT = 1878,
    };

    enum class eTWXBRLInvestmentAssociates : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWXBRLInvestmentAssociates (326))

        COUNTRY = 638,
        CIN = 1823,
        DISCLOSURE = 1826,
        INVESTMENTS_IN_ASSOCIATES = 1879,
        PROPORTION_OF_OWNERSHIP = 1880,
        PROPORTION_OF_VOTING_POWER = 1881,
        ASSOCIATE_DESCRIPTION = 1882,
        ASSOCIATE_NAME_DIFF_REP_DATE = 1883,
        ASSOCIATE_CIN_DIFF_REP_DATE = 1884,
        REP_DATE_DIFFERENCE = 1885,
        NON_ADOP_OF_UNI_ACC_POL = 1886,
        DIFF_IN_ACC_POLICY_FOLL = 1887,
        SHARE_OF_COMM = 1888,
        SHARE_OF_CL = 1889,
        CONTINGENT_LIABILITIES = 1890,
        REASON_FOR_NOT_ACC_INVEST = 1891,
    };

    enum class eTWXBRLInvestmentJV : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWXBRLInvestmentJV (327))

        COUNTRY = 638,
        NAME = 677,
        CIN = 1823,
        DISCLOSURE = 1826,
        DISCLOSURE_HTML = 1864,
        PERCENTAGE_OF_OWNERSHIP_INTEREST = 1892,
        CIN_OF_JV_DIFF_REP_DATE = 1893,
        UNI_ACC_POLICY_NOT_FOLLOW = 1894,
        DIFF_ACC_POLICY_FOLL_ITEMS = 1895,
        CONTINGENT_LIABILITY_JV = 1896,
        SHARE_CONTINGENT_LIABILITY_OTH_VEN = 1897,
        SHARE_CONTILIAB_JV = 1898,
        CONTINGENT_LIABILITY_OTH_VENTUE = 1899,
        CAPITAL_COMMON_JV = 1900,
        SHARE_CAPITAL_COMMON_JV = 1901,
    };

    enum class eTWXBRLMSME : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWXBRLMSME (328))

        NAME = 677,
        CIN = 1823,
        DISCLOSURE = 1826,
        DISCLOSURE_HTML = 1864,
        OUTSTANDING_AMOUNT = 1902,
        MAX_OUTSTANDING_AMOUNT = 1903,
    };

    enum class eTWXBRLOtherDisclosures : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWXBRLOtherDisclosures (329))

        OTHER_DISCLOSURES = 1904,
        DETAILS_OF_INVENTROTY = 1905,
        INVENTORY_MARKET_VALUE = 1906,
        RIGHT_OF_OWNERSHIP_NOTE = 1907,
        REALISABILITY_OF_INVENTORY_NOTE = 1908,
        INCOME_FROM_INVENTORY_NOTE = 1909,
        MORTGAGES_OF_LOAN_NOTE = 1910,
        MORTGAGES_OF_SECURED_LOANS_NOTE = 1911,
        MORTGAGES_OF_UNSECURED_LOAN_NOTE = 1912,
        OTHER_DISCLOSURES_HTML = 1913,
        INVESTMENT_TYPE = 1914,
        PURCHASE_QUANTITY = 1915,
        PURCHCHASE_FACE_VALUE = 1916,
        PURCHASE_RATE = 1917,
        SOLD_QUANTITY = 1918,
        SELLLING_PRICE = 1919,
        INVESTMENT_NATURE = 1920,
    };

    enum class eTWXBRLPrimarySegmentDetail : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWXBRLPrimarySegmentDetail (330))

        NAME = 677,
        EXT_CUST_REVENUE = 1921,
        OTH_OP_SEGMENT_REV = 1922,
        SEGMENT_REVENUE = 1923,
        SEGMENTINT_INCOME = 1924,
        OM_ITEM_INCOME = 1925,
        OM_NON_CASH_ITEM_INCOME = 1926,
        INTEREST_EXPENSE = 1927,
        DEP_AMOUNT = 1928,
        PL_EX_ORD_ITEMS_ATTR_SEGMENT = 1929,
        EX_ORD_ITEMS_ATTR_SEGMENT = 1930,
        PROV_FOR_TAX_ATTR_SEGMENT = 1931,
        PL_ATTR_SEGMENT = 1932,
        ASSETS_ITEMS_ATTR_SEGMENT = 1933,
        NON_CURR_ASSETS_ATTR_SEGMENT = 1934,
        LIABILITIES_ATTR_SEGMENT = 1935,
    };

    enum class eTWXBRLRawMaterialCons : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWXBRLRawMaterialCons (331))

        AMOUNT = 23,
        QUANTITY = 26,
        CLASS = 1824,
        UNIT_OF_MEASUREMENT = 1936,
    };

    enum class eTWXBRLRelatedPartyTransaction : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWXBRLRelatedPartyTransaction (332))

        COUNTRY = 638,
        NAME = 677,
        PAN = 715,
        CIN = 1823,
        ID_NUMBER = 1865,
        NATURE_OF_ISSUING_AUTH = 1937,
        NATURE_DESCRIPTION = 1938,
        OUTSTANDING_BALANCE = 1939,
        OUTSTANDING_BALANCE_TR_EXPL = 1940,
        GIVEN_RECE_OUTSTANDING_BALANCE = 1941,
        PROV_DOUBTFUL_DEBT_OUTSTANDING_BALANCE = 1942,
        EXP_BAD_DOUBTFUL_DEBT = 1943,
        TRANSACTION_DESCRIPTION = 1944,
        TRANSACTION_AMOUNT = 1945,
    };

    enum class eTWXBRLXBRLSecSegDetail : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWXBRLXBRLSecSegDetail (333))

        NAME = 677,
        REVENUE = 1946,
        ASSETS = 1947,
        ADD_AMOUNT = 1948,
    };

    enum class eTWXBRLXBRLShareCapital : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWXBRLXBRLShareCapital (334))

        TYPE_CURRENT_YEAR = 1949,
        NATURE_CURRENT_YEAR = 1950,
        NOM_VALUE_AUTH_SHARE_CURRENT_YEAR = 1951,
        NUMBER_OF_AUTH_SHARE_CURRENT_YEAR = 1952,
        VALUE_OF_AUTH_SHARE_CURRENT_YEAR = 1953,
        NOM_VALUE_SUBS_SHARE_CURRENT_YEAR = 1954,
        NUMBER_OF_SUB_SHARE_CURRENT_YEAR = 1955,
        VALUE_OF_SUB_SHARE_CURRENT_YEAR = 1956,
        NOM_VALUE_PAID_UP_SHARE_CURRENT_YEAR = 1957,
        NUMBER_OF_PAID_UP_SHARE_CURRENT_YEAR = 1958,
        VALUE_OF_PAID_UP_SHARE_CURRENT_YEAR = 1959,
        NOM_VALUE_ISSUED_SHARE_CURRENT_YEAR = 1960,
        NUMBER_OF_ISSUED_SHARE_CURRENT_YEAR = 1961,
        VALUE_OF_ISSUED_SHARE_CURRENT_YEAR = 1962,
    };

    enum class eTWXBRLShareCapitalClassDetails : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWXBRLShareCapitalClassDetails (335))

        TYPE = 679,
        NATURE = 1739,
        NOM_VALUE_ISSUED_DURING_PERIOD = 1963,
        NUMBER_OF_SHARES_ISSUED_PUB_OFF = 1964,
        AMOUNT_PUBLIC_ISSUED_DURING_PERIOD = 1965,
        NUMBER_OF_BONUS_SHARES_ISSUED = 1966,
        AMOUNT_OF_BONUS_ISSUED_DURING_PERIOD = 1967,
        NUMBER_OF_RIGHT_SHARES_ISSUED = 1968,
        AMOUNT_OF_RIGHT_ISSUED_DURING_PERIOD = 1969,
        NUMBER_OF_SHARES_ISSUED_PVT_PMNT = 1970,
        AMOUNT_PRV_PLACE_DURING_PERIOD = 1971,
        NUMBER_OF_SHARES_PREF_ALLOT = 1972,
        AMOUNT_PREF_ALLOT_DURING_PERIOD = 1973,
        NUMBER_OF_SHARES_WITHOUT_PYMT = 1974,
        AMOUNT_WITHOUT_PYMT_DURING_PERIOD = 1975,
        NUMBER_OF_SHARES_ISSUED_AMG_SCH = 1976,
        AMOUNT_OF_ISSUE_AMG_SCH = 1977,
        NUMBER_OF_GLOBAL_DEPO_SHARES = 1978,
        AMOUNT_GLOBAL_DEP_DURING_PERIOD = 1979,
        NUMBER_OF_AMERICAN_DEP_SHARES = 1980,
        AMOUNT_AMERICAN_DEP_DURING_PERIOD = 1981,
        NUMBER_OF_OTHER_SHARES = 1982,
        AMOUNT_OTH_SHARES_DURING_PERIOD = 1983,
        NUMBER_OF_SHARES_CONV_SEC = 1984,
        AMOUNT_SHARES_CONV_SEC_DURING_PERIOD = 1985,
        NUMBER_OF_SHARES_ISSUED_DURING_PERIOD = 1986,
        AGGR_AMOUNT_DURING_PERIOD = 1987,
    };

    enum class eTWXBRLDirectorDetail : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWXBRLDirectorDetail (336))

        PAN = 715,
        DESIGNATION = 1005,
        ID_NUMBER = 1865,
        FIRST_NAME = 1988,
        MIDDLE_NAME = 1989,
        LAST_NAME = 1990,
        SIGN_DATE = 1991,
    };

    enum class eTWXBRLSubsidiaryInfo : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWXBRLSubsidiaryInfo (337))

        START_DATE = 33,
        END_DATE = 34,
        COUNTRY = 638,
        NAME = 677,
        SECTION = 692,
        CIN = 1823,
        SUBSIDIARY_INFO = 1992,
        SUBSIDIARY_COMPANY = 1993,
        DETAILS_STNT_SEC212 = 1994,
        SUBSIDIARY_INFO_HTML = 1995,
        IS_FILEDBS = 1996,
        SRN = 1997,
        REASON_FOR_NO_FILING = 1998,
        HOLDING_COMPANY = 1999,
        BEC_SUB_DATE = 2000,
        CEASING_DATE = 2001,
        NO_OF_SHARES_HELD = 2002,
        FACE_VALUE_OF_SHARES = 2003,
        PAID_UP_VALUE_SHARES = 2004,
        PERCENTAGE_SHARES = 2005,
        VOTING_PROPORTION = 2006,
        SUBSIDIARY_CURRENCY = 2007,
        EXCHANGE_RATE = 2008,
        SHARE_CAPITAL = 2009,
        RESERVES_AND_SURPLUS = 2010,
        TOTAL_ASSETS = 2011,
        TOTAL_LIABILITIES = 2012,
        INVESTMENT = 2013,
        TOTAL_INCOME = 2014,
        PROFIT_BEFORE_TAX = 2015,
        PROVISION_FOR_TAX = 2016,
        PROFIT_AFTER_TAX = 2017,
        PROPOSED_DIVIDEND = 2018,
        AGGR_AMT_OF_PLPY = 2019,
        DET_AGGR_AMT_NOT_PAR_COMPANY = 2020,
        AGGR_AMT_NOT_ACC_CY = 2021,
        AGGR_AMT_NOT_ACC_PY = 2022,
        DET_AGGR_AMT_DEALT_PAR_COMPANY = 2023,
        AGGR_AMT_ACC_CY = 2024,
        AGGR_AMT_ACC_PY = 2025,
        ASSETS_LIABILITY_DETAILS = 2026,
        INTERESTS_DETAILS = 2027,
        NATURE_OF_RELATION = 2028,
        JOINTLY_CONTRO_ASSETS = 2029,
    };

    enum class eTWScheduleVI : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWScheduleVI (338))

    };

    enum class eTWScheduleVIBorrowings : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWScheduleVIBorrowings (339))

        ID = 567,
        NAME = 677,
        REMARKS = 1406,
        BALANCE = 2030,
        SECURED_BY = 2031,
        PAYMENT_TERMS = 2032,
        DEFAULT_PERIOD = 2033,
        DEFAULT_AMOUNT = 2034,
        SHARE_CLASS = 2035,
        FACE_VALUE = 2036,
        REDEMPTION_VALUE = 2037,
        MATURITY_DATE = 2038,
        AGGREGATE_AMOUNT = 2039,
    };

    enum class eTWScheduleVIFixedAssets : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWScheduleVIFixedAssets (340))

        OPENING_BALANCE = 689,
        CLOSING_BALANCE = 690,
        ELEMENT_NAME = 2040,
        ADDITIONS = 2041,
        DEDUCTIONS = 2042,
        OTHERS_ADJUSTMENT = 2043,
        DEPRECIATION = 2044,
        REVALUATION = 2045,
        REVERSALS = 2046,
        IMPAIRMENT_LOSS = 2047,
        ACQUIRED = 2048,
        REVALUATION_DATE = 2049,
        YEAR = 2050,
    };

    enum class eTWScheduleVIInvestments : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWScheduleVIInvestments (341))

        ID = 567,
        FACE_VALUE = 2036,
        QUOTED_AMOUNT = 2051,
        QUOTED_MARKET_VALUE = 2052,
        UNQUOTED_AMOUNT = 2053,
        SHARE_NUMBER = 2054,
        CORPORATE_BODY_NAME = 2055,
        SUBSIDIARY = 2056,
        EXTENT_OF_HOLDING = 2057,
        QUOTED_INFO = 2058,
        PAID_INFO = 2059,
        IS_STATED_AT_COST = 2060,
        VALUATION_BASIC = 2061,
        FIRM_NAME = 2062,
        TOTAL_CAPITAL = 2063,
        PARTNER_NAME = 2064,
        PROFIT_SHARE = 2065,
    };

    enum class eTWScheduleVIShareCapitalDetails : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWScheduleVIShareCapitalDetails (342))

        DUE_BY_DIRECTORS = 2066,
        DUE_BY_OFFICERS = 2067,
        SHARE_CAPITAL_NOTE = 2068,
    };

    enum class eTWShareHoldersFunds : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWShareHoldersFunds (343))

        SHARE_CLASS = 2035,
        FACE_VALUE = 2036,
        SHARE_NUMBER = 2054,
        SHARE_NAME = 2069,
        SHARE_TYPE = 2070,
        SHARES_ISSUED = 2071,
        SHARES_BOUGHT = 2072,
        PAID_UP_AMOUNT = 2073,
        NET_VALUE = 2074,
    };

    enum class eTWShareByOtherCompany : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWShareByOtherCompany (344))

        COMPANY_NAME = 1534,
        SHARE_CLASS = 2035,
        SHARE_NUMBER = 2054,
        SHARE_TYPE = 2070,
        COMPANY_TYPE = 2075,
        SHARE_AMOUNT = 2076,
    };

    enum class eTWShareHolderShares : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWShareHolderShares (345))

        SHAREHOLDER_NAME = 1822,
        SHARE_CLASS = 2035,
        SHARE_NUMBER = 2054,
    };

    enum class eTWAggregatedShares : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWAggregatedShares (346))

        SHARE_CLASS = 2035,
        SHARE_TYPE = 2070,
        PAID_SHARES = 2077,
        BONUS_SHARES = 2078,
        BUY_BACK_SHARES = 2079,
    };

    enum class eTWUNI_SCHEMA : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWUNI_SCHEMA (347))

        VERSION = 4,
        MAX_ID = 2081,
    };

    enum class eTWUNI_SCHEMA_ENUM : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWUNI_SCHEMA_ENUM (348))

        CONTENT_ID = 5,
        NAME = 677,
        MAX_ID = 2081,
        IS_DEFUNCT = 2083,
        CATEGORY_ENUM_USID = 2084,
        DEVSTAGE_ONLY = 2085,
    };

    enum class eTWUNI_SCHEMA_CONSTANT : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWUNI_SCHEMA_CONSTANT (349))

        CONTENT_ID = 5,
        NAME = 677,
        IS_DEFUNCT = 2083,
        MERGE_MAP = 2087,
        CATEGORY_CONST_USID = 2088,
    };

    enum class eTWUNI_CONTENT_SCHEMA_PROPERTIES : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWUNI_CONTENT_SCHEMA_PROPERTIES (350))

        IS_APISCHEMA = 2090,
        TWSchemaType = 2091,
        HASHSECTION_CONTENT_ID = 2092,
        DCSCHEMA_CONTENT_ID = 2093,
        IS_RESERVED = 2094,
    };

    enum class eTWUNI_CONTAINER_CONTENT : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWUNI_CONTAINER_CONTENT (351))

        CONTENT_ID = 5,
        TYPE = 679,
        UNI_CONTENT_SCHEMA_PROPERTIES = 2089,
    };

    enum class eTWUNI_CONTENT_SCHEMA : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWUNI_CONTENT_SCHEMA (352))

        CONTENT_ID = 5,
        TYPE = 679,
        UNI_CONTENT_SCHEMA_PROPERTIES = 2089,
        UNI_CONTAINER_CONTENT = 2095,
    };

    enum class eTWAPP_SCHEMA_METADATA : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWAPP_SCHEMA_METADATA (353))

        VERSION = 4,
    };

    enum class eTWCoreUISchema : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWCoreUISchema (354))

    };

    enum class eTWUIElementType : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWUIElementType (356))

        UNKNOWN = 0,
        FORM = 901,
        WINDOW = 2100,
        PAGE = 2101,
        LABEL = 2102,
        BUTTON = 2103,
        TEXTEDIT = 2104,
        LIST = 2105,
        MENU = 2106,
        LINE = 2107,
        UIFIELD = 2108,
        UIFORM = 2109,
        UIREPORT = 2110,
    };

    enum class eTWUIPropertyType : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWUIPropertyType (357))

        UNKNOWN = 0,
        WIDGET_TYPE = 2111,
        EV_CALLBACK_PAYLOAD = 2112,
        EV_CALLBACK_APIS = 2113,
        EV_CALLBACK_WINDOW = 2114,
        EV_CALLBACK_ELEMENT = 2115,
        EV_CALLBACK_DATA = 2116,
        EV_CALLBACK_EVENT_TYPE = 2117,
        EV_CALLBACK_KEY_PRESS = 2118,
        MULTILINE = 2119,
        TEXT_WRAP = 2120,
        ANCHOR = 2121,
        MARGIN = 2122,
        FONT_SIZE = 2123,
        CHANGE_EXISTING_UI = 2124,
        WIDTH_TYPE = 2125,
        HEIGHT_TYPE = 2126,
        WIDTH_RELATIVE_TO = 2127,
        HEIGHT_RELATIVE_TO = 2128,
        IS_PASSWORD = 2129,
        CHANGE_UI_PROPERTY = 2130,
        UI_PROPERTY = 2131,
        UI_PROPERTY_VALUE = 2132,
        EVENT_STRING = 2133,
        FOCUS_ALLOWED = 2134,
        NEXT_FOCUS_ELEM = 2135,
        CONTEXT_ID = 2136,
        EV_VALIDATE_TEXT = 2137,
        EV_ACCEPT_TEXT = 2138,
        BORDER_COLOR = 2139,
        IS_EDITABLE = 2140,
        LABEL_TYPE = 2141,
        LIST_DATA = 2142,
        DEFAULT_TEXT = 2143,
        SCHEMA_FIELD_NAME = 2144,
        MENU_ENTRY = 2145,
        MENU_API = 2146,
        MENU_API_ID = 2147,
        MENU_PAYLOAD = 2148,
        REPORT_ROW = 2149,
        VIEW_TEMPLATE_ID = 2150,
        VIEW_DATA = 2151,
        VIEW_SOURCE_API = 2152,
        WELCOME_MESSAGE = 2153,
        PAGE_BACK = 2154,
        PDCID = 2155,
        IDCID = 2156,
        VDCID = 2157,
        SCREEN_ID = 2158,
        WINDOW_PARMS = 2159,
        IS_EXIT_MSG_COMM = 2160,
        IS_EXIT_MSG_CONF = 2161,
        ADDITIONAL_BUTTONS = 2162,
        REPORT_ID = 2163,
    };

    enum class eTWUISampleTemplates : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWUISampleTemplates (358))

        UNKNOWN = 0,
        FORM = 901,
        WELCOME_PAGE = 2164,
        MESSAGE_PAGE = 2165,
        MENU_LIST = 2166,
        REPORT_VIEW = 2167,
        COMPOUND_VIEW = 2168,
        HEADER = 2169,
    };

    enum class eTWUICompanySchemaFields : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWUICompanySchemaFields (359))

        MAILING_NAME = 619,
        COMPANY_NAME = 1534,
    };

    enum class eTWUILabelType : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWUILabelType (360))

        TITLE = 2170,
        SUB_TITLE = 2171,
        NORMAL = 2172,
        MENU_ITEM = 2173,
    };

    enum class eTWUIPositionType : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWUIPositionType (361))

        LEFT = 2174,
        RIGHT = 2175,
        TOP = 2176,
        BOTTOM = 2177,
        CENTER = 2178,
        HORIZONTAL_CENTER = 2179,
        VERTICAL_CENTER = 2180,
    };

    enum class eTWUIEventsType : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWUIEventsType (362))

        UNKNOWN = 0,
        EV_SINGLE_CLICK = 2181,
        EV_DOUBLE_CLICK = 2182,
        EV_RIGHT_CLICK = 2183,
        LONG_PRESS = 2184,
        VALUE_SELECT = 2185,
        VALUE_CHANGE = 2186,
        WINDOW_WIDTH_CHANGE = 2187,
        WINDOW_HEIGHT_CHANGE = 2188,
        WINDOW_XPOS_CHANGE = 2189,
        WINDOW_YPOS_CHANGE = 2190,
        WINDOW_STATE_CHANGE = 2191,
        WINDOW_TITLE_CHANGE = 2192,
        WINDOW_VISIBILITY_CHANGE = 2193,
        TEXT_CHANGE = 2194,
        TAB_PRESS = 2195,
        ENTER_PRESS = 2196,
        ESC_PRESS = 2197,
        KEY_PRESS = 2198,
        KEY_RELEASED = 2199,
        ON_FOCUS_OUT = 2200,
        STOP_APP_EVENT = 2201,
        EXIT_WINDOW_EVENT = 2202,
        RELOAD_LAYOUT_EVENT = 2203,
        CREATE_WINDOW_EVENT = 2204,
        INVOKE_BACK_PAGE_EVENT = 2205,
        PROCESSING_ERROR_EVENT = 2206,
        FIELD_VALIDATION_EVENT = 2207,
        MENU_NAVIGATION_EVENT = 2208,
        FORM_SUBMIT_EVENT = 2209,
        INTERNAL_DATA_ENTRY_SUCCESS_EVENT = 2210,
    };

    enum class eTWUICallBackEventData : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWUICallBackEventData (363))

        CONTEXT_ID = 2136,
        UI_EVENT_ID = 2211,
        WIDGET_ID = 2212,
        CONSOLE_RUNTIME_ELEM_ID = 2213,
        WINDOW_ID = 2214,
        IS_VALIDATION_SUCCESS = 2215,
        WIDGET_DATA = 2216,
        PAYLOAD_DATA = 2217,
        FORM_ENTRY_PAYLOAD = 2218,
    };

    enum class eTWUIDimensionType : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWUIDimensionType (364))

        ABSOLUTE_POS = 2219,
        RELATIVE_POS = 2220,
    };

    enum class eTWBorderStyle : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWBorderStyle (365))

        SOLID = 2221,
        DOTTED = 2222,
        DASHED = 2223,
    };

    enum class eTWFontFamily : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWFontFamily (366))

        ROBOTO = 2224,
        ARIAL = 2225,
        CALIBRI = 2226,
    };

    enum class eTWScreenOrientationType : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWScreenOrientationType (367))

        PORTRAIT = 2227,
        LANDSCAPE = 2228,
    };

    enum class eTWUIResponsivenessData : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWUIResponsivenessData (355))

        START_TICK = 2098,
        RESPONSIVENESS_PTR = 2099,
    };

    enum class eTWClientCommandFieldID : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWClientCommandFieldID (368))

        UNKNOWN = 0,
        SCHEMA_ID = 82,
        WINDOW_ID = 2214,
        COMMAND_ID = 2229,
        COMMAND_EXPRESSION = 2230,
        INPUT = 2231,
        OUTPUT = 2232,
        PAGE_ID = 2233,
        REPORT_DEFINITION = 2234,
        FROM = 2235,
        TO = 2236,
        API_ID = 2237,
        API_PAYLOAD = 2238,
        API_DESTINATION = 2239,
    };

    enum class eTWClientCommand : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWClientCommand (369))

        UNKNOWN = 0,
        CLIENTPF_COMMAND_OPENPAGE = 2240,
        CLIENTPF_COMMAND_REFRESHPAGE = 2241,
        CLIENTPF_COMMAND_COMPUTE = 2242,
        CLIENTPF_COMMAND_EXECUTEREPORT = 2243,
        CLIENTPF_COMMAND_EXECUTEAPI = 2244,
        CLIENTPF_COMMAND_BACK = 2245,
        CLIENTPF_COMMAND_COPY = 2246,
        CLIENTPF_COMMAND_LOADSCHEMA = 2247,
    };

    enum class eTWClientActionFieldID : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWClientActionFieldID (370))

        UNKNOWN = 0,
        COMMANDS = 2248,
    };

    enum class eTWSchemaObjectFields : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWSchemaObjectFields (371))

        UNKNOWN = 0,
        PAGE_DEFINITION_FIELD = 2249,
        ACTION_DEFINITION_FIELD = 2250,
    };

    enum class eTWClientSchemaFieldID : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWClientSchemaFieldID (372))

        UNKNOWN = 0,
        DATA_SCHEMA = 2251,
        CLIENT_SCHEMA = 2252,
        ACTION_ID = 2253,
    };

    enum class eTWPANIC_OBJECT : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWPANIC_OBJECT (373))

        ERROR_STRING = 2255,
        FORMAT_PARMS = 2256,
    };

    enum class eTWUI_POSITION : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWUI_POSITION (374))

        X_POS = 2258,
        Y_POS = 2259,
    };

    enum class eTWUI_DIMENSION : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWUI_DIMENSION (375))

        HEIGHT = 837,
        WIDTH = 855,
        CALC_HEIGHT = 2261,
        CALC_WIDTH = 2262,
        DIMENSION_UNIT = 2263,
        DIM_REFERENCE = 2264,
    };

    enum class eTWUI_PADDING : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWUI_PADDING (376))

        LEFT_PAD = 2266,
        RIGHT_PAD = 2267,
        TOP_PAD = 2268,
        BOTTOM_PAD = 2269,
    };

    enum class eTWUI_BORDER : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWUI_BORDER (377))

        COLOR = 809,
        WIDTH = 855,
        STYLE = 2271,
    };

    enum class eTWALIGNMENT : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWALIGNMENT (378))

        H_ALIGNMENT = 2273,
        V_ALIGNMENT = 2274,
    };

    enum class eTWUI_FONT : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWUI_FONT (379))

        SIZE = 191,
        FAMILY = 2276,
        IS_BOLD = 2277,
        IS_ITALIC = 2278,
        IS_UNDERLINED = 2279,
    };

    enum class eTWWINDOW : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWWINDOW (380))

        ID = 567,
        TITLE = 2170,
        UI_POSITION = 2257,
        UI_DIMENSION = 2260,
        UI_PADDING = 2265,
        UI_BORDER = 2270,
        ALIGNMENT = 2272,
        STRINGIFIED_ID = 2280,
        VDC_SCREEN_ID = 2281,
        BACKGROUND_COLOR = 2282,
        IS_MINIZABLE = 2283,
        IS_CLOSABLE = 2284,
        IS_RESIZABLE = 2285,
        IS_VISIBLE = 2286,
        LABEL_API = 2287,
        DATA_API = 2288,
        PHYSICAL_WINDOW = 2289,
        CHILD_ID = 2290,
        PARENT_ID = 2291,
    };

    enum class eTWPAGE : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWPAGE (381))

        ID = 567,
        UI_POSITION = 2257,
        UI_DIMENSION = 2260,
        UI_PADDING = 2265,
        UI_BORDER = 2270,
        ALIGNMENT = 2272,
        STRINGIFIED_ID = 2280,
        BACKGROUND_COLOR = 2282,
        CHILD_ID = 2290,
        PARENT_ID = 2291,
        PAGE_LABEL_API_ID = 2292,
        PAGE_DATA_API_ID = 2293,
        BACK_PAGE_ID = 2294,
    };

    enum class eTWPANE : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWPANE (382))

        ID = 567,
        TYPE = 679,
        IDCID = 2156,
        UI_POSITION = 2257,
        UI_DIMENSION = 2260,
        UI_PADDING = 2265,
        UI_BORDER = 2270,
        ALIGNMENT = 2272,
        STRINGIFIED_ID = 2280,
        BACKGROUND_COLOR = 2282,
        CHILD_ID = 2290,
        PARENT_ID = 2291,
    };

    enum class eTWPART : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWPART (383))

        ID = 567,
        UI_POSITION = 2257,
        UI_DIMENSION = 2260,
        UI_PADDING = 2265,
        UI_BORDER = 2270,
        ALIGNMENT = 2272,
        STRINGIFIED_ID = 2280,
        BACKGROUND_COLOR = 2282,
        CHILD_ID = 2290,
        PARENT_ID = 2291,
    };

    enum class eTWUIFORM : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWUIFORM (384))

        ID = 567,
        UI_POSITION = 2257,
        UI_DIMENSION = 2260,
        UI_PADDING = 2265,
        UI_BORDER = 2270,
        ALIGNMENT = 2272,
        STRINGIFIED_ID = 2280,
        BACKGROUND_COLOR = 2282,
        CHILD_ID = 2290,
        PARENT_ID = 2291,
        FULL_WIDTH = 2297,
        FULL_HEIGHT = 2298,
    };

    enum class eTWUIREPORT : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWUIREPORT (385))

        ID = 567,
        UI_POSITION = 2257,
        UI_DIMENSION = 2260,
        UI_BORDER = 2270,
        STRINGIFIED_ID = 2280,
        BACKGROUND_COLOR = 2282,
        CHILD_ID = 2290,
        PARENT_ID = 2291,
    };

    enum class eTWLINE : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWLINE (386))

        ID = 567,
        UI_POSITION = 2257,
        UI_DIMENSION = 2260,
        UI_PADDING = 2265,
        UI_BORDER = 2270,
        ALIGNMENT = 2272,
        STRINGIFIED_ID = 2280,
        BACKGROUND_COLOR = 2282,
        CHILD_ID = 2290,
        PARENT_ID = 2291,
    };

    enum class eTWUIFIELD : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWUIFIELD (387))

        ID = 567,
        LABEL_TYPE = 2141,
        UI_POSITION = 2257,
        UI_DIMENSION = 2260,
        UI_PADDING = 2265,
        UI_BORDER = 2270,
        ALIGNMENT = 2272,
        STRINGIFIED_ID = 2280,
        BACKGROUND_COLOR = 2282,
        DATA_API = 2288,
        CHILD_ID = 2290,
        PARENT_ID = 2291,
        TEXT = 2299,
        IS_CLICKABLE = 2300,
        ON_CLICK_API = 2301,
        ON_CLICK_PAGE_ID = 2302,
    };

    enum class eTWLABEL : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWLABEL (388))

        ID = 567,
        LABEL_TYPE = 2141,
        UI_POSITION = 2257,
        UI_DIMENSION = 2260,
        UI_PADDING = 2265,
        UI_BORDER = 2270,
        ALIGNMENT = 2272,
        UI_FONT = 2275,
        STRINGIFIED_ID = 2280,
        BACKGROUND_COLOR = 2282,
        DATA_API = 2288,
        PARENT_ID = 2291,
        TEXT = 2299,
        IS_CLICKABLE = 2300,
        ON_CLICK_API = 2301,
        ON_CLICK_PAGE_ID = 2302,
    };

    enum class eTWBUTTON : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWBUTTON (389))

        ID = 567,
        API_ID = 2237,
        UI_POSITION = 2257,
        UI_DIMENSION = 2260,
        UI_PADDING = 2265,
        UI_BORDER = 2270,
        ALIGNMENT = 2272,
        UI_FONT = 2275,
        STRINGIFIED_ID = 2280,
        BACKGROUND_COLOR = 2282,
        DATA_API = 2288,
        PARENT_ID = 2291,
        TEXT = 2299,
        IS_ENABLED = 2303,
        IS_SUBMIT_BUTTON = 2304,
        ON_SUCCESS = 2305,
        ON_FAILURE = 2306,
    };

    enum class eTWTEXTEDIT : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWTEXTEDIT (390))

        ID = 567,
        LABEL = 2102,
        IS_EDITABLE = 2140,
        SCHEMA_FIELD_NAME = 2144,
        UI_POSITION = 2257,
        UI_DIMENSION = 2260,
        UI_PADDING = 2265,
        UI_BORDER = 2270,
        ALIGNMENT = 2272,
        UI_FONT = 2275,
        STRINGIFIED_ID = 2280,
        BACKGROUND_COLOR = 2282,
        LABEL_API = 2287,
        DATA_API = 2288,
        PARENT_ID = 2291,
        TEXT = 2299,
        HINT_TEXT = 2307,
        IS_MANDATORY = 2308,
        DATATYPE = 2309,
        VALIDATION_API_ID = 2310,
    };

    enum class eTWLIST : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWLIST (391))

        ID = 567,
        TITLE = 2170,
        UI_POSITION = 2257,
        UI_DIMENSION = 2260,
        UI_PADDING = 2265,
        UI_BORDER = 2270,
        ALIGNMENT = 2272,
        UI_FONT = 2275,
        STRINGIFIED_ID = 2280,
        BACKGROUND_COLOR = 2282,
        DATA_API = 2288,
        TEXT = 2299,
        DATASET_URL = 2311,
        DATA_URL = 2312,
    };

    enum class eTWUI_TEMPLATE_WELCOME_MESSAGE : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWUI_TEMPLATE_WELCOME_MESSAGE (392))

        TEXT = 2299,
        TEMPLATE_ID = 2314,
        ON_SUBMIT = 2315,
    };

    enum class eTWUI_TEMPLATE_MENU_LIST : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWUI_TEMPLATE_MENU_LIST (393))

        ID = 567,
        MENU_ENTRY = 2145,
        PAGE_BACK = 2154,
        PARENT_ID = 2291,
        MENU_TITLE = 2317,
    };

    enum class eTWMENU_ENTRY : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWMENU_ENTRY (394))

        PAGE_ID = 2233,
        API_ID = 2237,
        PARENT_ID = 2291,
        TEXT = 2299,
    };

    enum class eTWUI_TEMPLATE_REPORT_VIEW : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWUI_TEMPLATE_REPORT_VIEW (395))

        PAGE_BACK = 2154,
        TITLE = 2170,
        ON_SUCCESS = 2305,
        TEMPLATE_ID = 2314,
        REPORT_HEADER = 2319,
        DATA_SOURCE_API_ID = 2320,
    };

    enum class eTWREPORT_HEADER : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWREPORT_HEADER (396))

        REPORT_COLUMN = 2321,
    };

    enum class eTWREPORT_COLUMN : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWREPORT_COLUMN (397))

        TEXT = 2299,
        DATA_SCHEMA_FIELD_ID = 2322,
    };

    enum class eTWUI_TEMPLATE_FORM : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWUI_TEMPLATE_FORM (398))

        LIST = 2105,
        PAGE_BACK = 2154,
        ADDITIONAL_BUTTONS = 2162,
        TITLE = 2170,
        ON_SUCCESS = 2305,
        ON_FAILURE = 2306,
        TEMPLATE_ID = 2314,
        ON_SUBMIT = 2315,
        FORM_ENTRY = 2324,
    };

    enum class eTWFORM_ENTRY : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWFORM_ENTRY (399))

        SCHEMA_FIELD_NAME = 2144,
        API_ID = 2237,
        TEXT = 2299,
        FIELD_VALIDATE_PARMS = 2325,
    };

    enum class eTWFIELD_VALIDATE_PARMS : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWFIELD_VALIDATE_PARMS (400))

        IS_MANDATORY = 2308,
        DATATYPE = 2309,
        VALIDATION_API_ID = 2310,
        VALIDATION_API_SCHEMA_ID = 2326,
    };

    enum class eTWADDITIONAL_BUTTONS : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWADDITIONAL_BUTTONS (401))

        EV_SINGLE_CLICK = 2181,
        TEXT = 2299,
        ON_SUCCESS = 2305,
        ON_FAILURE = 2306,
    };

    enum class eTWUI_TEMPLATE_COMPOUND_VIEW : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWUI_TEMPLATE_COMPOUND_VIEW (402))

        TITLE = 2170,
        TEMPLATE_ID = 2314,
        CHILD = 2328,
    };

    enum class eTWSCREEN : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWSCREEN (403))

        ID = 567,
        NAME = 677,
        MODEL = 810,
        DEPTH = 834,
        HEIGHT = 837,
        MANUFACTURER = 846,
        WIDTH = 855,
        VDCID = 2157,
        DEVICE_PIXEL_RATIO = 2330,
        LOGICAL_PPI = 2331,
        PHYSICAL_PPI = 2332,
        ORIENTATION = 2333,
    };

    enum class eTWSCREEN_LIST : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWSCREEN_LIST (404))

        SCREEN = 2329,
    };

    enum class eTWDC_LIST : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWDC_LIST (405))

        DCID = 95,
    };

    enum class eTWZONE : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWZONE (406))

        ID = 567,
        UI_POSITION = 2257,
        UI_DIMENSION = 2260,
        CHILD_ID = 2290,
        PARENT_ID = 2291,
        LOGICAL_UNIT_REF = 2337,
        PLATFORM_OBJ_REF = 2338,
    };

    enum class eTWROW : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWROW (407))

        ID = 567,
        UI_POSITION = 2257,
        UI_DIMENSION = 2260,
        CHILD_ID = 2290,
        PARENT_ID = 2291,
        LOGICAL_UNIT_REF = 2337,
        PLATFORM_OBJ_REF = 2338,
    };

    enum class eTWCELL : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWCELL (408))

        ID = 567,
        UI_POSITION = 2257,
        UI_DIMENSION = 2260,
        CHILD_ID = 2290,
        PARENT_ID = 2291,
        LOGICAL_UNIT_REF = 2337,
        PLATFORM_OBJ_REF = 2338,
    };

    enum class eTWCONSOLE_COMM_PARMS : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWCONSOLE_COMM_PARMS (409))

        COMMAND_TYPE = 2342,
        CONSOLE_PAYLOAD = 2343,
    };

    enum class eTWAPPLICATION_GATEWAY_OF_TALLY_OBJ : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWAPPLICATION_GATEWAY_OF_TALLY_OBJ (410))

        GATEWAY_REPORTS = 2345,
    };

    enum class eTWGATEWAY_REPORTS : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWGATEWAY_REPORTS (411))

        APPLICATION_STATE = 2346,
        REPORT = 2347,
    };

    enum class eTWIDC_ADDITIONAL_INFO : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWIDC_ADDITIONAL_INFO (412))

        VDC_ID = 2349,
        DRIVERDC_ID = 2350,
        DRIVERDC_TYPE = 2351,
    };

    enum class eTWFRAME_PAGE_OBJECT : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWFRAME_PAGE_OBJECT (413))

        FRAME_PAGE_ID = 2353,
    };

    enum class eTWPANE_OBJECT_ID : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWPANE_OBJECT_ID (414))

        PANE_ID = 2355,
    };

    enum class eTWPRESENTATION_RENDER_WINDOW_REQUEST_SCHEMA : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWPRESENTATION_RENDER_WINDOW_REQUEST_SCHEMA (415))

        VDCID = 2157,
        IS_EXIT_MSG_COMM = 2160,
        WINDOW_ID = 2214,
        PAGE_ID = 2233,
    };

    enum class eTWPRESENTATION_PROCESS_LAYOUT_REQUEST_SCHEMA : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWPRESENTATION_PROCESS_LAYOUT_REQUEST_SCHEMA (416))

        VDCID = 2157,
        REPORT_ID = 2163,
        WINDOW_ID = 2214,
        PAGE_ID = 2233,
    };

    enum class eTWPRESENTATION_LAUNCH_RUNTIME_WINDOW_REQUEST_SCHEMA : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWPRESENTATION_LAUNCH_RUNTIME_WINDOW_REQUEST_SCHEMA (417))

        VDCID = 2157,
        REPORT_ID = 2163,
        WINDOW_ID = 2214,
    };

    enum class eTWPRESENTATION_CREATE_STARTUP_WINDOW_REQUEST_SCHEMA : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWPRESENTATION_CREATE_STARTUP_WINDOW_REQUEST_SCHEMA (418))

        VDCID = 2157,
        REPORT_ID = 2163,
    };

    enum class eTWPRESENTATION_CLOSE_APP_WINDOW_REQUEST_SCHEMA : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWPRESENTATION_CLOSE_APP_WINDOW_REQUEST_SCHEMA (419))

        VDCID = 2157,
        WINDOW_ID = 2214,
    };

    enum class eTWPRESENTATION_PROCESS_EVENTS_REQUEST_SCHEMA : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWPRESENTATION_PROCESS_EVENTS_REQUEST_SCHEMA (420))

        VDCID = 2157,
        IS_EXIT_MSG_COMM = 2160,
        REPORT_ID = 2163,
        UI_EVENT_ID = 2211,
        WINDOW_ID = 2214,
        PAYLOAD_DATA = 2217,
        PAGE_ID = 2233,
    };

    enum class eTWPRESENTATION_INTERNAL_UI_EVENT_RESPONSE_SCHEMA : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWPRESENTATION_INTERNAL_UI_EVENT_RESPONSE_SCHEMA (421))

        WIDGET_TYPE = 2111,
        WIDGET_ID = 2212,
    };

    enum class eTWQueryDC : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWQueryDC (422))

        IS_COMPLETE = 2364,
        ITERATOR = 2365,
    };

    enum class eTWBootstrapFormIDs : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWBootstrapFormIDs (423))

        PRAJAPATI_IP = 2366,
        LAN_IP = 2367,
    };

    enum class eTWLoginFormIDs : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWLoginFormIDs (424))

        USER_ID = 217,
        PASSWORD = 2368,
    };

    enum class eTWTW_ADMINDC_LANG_OBJ : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWTW_ADMINDC_LANG_OBJ (425))

        TW_ADMINDC_LANG_STR = 2370,
    };

    enum class eTWTW_ADMINDC_QUERY_OBJ : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWTW_ADMINDC_QUERY_OBJ (426))

        IS_COMPLETE = 2364,
        ITERATOR = 2365,
        TW_QUERY_RESULT_ID = 2372,
    };

    enum class eTWTW_APP_PREFS_OBJECT : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWTW_APP_PREFS_OBJECT (427))

        TW_APP_LANGUAGE_PREF = 2374,
        TW_APP_DATE_FORMAT_PREF = 2375,
        TW_APP_OS_LANG_PREF = 2376,
        TW_APP_PRAJAPATI_IP = 2377,
        TW_APP_LAN_IP = 2378,
        TW_APP_USER_ID = 2379,
    };

    enum class eTWTW_YOGINI_BS_FILE_OBJECT : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWTW_YOGINI_BS_FILE_OBJECT (428))

        TW_APP_YOGINI_BS_FILE = 2381,
    };

    enum class eTWTW_LANGUAGE_LIST : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWTW_LANGUAGE_LIST (429))

        ITEM = 2383,
    };

    enum class eTWTW_UNIVERSE_SUPERUSERS : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWTW_UNIVERSE_SUPERUSERS (430))

        TW_UNIVERSE_SUPERUSER = 2385,
    };

    enum class eTWTW_UNIVERSE_SUPERUSER : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWTW_UNIVERSE_SUPERUSER (431))

        TW_SUPERUSER_ID = 2386,
        TW_SUPERUSER_EMAIL_ID = 2387,
    };

    enum class eTWTW_APP_CURRENT_LANGUAGE_OBJ : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWTW_APP_CURRENT_LANGUAGE_OBJ (432))

        TW_APP_CURRENT_LANG = 2389,
    };

    enum class eTWSCHEMA_GET_LANGUAGES : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWSCHEMA_GET_LANGUAGES (433))

        FROM = 2235,
        TO = 2236,
        CONDITION = 2391,
    };

    enum class eTWLANGUAGE_OBJ : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWLANGUAGE_OBJ (434))

        TW_ADMINDC_LANG_STR = 2370,
    };

    enum class eTWTW_QUERY_SCHEMA : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWTW_QUERY_SCHEMA (435))

        FROM = 2235,
        TO = 2236,
        CONDITION = 2391,
        TW_QUERY_ID = 2394,
    };

    enum class eTWSchemaCompanyType : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWSchemaCompanyType (436))

        DUID = 307,
        COMPANY_NAME = 1534,
        COMPANY_PATH = 2395,
        USER_OBJECT = 2396,
    };

    enum class eTWTW_SERVERDC_QUERY_ID : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWTW_SERVERDC_QUERY_ID (437))

        TW_QUERY_RESULT_ID = 2372,
    };

    enum class eTWLEDGER_OBJECT : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWLEDGER_OBJECT (438))

        NAME = 677,
    };

    enum class eTWAUTHENTICATED_USER_OBJECT : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWAUTHENTICATED_USER_OBJECT (439))

        USER_ID = 217,
        PASSWORD = 2368,
        USER_IDENTIFIER = 2400,
    };

    enum class eTWLEDGER_OBJECT_EXT : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWLEDGER_OBJECT_EXT (440))

        NAME = 677,
        OPENING_BALANCE = 689,
        DESCRIPTION = 712,
    };

    enum class eTWCOMPANY_OBJECT : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWCOMPANY_OBJECT (441))

        DUID = 307,
        COMPANY_NAME = 1534,
        COMPANY_PATH = 2395,
        TRANSITION_CONFIG = 2403,
        OWNER_IDENTIFIER = 2404,
        OWNER_PASSWORD = 2405,
    };

    enum class eTWPATH_OBJECT : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWPATH_OBJECT (442))

        DEF_CUST_PATH = 2407,
        DEF_APP_PATH = 2408,
    };

    enum class eTWMESSAGE_OBJECT : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWMESSAGE_OBJECT (443))

        MESSAGE_ID = 2410,
        MESSAGE_COMMAND = 2411,
        PRIMARY_OBJECT = 2412,
    };

    enum class eTWOPEN_COMPANY_LIST_OBJ : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWOPEN_COMPANY_LIST_OBJ (444))

        VALUE = 17,
    };

    enum class eTWClientPlatform : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWClientPlatform (445))

        CDCID = 2416,
    };

    enum class eTWDITOBJECT : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWDITOBJECT (446))

        DITVERSION = 2418,
    };

    enum class eTWUSEROBJECT : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWUSEROBJECT (447))

        USERID = 2420,
    };

    enum class eTWRESERVEOBJECT : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWRESERVEOBJECT (448))

        RESERVEIPID = 2422,
    };

    enum class eTWIPV4OBJECT : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWIPV4OBJECT (449))

        IPV4IPID = 2424,
    };

    enum class eTWTW_CLIENT_QUERY_OBJ : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWTW_CLIENT_QUERY_OBJ (450))

        TW_QUERY_RESULT_ID = 2372,
    };

    enum class eTWPresentationCommSchema : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWPresentationCommSchema (451))

        DOES_PAGE_EXIST = 2428,
    };

    enum class eTWTW_TS_CONFIG_API_SCHEMA : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWTW_TS_CONFIG_API_SCHEMA (452))

        SELF_IPID = 2431,
        UNIVERSE_NAME = 2432,
        UNIVERSE_IPID = 2433,
        UNIVERSE_ID = 2434,
        UNIVERSE_OBJECT = 2435,
    };

    enum class eTWTW_TS_CONFIG_RESP_API_SCHEMA : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWTW_TS_CONFIG_RESP_API_SCHEMA (453))

        STATUS = 1154,
        UNIVERSE_OBJECT = 2435,
    };

    enum class eTWTSRealmServicesObject : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWTSRealmServicesObject (454))

        TW_RESPONSE_MESSAGE = 2437,
    };

    enum class eTWPING_SCRATCHPAD_SCHEMA : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWPING_SCRATCHPAD_SCHEMA (455))

        DUMMY_FIELD_ID_1 = 2439,
    };

    enum class eTWQueryLanguage : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWQueryLanguage (456))

        FILTER = 2440,
        STARTS_WITH = 2441,
    };

    enum class eTWPREMISE_BOOTSTRAP_REQ_SCHEMA : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWPREMISE_BOOTSTRAP_REQ_SCHEMA (457))

        PRAJAPATI_IP = 2366,
        LAN_IP = 2367,
    };

    enum class eTWIPID_AND_ITS_STATUS : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWIPID_AND_ITS_STATUS (458))

        IPID_MANUALLY_ENTERED = 2444,
        IPID_STATUS = 2445,
    };

    enum class eTWPREMISE_FETCH_IPIDS_RESP_SCHEMA : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWPREMISE_FETCH_IPIDS_RESP_SCHEMA (459))

        IPID_AND_ITS_STATUS = 2443,
    };

    enum class eTWLOGINHANDLER_REQ_SCHEMA : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWLOGINHANDLER_REQ_SCHEMA (460))

        USER_ID = 217,
        PASSWORD = 2368,
    };

    enum class eTWYOGINI_BOOTSTRAPHANDLER_REQ_SCHEMA : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWYOGINI_BOOTSTRAPHANDLER_REQ_SCHEMA (461))

        TW_APP_YOGINI_BS_FILE = 2381,
    };

    enum class eTWPREMISE_ADMINQUERY_REQ_SCHEMA : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWPREMISE_ADMINQUERY_REQ_SCHEMA (462))

        FROM = 2235,
        TO = 2236,
        CONDITION = 2391,
        TW_QUERY_ID = 2394,
    };

    enum class eTWPREMISE_LANGUAGEHANDLER_REQ_SCHEMA : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWPREMISE_LANGUAGEHANDLER_REQ_SCHEMA (463))

        LANGUAGE = 898,
        TW_QUERY_ID = 2394,
    };

    enum class eTWPREMISE_ADMINQUERY_CONTEXT_SCHEMA : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWPREMISE_ADMINQUERY_CONTEXT_SCHEMA (464))

        TW_REQUEST_CONTEXT_OS_LANG = 2452,
        TW_REQUEST_LOGGED_IN_USERS = 2453,
        TW_REQUEST_ITERATOR_ID = 2454,
    };

    enum class eTWPREMISE_LANGUAGEQUERY_RESP_SCHEMA : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWPREMISE_LANGUAGEQUERY_RESP_SCHEMA (465))

        TW_LANGUAGE_LIST = 2382,
        TW_QUERY_ID = 2394,
    };

    enum class eTWUIYoginiSchemaFields : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWUIYoginiSchemaFields (466))

        UNIVERSE_NAME = 2432,
        UNIVERSE_ID = 2434,
        CONNECT_IPADDRESS = 2456,
        CONNECT_PORT = 2457,
        UNIVERSE_IPADDRESS = 2458,
        UNIVERSE_PORT = 2459,
    };

    enum class eTWUIFileProperty : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWUIFileProperty (467))

        PRAJAPATI_FILE_PATH = 2460,
        BOOTSTRAP_FILE_PATH = 2469,
    };

    enum class eTWYoginiQueryDCExtensions : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWYoginiQueryDCExtensions (468))

        TW_LIST_OF_PRAJAPATI_IPS = 2461,
    };

    enum class eTWYOGINI_OPENPRAJAPATIDB_REQ_SCHEMA : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWYOGINI_OPENPRAJAPATIDB_REQ_SCHEMA (469))

        CDCID = 2416,
        PRAJAPATI_FILE_PATH = 2460,
    };

    enum class eTWYOGINI_ADDPRAJAPATIIP_REQ_SCHEMA : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWYOGINI_ADDPRAJAPATIIP_REQ_SCHEMA (470))

        CDCID = 2416,
        IPV4IPID = 2424,
    };

    enum class eTWYOGINI_DELETEPRAJAPATIIP_REQ_SCHEMA : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWYOGINI_DELETEPRAJAPATIIP_REQ_SCHEMA (471))

        CDCID = 2416,
        IPV4IPID = 2424,
    };

    enum class eTWYOGINI_SHOWPRAJAPATIIPS_REQ_SCHEMA : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWYOGINI_SHOWPRAJAPATIIPS_REQ_SCHEMA (472))

        CDCID = 2416,
    };

    enum class eTWYOGINI_SHOWPRAJAPATIIPS_RESP_SCHEMA : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWYOGINI_SHOWPRAJAPATIIPS_RESP_SCHEMA (473))

        PAYLOAD_DATA = 2217,
        TW_QUERY_ID = 2394,
    };

    enum class eTWTW_LIST_OF_PRAJAPATI_IPS : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWTW_LIST_OF_PRAJAPATI_IPS (474))

        ITEM = 2383,
    };

    enum class eTWTW_SITE_CONFIG_API_SCHEMA : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWTW_SITE_CONFIG_API_SCHEMA (475))

        SELF_IPID = 2431,
        UNIVERSE_NAME = 2432,
        UNIVERSE_IPID = 2433,
        UNIVERSE_ID = 2434,
        UNIVERSE_OBJECT = 2435,
    };

    enum class eTWTW_SITE_CONFIG_RESP_API_SCHEMA : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWTW_SITE_CONFIG_RESP_API_SCHEMA (476))

        STATUS = 1154,
        UNIVERSE_OBJECT = 2435,
    };

    enum class eTWKSHETRAPAL_OPENFILE_REQ_SCHEMA : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWKSHETRAPAL_OPENFILE_REQ_SCHEMA (477))

        BOOTSTRAP_FILE_PATH = 2469,
    };

    enum class eTWDIT_OBJECT : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWDIT_OBJECT (478))

        DIT_VERSION = 287,
    };

    enum class eTWTW_LIST_OF_USER_IDS : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWTW_LIST_OF_USER_IDS (479))

        ITEM = 2383,
    };

    enum class eTWPremisServerAPIFields : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWPremisServerAPIFields (480))

        COMPANY_OBJECT = 2402,
        MESSAGE_OBJECT = 2409,
        REQ_USER_IDENTIFIER = 2473,
        OBJECT_ID = 2474,
    };

    enum class eTWPremiseServerFeaturesPayloadID : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWPremiseServerFeaturesPayloadID (481))

        UNKNOWN = 0,
        STATUS = 1154,
    };

    enum class eTWPremiseClientFeaturesPayloadID : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWPremiseClientFeaturesPayloadID (482))

        USER_ID = 217,
        PASSWORD = 2368,
        OTP = 2475,
        TW_OTP_MESSAGE = 2476,
        TW_OTP_COUNT = 2477,
    };

    enum class eTWPremiseClientPayloadID : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWPremiseClientPayloadID (483))

        UNKNOWN = 0,
        SCHEMA = 2,
        NAME = 677,
        PARENT = 678,
        URL = 859,
        COMPANY = 867,
        STATUS = 1154,
        LIST = 2105,
        PDCID = 2155,
        HEADER = 2169,
        INPUT = 2231,
        PAGE_ID = 2233,
        ON_SUCCESS = 2305,
        ON_FAILURE = 2306,
        TEMPLATE_ID = 2314,
        ON_SUBMIT = 2315,
        USER_URL = 2478,
        SOURCE = 2479,
        COLUMN = 2480,
        ITEM_ID = 2481,
        PATH = 2482,
        ELEMENT = 2483,
        FIELD = 2484,
        OBJECT = 2485,
        IS_REPEATED = 2486,
        PAGE_DEFINITION = 2487,
        IP = 2488,
        PORT = 2489,
    };

    enum class eTWSchemaPropertiesObjectType : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWSchemaPropertiesObjectType (484))

        PRIMARY_OBJECT = 2412,
        SERVER_OBJECT = 2490,
    };

    enum class eTWClientDCCommands : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWClientDCCommands (485))

        PRE_COMPUTE_API = 2491,
    };

    enum class eTWCDC_AUTHENTICATED_USER_OBJ : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWCDC_AUTHENTICATED_USER_OBJ (486))

        USER_IDENTIFIER = 2400,
    };

    enum class eTWCDC_COMPANY_DETAILS_OBJ : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWCDC_COMPANY_DETAILS_OBJ (487))

        SCHEMA = 2,
        COMPANY_NAME = 1534,
        TRANSITION_CONFIG = 2403,
        OWNER = 2494,
    };

    enum class eTWCDC_USER_OBJ : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWCDC_USER_OBJ (488))

        USER_IDENTIFIER = 2400,
    };

    enum class eTWCDC_COMPANY_OBJ : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWCDC_COMPANY_OBJ (489))

        SCHEMA_ID = 82,
        DUID = 307,
        COMPANY_NAME = 1534,
        COMPANY_PATH = 2395,
    };

    enum class eTWUSER_DEF_PATH_OBJ : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWUSER_DEF_PATH_OBJ (490))

        DEF_CUST_PATH = 2407,
        DEF_APP_PATH = 2408,
    };

    enum class eTWCDC_UI_OBJ : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWCDC_UI_OBJ (491))

        DUMMY = 2499,
    };

    enum class eTWCLIENT_CONNECTREQUEST_REQ_SCHEMA : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWCLIENT_CONNECTREQUEST_REQ_SCHEMA (492))

        IDCID = 2156,
    };

    enum class eTWCLIENT_CONNECTREQUEST_RESP_SCHEMA : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWCLIENT_CONNECTREQUEST_RESP_SCHEMA (493))

        CDCID = 2416,
    };

    enum class eTWCLIENT_DISCONNECTREQUEST_REQ_SCHEMA : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWCLIENT_DISCONNECTREQUEST_REQ_SCHEMA (494))

        CDCID = 2416,
    };

    enum class eTWSOURCE_UNI_SCHEMA : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWSOURCE_UNI_SCHEMA (495))

        MAX_ID = 2081,
        ENUM_LIST = 2504,
    };

    enum class eTWSOURCE_UNI_SCHEMA_ENUM : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWSOURCE_UNI_SCHEMA_ENUM (496))

        CONTENT_ID = 5,
        NAME = 677,
        PARENT = 678,
        MAX_ID = 2081,
        IS_DEFUNCT = 2083,
        DEVSTAGE_ONLY = 2085,
        ENUM_LIST = 2504,
        CATEGORY_ENUM_OBJID = 2506,
        BASE_TYPE = 2507,
        DEVCONFIG_ENUM_OBJID = 2508,
        RESV_ENUM_TYPE = 2509,
        ALLOW_CHILDREN = 2510,
        IS_FINAL = 2511,
        CEILING_VALUE = 2512,
        LOCAL_SCOPE = 2513,
        IS_COMPILE_TIME = 2514,
        FOR_JAVA = 2515,
        INITIAL_ID = 2516,
        CONSTANT_LIST = 2517,
    };

    enum class eTWSOURCE_UNI_SCHEMA_CONSTANT : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWSOURCE_UNI_SCHEMA_CONSTANT (497))

        CONTENT_ID = 5,
        NAME = 677,
        PARENT = 678,
        IS_DEFUNCT = 2083,
        MERGE_MAP = 2087,
        BASE_TYPE = 2507,
        IS_COMPILE_TIME = 2514,
        PARENT_CONTENT_ID = 2519,
        CATEGORY_CONST_OBJID = 2520,
        IS_DS_RESOURCE_METRIC = 2521,
        IS_SCOPED = 2522,
        ORIG_CONST_OBJID = 2523,
    };

    enum class eTWSOURCE_CONTENT_SCHEMA_PROPERTIES : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWSOURCE_CONTENT_SCHEMA_PROPERTIES (498))

        IS_APISCHEMA = 2090,
        TWSchemaType = 2091,
        IS_RESERVED = 2094,
        HASHSECTION_OBJID = 2525,
    };

    enum class eTWSOURCE_CONTAINER_CONTENT : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWSOURCE_CONTAINER_CONTENT (499))

        NAME = 677,
        TYPE = 679,
        SOURCE_CONTENT_SCHEMA_PROPERTIES = 2524,
    };

    enum class eTWSOURCE_CONTENT_SCHEMA : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWSOURCE_CONTENT_SCHEMA (500))

        NAME = 677,
        PARENT = 678,
        TYPE = 679,
        SOURCE_CONTENT_SCHEMA_PROPERTIES = 2524,
        SOURCE_CONTAINER_CONTENT = 2526,
    };

    enum class eTWTWCMakePresetCacheVar : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWTWCMakePresetCacheVar (501))

        TWName = 2529,
        TWType = 2530,
        TWValue = 2531,
    };

    enum class eTWTWCMakePresetEnvVar : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWTWCMakePresetEnvVar (502))

        TWName = 2529,
        TWValue = 2531,
    };

    enum class eTWTWCMakeVSSVendorVar : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWTWCMakeVSSVendorVar (503))

        TWName = 2529,
        TWValue = 2531,
    };

    enum class eTWTWCMakeVSRSVendorVar : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWTWCMakeVSRSVendorVar (504))

        TWName = 2529,
        TWValue = 2531,
    };

    enum class eTWTWToolChainFlags : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWTWToolChainFlags (505))

        TWName = 2529,
        TWValue = 2531,
    };

    enum class eTWTWHostToolChainFlags : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWTWHostToolChainFlags (506))

        TWName = 2529,
        TWValue = 2531,
    };

    enum class eTWBUILDGEN_OS : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWBUILDGEN_OS (507))

        NAME = 677,
        TWCMakePresetCacheVar = 2528,
        TWCMakePresetEnvVar = 2532,
        TWCMakeVSSVendorVar = 2533,
        TWCMakeVSRSVendorVar = 2534,
        TWToolChainFlags = 2535,
        TWHostToolChainFlags = 2536,
        TWVSName = 2538,
        TWCMakeName = 2539,
        TWBuildGeneratorName = 2540,
        TWKernel = 2541,
        TWIsBuildHost = 2542,
        TWHostOS = 2543,
        TWInactive = 2544,
        TWVSIntelliSenseMode = 2545,
    };

    enum class eTWBUILDGEN_KERNEL : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWBUILDGEN_KERNEL (508))

        NAME = 677,
        TWCMakePresetCacheVar = 2528,
        TWCMakePresetEnvVar = 2532,
        TWCMakeVSSVendorVar = 2533,
        TWCMakeVSRSVendorVar = 2534,
        TWToolChainFlags = 2535,
        TWKernel = 2541,
        TWVSIntelliSenseMode = 2545,
    };

    enum class eTWBUILDGEN_ARCH : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWBUILDGEN_ARCH (509))

        NAME = 677,
        TWCMakePresetCacheVar = 2528,
        TWCMakePresetEnvVar = 2532,
        TWCMakeVSSVendorVar = 2533,
        TWCMakeVSRSVendorVar = 2534,
        TWToolChainFlags = 2535,
        TWVSName = 2538,
        TWCMakeName = 2539,
        TWIsBuildHost = 2542,
        TWInactive = 2544,
        TWVSIntelliSenseMode = 2545,
    };

    enum class eTWBUILDGEN_PRESET : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWBUILDGEN_PRESET (510))

        NAME = 677,
        TWCMakePresetCacheVar = 2528,
        TWCMakePresetEnvVar = 2532,
        TWCMakeVSSVendorVar = 2533,
        TWCMakeVSRSVendorVar = 2534,
        TWToolChainFlags = 2535,
        TWIsCustom = 2549,
    };

    enum class eTWBUILDGEN_CMAKE_PRESET : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWBUILDGEN_CMAKE_PRESET (511))

        NAME = 677,
        DISPLAY_NAME = 1002,
        VS_INTELLISENSE_MODE = 2551,
        IS_CONFIGURE_PRESET = 2552,
        IS_INDIVIDUAL = 2553,
        BUILD_ENTITY_TYPE = 2554,
        REFOBJ_ID = 2555,
        DEPENDS = 2556,
        CONFIF_DEPENDS = 2557,
    };

    enum class eTWBUILDGEN_CONFIG : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWBUILDGEN_CONFIG (512))

        NAME = 677,
        TWCMakePresetEnvVar = 2532,
        TWToolChainFlags = 2535,
        TWInactive = 2544,
        TWForPreset = 2559,
    };

    enum class eTWBUILDGEN_STAGE : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWBUILDGEN_STAGE (513))

        NAME = 677,
        TWCMakePresetEnvVar = 2532,
        TWToolChainFlags = 2535,
        TWInactive = 2544,
        TWStageConfigs = 2561,
    };

    enum class eTWBUILDGEN_TRUNK : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWBUILDGEN_TRUNK (514))

        NAME = 677,
        TWInactive = 2544,
        TWTrunkStages = 2563,
        TWSCMTrunkName = 2564,
    };

    enum class eTWBUILD_CONDITION_VALUE : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWBUILD_CONDITION_VALUE (515))

        VALUE = 17,
        COND_TYPE = 2566,
        COND_VALUE = 2567,
        COND_NEGATE = 2568,
    };

    enum class eTWAPP_CONDITION_VALUE : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWAPP_CONDITION_VALUE (516))

        VALUE = 17,
        COND_TYPE = 2566,
        COND_VALUE = 2567,
        COND_NEGATE = 2568,
    };

    enum class eTWBUILDGEN_LAYER : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWBUILDGEN_LAYER (517))

        NAME = 677,
        TYPE = 679,
        CATEGORY = 806,
        PATH = 2482,
        DEPENDS = 2556,
        APP_CONDITION_VALUE = 2569,
        SOURCES = 2571,
        PUBLIC_INCLUDES = 2572,
        PRIVATE_INCLUDES = 2573,
        TWMainIncludeFile = 2574,
    };

    enum class eTWBUILDGEN_CMAKE_TARGET : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWBUILDGEN_CMAKE_TARGET (518))

        NAME = 677,
        TYPE = 679,
        CATEGORY = 806,
        PATH = 2482,
        REFOBJ_ID = 2555,
        SOURCE_NAME = 2576,
        BASE_LAYER = 2577,
        HAS_ADMIN_TIER = 2578,
        HAS_SERVER_TIER = 2579,
        HAS_CLIENT_TIER = 2580,
        HAS_PRESENTATION_TIER = 2581,
        TOOLKIT = 2582,
    };

    enum class eTWAPPGEN_GENFILE_ASYNC_PARMS : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWAPPGEN_GENFILE_ASYNC_PARMS (519))

        PRODUCT_ID = 283,
        APPGEN_COMPUTE_PTR = 2584,
        TARGET_ID = 2585,
        GEN_FILE_TYPE = 2586,
    };

    enum class eTWAPPGEN_WORKSPACE : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWAPPGEN_WORKSPACE (520))

        BUILDGEN_TWHOME = 2588,
        BUILDGEN_TWTOOLSHOME = 2589,
        BUILDGEN_TWBUILDHOME = 2590,
        BUILDGEN_TWWORKSPACEHOME = 2591,
        BUILDGEN_TWGENHOME = 2592,
        BUILDGEN_PREDEF_FOLDERS = 2593,
        APPGEN_LOADED_TWFILES = 2594,
    };

    enum class eTWTWBuildLayer : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWTWBuildLayer (521))

        TWName = 2529,
        TWSourceDir = 2596,
        TWTestDir = 2597,
        TWBaseLayer = 2598,
        TWCategory = 2599,
    };

    enum class eTWAPPGEN_USER_CONFIG : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWAPPGEN_USER_CONFIG (522))

        TWProductFilter = 2601,
        TWProductFilterOut = 2602,
    };

    enum class eTWAPPGEN_CONFIG : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWAPPGEN_CONFIG (523))

        TWCMakePresetCacheVar = 2528,
        TWCMakePresetEnvVar = 2532,
        TWCMakeVSSVendorVar = 2533,
        TWCMakeVSRSVendorVar = 2534,
        TWToolChainFlags = 2535,
        TWBuildGeneratorName = 2540,
        TWBuildLayer = 2595,
        TWVerbose = 2604,
        TWCPPTopText = 2605,
        TWCPPBottomText = 2606,
        TWHPPTopText = 2607,
        TWHPPBottomText = 2608,
        TWHPPTWAppProductClassText = 2609,
        TWSchemaHPPTopText = 2610,
        TWSchemaHPPBottomText = 2611,
        TWJavaTopText = 2612,
        TWJavaBottomText = 2613,
        TWCMakeTopText = 2614,
        TWCMakeBottomText = 2615,
        TWAppCPPTopText = 2616,
        TWAppCPPBottomText = 2617,
        TWFloatingLayerName = 2618,
        TWAppUnitNotReadyExecFunc = 2619,
        TWAppUnitReadyExecFunc = 2620,
        TWAppUnitAPISupportLayer = 2621,
        TWAppGenPrimitiveStrClass = 2622,
        TWCMakeMainOutFile = 2623,
        TWBuildTargetsJsonFile = 2624,
        TWCMakePresetsOutFile = 2625,
        TWLaunchVSJsonFile = 2626,
        TWTaskVSJsonFile = 2627,
        TWWorkspaceFolderName = 2628,
        TWGenFolderName = 2629,
        TWToolsFolderName = 2630,
        TWBuildFolderName = 2631,
        TWIntFolderName = 2632,
        TWLibFolderName = 2633,
        TWBinFolderName = 2634,
        TWIgnoreFolders = 2635,
        TWLayerConfigPath = 2636,
        TWToolConfigPath = 2637,
        TWSchemaConfigPath = 2638,
        TWBuildConfigPath = 2639,
        TWUserConfigPath = 2640,
        TWCMakeBuildScript = 2641,
        TWPublicInclude = 2642,
        TWPrivateInclude = 2643,
        TWSourceExtensions = 2644,
        TWAppGenExtensions = 2645,
        TWAppGenFilesPaths = 2646,
        TWAppGenAppProdExtension = 2647,
        TWAppGenAppTestExtension = 2648,
        TWAppGenBuildFileExtension = 2649,
        TWOSArchInvalidValues = 2650,
        TWOSArchValidIntelliSenseModes = 2651,
        TWSchemaGenBaseDBPath = 2652,
        TWSchemaGenMasterDBPath = 2653,
        TWDefaultBuildTrunk = 2654,
    };

    enum class eTWAPPGEN_CMDLINE : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWAPPGEN_CMDLINE (524))

        APP_NAME = 2656,
        UNNAMED_PARM = 2657,
        build_trunk = 2658,
        help = 2659,
        version = 2660,
        clean = 2661,
    };

    enum class eTWPRODUCT_APPUNIT_INFO : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWPRODUCT_APPUNIT_INFO (525))

        APPUNIT = 2663,
        IS_TEST = 2664,
    };

    enum class eTWAPPGEN_PRODUCT : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWAPPGEN_PRODUCT (526))

        BUILD_VERSION = 284,
        NAME = 677,
        TYPE = 679,
        CATEGORY = 806,
        PATH = 2482,
        HAS_ADMIN_TIER = 2578,
        HAS_SERVER_TIER = 2579,
        HAS_CLIENT_TIER = 2580,
        HAS_PRESENTATION_TIER = 2581,
        PRODUCT_APPUNIT_INFO = 2662,
        LAYER = 2666,
        TEST_LAYER = 2667,
        BUILD_LAYER = 2668,
        IS_DISABLED = 2669,
        ADMIN_TIER = 2670,
        SERVER_TIER = 2671,
        CLIENT_TIER = 2672,
        PRESENTATION_TIER = 2673,
        IS_DIRECT_BUILD = 2674,
        INPUT_APPUNITS = 2675,
        IS_CMDLINE_TOOL = 2676,
        APPLICATION_TYPE = 2677,
        HAS_APISUPPORT_LAYER = 2678,
        HAS_NO_BOOT_SCHEMA = 2679,
        IS_INTERACTIVE_ONLY = 2680,
        IS_STANDALONE = 2681,
        IS_SINGLE_PHYSICAL_TIER = 2682,
        PRODUCT_SCHEMA = 2683,
        TWAppProductTierFilter = 2684,
        TWAppProductToolKitFilter = 2685,
        TWAppProductTargetFilter = 2686,
    };

    enum class eTWAPPGEN_API : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWAPPGEN_API (527))

        NAME = 677,
        PARENT = 678,
        API_HANDLER = 2688,
        IS_BOOTSTRAP = 2689,
        REQ_OBJECT_SCHEMA = 2690,
        RESP_OBJECT_SCHEMA = 2691,
        REQ_CONTEXT_OBJECT_SCHEMA = 2692,
        RESP_CONTEXT_OBJECT_SCHEMA = 2693,
    };

    enum class eTWAPPGEN_APPCODE : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWAPPGEN_APPCODE (528))

        VALUE = 17,
        NAME = 677,
        PARENT = 678,
        TYPE = 679,
        BUILD_CONDITION_VALUE = 2565,
        APP_CONDITION_VALUE = 2569,
    };

    enum class eTWAPPGEN_APPUNIT : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWAPPGEN_APPUNIT (529))

        NAME = 677,
        TYPE = 679,
        DEPENDS = 2556,
        IS_TEST = 2664,
        BUILD_LAYER = 2668,
        TIER_TYPE = 2696,
        USES = 2697,
        APPSIGNAL_HANDLER = 2698,
        TESTED_APPUNIT = 2699,
        CONSUMES_API = 2700,
        CONSUMES_SCHEMA = 2701,
    };

    enum class eTWQUALIFIED_VALUES : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWQUALIFIED_VALUES (530))

        VALUE = 17,
        QUALIFIER = 2703,
    };

    enum class eTWAPPGEN_APP_CONSTANT : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWAPPGEN_APP_CONSTANT (531))

        VALUE = 17,
        NAME = 677,
        PARENT = 678,
        TYPE = 679,
        QUALIFIED_VALUES = 2702,
        INDEX = 2705,
        IS_APPSTRING = 2706,
    };

    enum class eTWAPPGEN_APPCONSTANT_SCOPE : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWAPPGEN_APPCONSTANT_SCOPE (532))

        NAME = 677,
    };

    enum class eTWAPPGEN_APP_OPTION : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWAPPGEN_APP_OPTION (533))

        NAME = 677,
        PARENT = 678,
        DISABLED_PRODUCTS = 2709,
    };

    enum class eTWAPPGEN_APPOPTION_SCOPE : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWAPPGEN_APPOPTION_SCOPE (534))

        NAME = 677,
    };

    enum class eTWDBAnalyzerPayloadID : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWDBAnalyzerPayloadID (535))

        DBA_INPUT_FILE_NAME = 2711,
        DBA_OUTPUT_FILE_NAME = 2712,
    };

    enum class eTWIntegrationClientPayloadID : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWIntegrationClientPayloadID (536))

        FILE_PATH = 2713,
        FILE_TYPE = 2714,
        DB_OBJ = 2715,
    };

    enum class eTWDeviceIntegrationPayloadID : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWDeviceIntegrationPayloadID (537))

        DEVICE_NAME = 143,
    };

    enum class eTWEmployees : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWEmployees (538))

        Employee = 2717,
    };

    enum class eTWEmployee : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWEmployee (539))

        Name = 2718,
        Salary = 2719,
        Address = 2720,
        Nominee = 2721,
        Addresses = 2722,
        Details = 2723,
        HomeNum = 2724,
        OrgDetails = 2725,
        Skills = 2726,
    };

    enum class eTWNominee : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWNominee (540))

        Contact = 2727,
    };

    enum class eTWContact : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWContact (541))

        Contact_Number = 2728,
        Nominee_Name = 2729,
        Relationship = 2730,
    };

    enum class eTWAddress : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWAddress (542))

        line = 2731,
    };

    enum class eTWContact_Number : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWContact_Number (543))

        PhoneNo = 2732,
    };

    enum class eTWAddresses : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWAddresses (544))

        Details = 2723,
        Skills = 2726,
        HomeAddress = 2733,
        OfficeAddress = 2734,
    };

    enum class eTWHomeAddress : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWHomeAddress (545))

        Skills = 2726,
        line1 = 2735,
    };

    enum class eTWOfficeAddress : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWOfficeAddress (546))

        line2 = 2736,
    };

    enum class eTWOrgDetails : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWOrgDetails (547))

        Manager = 2737,
        Department = 2738,
    };

    enum class eTWPhoneNums : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWPhoneNums (548))

        HomeNum = 2724,
        OfficeNum = 2740,
    };

    enum class eTWDetails : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWDetails (549))

        Name = 2718,
        Salary = 2719,
        OrgDetails = 2725,
        Skills = 2726,
        PhoneNums = 2739,
        OfficeNum = 2740,
    };

    enum class eTWSkills : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWSkills (550))

        CSharp = 2741,
        Ubuntu = 2742,
    };

    enum class eTWINTEG_BILLING_OBJ : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWINTEG_BILLING_OBJ (551))

        Vouchers = 2744,
        Voucher = 2745,
        RevChargeApplicable = 2746,
        EcommerceGstin = 2747,
        DocumentDetails = 2748,
        DocumentType = 2749,
        DocumentNumber = 2750,
        DocumentDate = 2751,
        SellerGstin = 2752,
        LegalKey = 2753,
        TradeKey = 2754,
        SellerEmail = 2755,
        BuyerGstin = 2756,
        BuyerLegalKey = 2757,
        BuyerTradeKey = 2758,
        BuyerEmail = 2759,
        VoucherNum = 2760,
        VoucherDt = 2761,
        Items = 2762,
        Item = 2763,
        SequenceNumber = 2764,
        ItemDescription = 2765,
        HsnCode = 2766,
        BilledQuantity = 2767,
        UnitPrice = 2768,
        Calculations = 2769,
        Calculation = 2770,
        MethodName = 2771,
        FieldToCalculate = 2772,
        ParentField = 2773,
        DependentFields = 2774,
        Price = 2775,
        Quantity = 2776,
        Percent = 2777,
    };

    enum class eTWMAPPING_OBJ : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWMAPPING_OBJ (552))

        MappingInfo = 2779,
        Key = 2780,
        Level = 2781,
        Type = 2782,
        Parent = 2783,
        NewFields = 2784,
        NewField = 2785,
        FieldPath = 2786,
        AncestorPath = 2787,
        DependentFieldPath = 2788,
        XPath = 2789,
        MapsTo = 2790,
        MapLevel = 2791,
        EnclosingTagName = 2792,
        EnclosingTagMapLevel = 2793,
        EnclosingTagBegin = 2794,
        IsRepeated = 2795,
        Mapping = 2796,
    };

    enum class eTWSchemaDisplayObj : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWSchemaDisplayObj (553))

        Field = 2798,
    };

    enum class eTWField : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWField (554))

        Name = 2718,
        Level = 2781,
        AncestorPath = 2787,
        Repeated = 2799,
    };

    enum class eTWTSDataPublishingServicesObject : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWTSDataPublishingServicesObject (555))

        TW_RESPONSE_MESSAGE = 2437,
    };

    enum class eTWCuratorTISchemaS : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWCuratorTISchemaS (556))

        TI_DATA_SUMMARY = 2801,
        TI_TOTAL_DATA = 2802,
        TI_NEW_DATA = 2803,
        TI_CURATED_DATA = 2804,
        TI_PUBLISHED_DATA = 2805,
        TI_CURATION_STATUS_TEXT = 2806,
    };

    enum class eTWDSSchemaS : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWDSSchemaS (557))

        VERSION = 4,
        ID = 567,
        NAME = 677,
        DESCRIPTION = 712,
        SKU = 799, //(Alias of: BARCODE)
        MERCHANT_ID = 1125,
        TRIANGULATION_ID = 2807,
        TRIANGULATION_DETAILS = 2808,
        TO_BE_PUBLISHED = 2809,
        IS_BROADCASTED = 2810,
        SKU_OBJECT = 2811,
        CATALOGUE_ID = 2812,
        ATTRIBUTES = 2813,
        DS_SUMMARY = 2814,
        TI_DATA = 2815,
        SKU_DATA = 2816,
        TRANSACTION_DATA = 2817,
        SENDER = 2818,
        RECEIVER = 2819,
        TO_BE_TRIANGULATED = 2820,
        FILE = 2821,
    };

    enum class eTWClientDCElements : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWClientDCElements (558))

        STATUS = 1154,
        ITEM = 2383,
        FILE = 2821,
    };

    enum class eTWDSSchema : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWDSSchema (559))

        VERSION = 4,
        ID = 567,
        NAME = 677,
        DESCRIPTION = 712,
        SKU = 799, //(Alias of: BARCODE)
        MERCHANT_ID = 1125,
        TRIANGULATION_ID = 2807,
        TRIANGULATION_DETAILS = 2808,
        TO_BE_PUBLISHED = 2809,
        IS_BROADCASTED = 2810,
        SKU_OBJECT = 2811,
        CATALOGUE_ID = 2812,
        ATTRIBUTES = 2813,
        DS_SUMMARY = 2814,
        TI_DATA = 2815,
        SKU_DATA = 2816,
        TRANSACTION_DATA = 2817,
        SENDER = 2818,
        RECEIVER = 2819,
        TO_BE_TRIANGULATED = 2820,
        FILE = 2821,
        SCHEMA_DATATYPE = 2822,
        SKU_TITLE = 2824,
        TWDSCS_CLUSTR_ID = 2825,
        TWDSCS_CLUSTR_ID_GENERATION_TIME = 2826,
        XXX_CLUSTR_ID_PROCUREMENT_FLAG = 2827,
    };

    enum class eTWDSSchemaModule : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWDSSchemaModule (560))

        UNKNOWN = 0,
        DSMODULE1 = 2823,
    };

    enum class eTWSCHEMA_OBJ : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWSCHEMA_OBJ (561))

        DUMMY = 2499,
    };

    enum class eTWSKU_OBJ : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWSKU_OBJ (562))

        ID = 567,
        NAME = 677,
    };

    enum class eTWTRANSACTION_OBJ : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWTRANSACTION_OBJ (563))

        ID = 567,
        MERCHANT_ID = 1125,
        SKU_OBJECT = 2811,
        TO_BE_TRIANGULATED = 2820,
    };

    enum class eTWTI_OBJ : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWTI_OBJ (564))

        TO_BE_PUBLISHED = 2809,
        IS_BROADCASTED = 2810,
        SKU_OBJECT = 2811,
        TRANSACTION = 2828,
        OBJ_ID = 2833,
        CURATION_STATUS = 2834,
    };

    enum class eTWXXX_TWDSCS_SKU : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWXXX_TWDSCS_SKU (565))

        SKU_TITLE = 2824,
    };

    enum class eTWXXX_TWDSCS_CLUSTR_TEMP_ID : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWXXX_TWDSCS_CLUSTR_TEMP_ID (566))

        TWDSCS_CLUSTR_ID = 2825,
        TWDSCS_CLUSTR_ID_GENERATION_TIME = 2826,
    };

    enum class eTWXXX_TWDSSC_EXTERNAL_SKU_ENTITY_OBJ : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWXXX_TWDSSC_EXTERNAL_SKU_ENTITY_OBJ (567))

        XXX_TWDSCS_SKU = 2835,
        XXX_TWDSCS_CLUSTR_TEMP_ID = 2836,
        XXX_TWDSCS_SKU_DUID = 2838,
        XXX_TWDSCS_SKU_OBJID = 2839,
        XXX_TWDSCS_CLUSTR_ID_PROCUREMENT_FLAG = 2840,
        XXX_TRANSACTION_PROCESSED_STATE = 2841,
    };

    enum class eTWXXX_TRANSACTION_DETAILS : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWXXX_TRANSACTION_DETAILS (568))

        XXX_TRANSACTION_DATE = 2843,
        XXX_TRANSACTION_ID = 2844,
    };

    enum class eTWXXX_TWDSCS_TRANSACTIONS_OBJ_ORDER_DETAIL : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWXXX_TWDSCS_TRANSACTIONS_OBJ_ORDER_DETAIL (569))

        XXX_TWDSCS_TRANSACTIONS_OBJ_QTY = 2846,
    };

    enum class eTWXXX_TWDSCS_TRANSACTIONS_OBJ : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWXXX_TWDSCS_TRANSACTIONS_OBJ (570))

        XXX_TWDSSC_EXTERNAL_SKU_ENTITY_OBJ = 2837,
        XXX_TRANSACTION_PROCESSED_STATE = 2841,
        XXX_TWDSCS_TRANSACTIONS_OBJ_ORDER_DETAIL = 2845,
    };

    enum class eTWXXX_TWDSCS_TRANSACTIONS : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWXXX_TWDSCS_TRANSACTIONS (571))

        XXX_TRANSACTION_PROCESSED_STATE = 2841,
        XXX_TRANSACTION_DETAILS = 2842,
        XXX_TWDSCS_TRANSACTIONS_OBJ = 2847,
    };

    enum class eTWXXX_TWDSCS_MAPPED_SKU_WITH_STATUS : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWXXX_TWDSCS_MAPPED_SKU_WITH_STATUS (572))

        XXX_TWDSCS_SKU_OBJECT_ID = 2850,
        XXX_TWDSCS_SKU_MAPPING_STATUS = 2851,
    };

    enum class eTWXXX_TWDSCS_MAPPED_EXTERNAL_SKUS : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWXXX_TWDSCS_MAPPED_EXTERNAL_SKUS (573))

        XXX_TWDSCS_MAPPED_SKU_WITH_STATUS = 2849,
        XXX_TWDSCS_EXTERNAL_SKU_DUID = 2853,
    };

    enum class eTWXXX_TWDSCS_LOCAL_SKU_ENTITY_OBJ : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWXXX_TWDSCS_LOCAL_SKU_ENTITY_OBJ (574))

        XXX_CLUSTR_ID_PROCUREMENT_FLAG = 2827,
        XXX_TWDSCS_SKU = 2835,
        XXX_TWDSCS_CLUSTR_TEMP_ID = 2836,
        XXX_TWDSCS_SKU_MAPPING_STATUS = 2851,
        XXX_TWDSCS_MAPPED_EXTERNAL_SKUS = 2852,
    };

    enum class eTWXXX_TWDSCS_INCOMING_TRANSACTED_OBJ : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWXXX_TWDSCS_INCOMING_TRANSACTED_OBJ (575))

        XXX_TWDSSC_EXTERNAL_SKU_ENTITY_OBJ = 2837,
        XXX_TWDSCS_MAPPED_SKU_WITH_STATUS = 2849,
        XXX_TWDSCS_SKU_MAPPING_STATUS = 2851,
    };

    enum class eTWXXX_TWDSCS_EXTERNAL_SKU_EXTERNALOBJID_LOCAlOBJID_PAIR : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWXXX_TWDSCS_EXTERNAL_SKU_EXTERNALOBJID_LOCAlOBJID_PAIR (576))

        XXX_TWDSCS_EXTERNAL_SKU_EXTERNAL_OBJID = 2857,
        XXX_TWDSCS_EXTERNAL_SKU_LOCAl_OBJID = 2858,
    };

    enum class eTWXXX_TWDSCS_EXTERNAL_SKU_MAPPED : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWXXX_TWDSCS_EXTERNAL_SKU_MAPPED (577))

        XXX_TWDSCS_EXTERNAL_SKU_EXTERNALOBJID_LOCAlOBJID_PAIR = 2856,
    };

    enum class eTWXXX_TWDSCS_EXTERNAL_SKU_UNMAPPED : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWXXX_TWDSCS_EXTERNAL_SKU_UNMAPPED (578))

        XXX_TWDSCS_EXTERNAL_SKU_EXTERNALOBJID_LOCAlOBJID_PAIR = 2856,
    };

    enum class eTWXXX_TWDSCS_EXTERNAL_DUID_OBJID_OBJ : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWXXX_TWDSCS_EXTERNAL_DUID_OBJID_OBJ (579))

        XXX_TWDSCS_EXTERNAL_SKU_MAPPED = 2859,
        XXX_TWDSCS_EXTERNAL_SKU_UNMAPPED = 2860,
        XXX_TWDSCS_SENDER_MERCHANT_DUID = 2862,
    };

    enum class eTWCuratorTISchema : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWCuratorTISchema (580))

        TI_DATA_SUMMARY = 2801,
        TI_TOTAL_DATA = 2802,
        TI_NEW_DATA = 2803,
        TI_CURATED_DATA = 2804,
        TI_PUBLISHED_DATA = 2805,
        TI_CURATION_STATUS_TEXT = 2806,
    };

    enum class eTWCURATOR_TI_OBJ : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWCURATOR_TI_OBJ (581))

        OBJID = 45,
        CURATION_STATUS = 2834,
        SKU_SURVIVOR_ID = 2867,
        SKU_ALIASES = 2868,
    };

    enum class eTWCURATOR_TI_OBJ2 : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWCURATOR_TI_OBJ2 (582))

        CURATION_STATUS = 2834,
        SKU_SURVIVOR_ID = 2867,
        SKU_ALIASES = 2868,
    };

    enum class eTWFULLNAME_COREOBJECT_TEST_OBJ : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWFULLNAME_COREOBJECT_TEST_OBJ (583))

        FIRSTNAME = 2871,
        LASTNAME = 2872,
    };

    enum class eTWTEST_EMBEDDED_OBJ : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWTEST_EMBEDDED_OBJ (584))

        FULLNAME_COREOBJECT_TEST_OBJ = 2870,
    };

    enum class eTWTEST_ADDRESS : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWTEST_ADDRESS (585))

        TEST_LINE1 = 2875,
        TEST_LINE2 = 2876,
        TEST_CITY = 2877,
        TEST_PIN = 2878,
    };

    enum class eTWTEST_COMPANY_DETAILS : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWTEST_COMPANY_DETAILS (586))

        TEST_ADDRESS = 2874,
        TEST_NAME = 2880,
        TEST_CONTACT = 2881,
    };

    enum class eTWTEST_EMPLOYEES : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWTEST_EMPLOYEES (587))

        TEST_NAME = 2880,
        TEST_DESIGNATION = 2883,
    };

    enum class eTWTEST_DESCRIBE_OBJECT : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWTEST_DESCRIBE_OBJECT (588))

        TEST_COMPANY_DETAILS = 2879,
        TEST_EMPLOYEES = 2882,
        TEST_TODAY_DATE = 2885,
    };

    enum class eTWCONTAINER_ID : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWCONTAINER_ID (589))

        REPEATED_INTEGER_ID = 2887,
    };

    enum class eTWTEST_DESCRIBE_OBJECT_ALL_TYPES : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWTEST_DESCRIBE_OBJECT_ALL_TYPES (590))

        CONTAINER_ID = 2886,
        BOOLEAN_ID = 2889,
        TRIVAL_ID = 2890,
        UNIVERSALID_ID = 2891,
        UNIVERSALAPPID_ID = 2892,
        INTEGER_ID = 2893,
        UINTEGER_ID = 2894,
        NUMBER64_ID = 2895,
        NUMBER128_ID = 2896,
        QNUMBER_ID = 2897,
        DATE_ID = 2898,
        TIME_ID = 2899,
        TIMEOFDAY_ID = 2900,
        TIMEOFDAYEX_ID = 2901,
        OBJID_ID = 2902,
        CONTENTURL_ID = 2903,
        STRING_ID = 2904,
    };

    enum class eTWCOREOBJECT_TEST_OBJ1 : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWCOREOBJECT_TEST_OBJ1 (591))

        COTEST_FILED_11 = 2906,
        COTEST_FILED_12 = 2907,
        COTEST_FILED_13 = 2908,
        COTEST_FILED_14 = 2909,
        COTEST_FILED_15 = 2910,
    };

    enum class eTWCOREOBJECT_TEST_OBJ2 : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWCOREOBJECT_TEST_OBJ2 (592))

        COTEST_FILED_21 = 2912,
        COTEST_FILED_22 = 2913,
        COTEST_FILED_23 = 2914,
        COTEST_FILED_24 = 2915,
        COTEST_FILED_25 = 2916,
    };

    enum class eTWCOREOBJECT_TEST_OBJ3 : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWCOREOBJECT_TEST_OBJ3 (593))

        COTEST_FILED_31 = 2918,
        COTEST_FILED_32 = 2919,
        COTEST_FILED_33 = 2920,
        COTEST_FILED_34 = 2921,
        COTEST_FILED_35 = 2922,
    };

    enum class eTWCOREOBJECT_TEST_OBJ4 : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWCOREOBJECT_TEST_OBJ4 (594))

        COTEST_FILED_41 = 2924,
        COTEST_FILED_42 = 2925,
        COTEST_FILED_43 = 2926,
        COTEST_FILED_44 = 2927,
        COTEST_FILED_45 = 2928,
    };

    enum class eTWCOREOBJECT_TEST_EMB : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWCOREOBJECT_TEST_EMB (595))

        COTEST_FILED1 = 2930,
    };

    enum class eTWTEST_DEPENDENT : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWTEST_DEPENDENT (596))

        TEST_NAME = 2880,
        TEST_RELATION = 2932,
    };

    enum class eTWTEST_EMPLOYEEADDRESS : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWTEST_EMPLOYEEADDRESS (597))

        TEST_LINE = 2934,
    };

    enum class eTWTEST_EMPLOYEE : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWTEST_EMPLOYEE (598))

        TEST_NAME = 2880,
        TEST_DEPENDENT = 2931,
        TEST_EMPLOYEEADDRESS = 2933,
        TEST_EMPLOYEEID = 2936,
        TEST_MOBILENUM = 2937,
    };

    enum class eTWSTUDENTSCHEMA : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWSTUDENTSCHEMA (599))

        NAME = 677,
    };

    enum class eTWTEST_OBJ : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWTEST_OBJ (600))

        BOOLID = 2940,
    };

    enum class eTWSTUDENTSCHEMAMETA : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWSTUDENTSCHEMAMETA (601))

        STUDENT_DETAILS = 2942,
    };

    enum class eTWTW_CORE_PROCESSMGR_TEST_API_SCHEMA : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWTW_CORE_PROCESSMGR_TEST_API_SCHEMA (602))

        TEST_INP_STRING = 2944,
    };

    enum class eTWGET_STUDENT_PERCENTAGE_REQUEST_SCHEMA : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWGET_STUDENT_PERCENTAGE_REQUEST_SCHEMA (603))

        STUDENT_ID = 2946,
    };

    enum class eTWGET_STUDENT_PERCENTAGE_RESPONSE_SCHEMA : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWGET_STUDENT_PERCENTAGE_RESPONSE_SCHEMA (604))

        STUDENT_ID = 2946,
        STUDENT_PERCENTAGE = 2948,
    };

    enum class eTWGET_STUDENT_PERCNTAGE_QUERY_SCHEMA : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWGET_STUDENT_PERCNTAGE_QUERY_SCHEMA (605))

        SOME_QUERY_RELATED_ID_1 = 2950,
    };

    enum class eTWGET_STUDENT_PERCENTAGE_SCRATCHPAD_SCHEMA : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWGET_STUDENT_PERCENTAGE_SCRATCHPAD_SCHEMA (606))

        SOME_SCRATCHPAD_RELATED_ID_2 = 2952,
        DONE = 2953,
    };

    enum class eTWGET_STUDENT_DETAIL_REQUEST_SCHEMA : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWGET_STUDENT_DETAIL_REQUEST_SCHEMA (607))

        STUDENT_ID = 2946,
    };

    enum class eTWGET_STUDENT_DETAIL_RESPONSE_SCHEMA : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWGET_STUDENT_DETAIL_RESPONSE_SCHEMA (608))

        STUDENT_ID = 2946,
        STUDENT_PERCENTAGE = 2948,
        STUDENT_NAME = 2956,
        STUDENT_AGE = 2957,
        STUDENT_SUBJECT_ID = 2958,
    };

    enum class eTWGET_STUDENT_DETAIL_QUERY_SCHEMA : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWGET_STUDENT_DETAIL_QUERY_SCHEMA (609))

        SOME_QUERY_RELATED_ID_3 = 2960,
    };

    enum class eTWGET_STUDENT_DETAIL_SCRATCHPAD_SCHEMA : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWGET_STUDENT_DETAIL_SCRATCHPAD_SCHEMA (610))

        SOME_SCRATCHPAD_RELATED_ID_4 = 2962,
    };

    enum class eTWSOMAPI_REQCONTEXT : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWSOMAPI_REQCONTEXT (611))

        FIELD1 = 2964,
    };

    enum class eTWSOMAPI_INPUT : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWSOMAPI_INPUT (612))

        FIELD1 = 2964,
    };

    enum class eTWSOMAPI_OUTPUT : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWSOMAPI_OUTPUT (613))

        FIELD1 = 2964,
    };

    enum class eTWMYSCRATCHPAD : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWMYSCRATCHPAD (614))

        FIELD1 = 2964,
    };

    enum class eTWSOMEAPI_SCRATCHPAD : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWSOMEAPI_SCRATCHPAD (615))

        FIELD1 = 2964,
    };

    enum class eTWGREETAPI_SCRATCHPAD_SCHEMA : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWGREETAPI_SCRATCHPAD_SCHEMA (616))

        NAME = 677,
        GREETMESSAGE = 2970,
    };

    enum class eTWFACTAPI_SCRATCHPAD_SCHEMA : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWFACTAPI_SCRATCHPAD_SCHEMA (617))

        NUMBER = 1769,
        VAL = 2972,
    };

    enum class eTWMULTITASKAPI_SCRATCHPAD_SCHEMA : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWMULTITASKAPI_SCRATCHPAD_SCHEMA (618))

        DATA = 2974,
    };

    enum class eTWMULTIACTIVITYAPI_SCRATCHPAD_SCHEMA : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWMULTIACTIVITYAPI_SCRATCHPAD_SCHEMA (619))

        CREATESTAGE = 2976,
    };

    enum class eTWScenario1ReadDB_SCHEMA : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWScenario1ReadDB_SCHEMA (620))

        DATA_KEY = 2978,
        DATA_DBID = 2979,
        DATA_OBJ = 2980,
        DATA_OBJS = 2981,
    };

    enum class eTWTW_CORE_COMMMGR_TEST_API_SCHEMA : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWTW_CORE_COMMMGR_TEST_API_SCHEMA (621))

        TEST_STR_FIELD = 2983,
        TEST_BOOL_FIELD = 2984,
    };

    enum class eTWDB_TEST_OBJ : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWDB_TEST_OBJ (622))

        NAME = 677,
    };

    enum class eTWSTUDENT_OBJ : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWSTUDENT_OBJ (623))

        NAME = 677,
    };

    enum class eTWMY_COMPANY_OBJ : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWMY_COMPANY_OBJ (624))

        NAME = 677,
    };

    enum class eTWDBTEST_EMBEDDED_OBJ : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWDBTEST_EMBEDDED_OBJ (625))

        FULLNAME = 2991,
    };

    enum class eTWFULLNAME : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWFULLNAME (626))

        FIRSTNAME = 2871,
        LASTNAME = 2872,
    };

    enum class eTWDATA_DC_TEST_OBJ : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWDATA_DC_TEST_OBJ (627))

        TWAPPFIELD1STRID = 2993,
        TWAPPFIELD2VERID = 2994,
        TWAPPFIELD3ISACTIVE = 2995,
        TWAPPFIELD4STRREPEATED = 2996,
        TWAPPFIELD5 = 2997,
    };

    enum class eTWTW_ADMIN_TEST_1 : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWTW_ADMIN_TEST_1 (628))

        TW_ADMIN_TEST_OBJ_1 = 3006,
    };

    enum class eTWTW_ADMIN_TEST_2 : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWTW_ADMIN_TEST_2 (629))

        TW_ADMIN_TEST_OBJ_2 = 3008,
    };

    enum class eTWTW_ADMIN_TEST_3 : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWTW_ADMIN_TEST_3 (630))

        TW_ADMIN_TEST_OBJ_3 = 3010,
    };

    enum class eTWTW_ADMIN_TEST_OBJ_3 : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWTW_ADMIN_TEST_OBJ_3 (631))

        TW_NAME = 3011,
        TW_ADDRESS = 3012,
        TW_STREET = 3013,
    };

    enum class eTWTEST_NFW_SCP : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWTEST_NFW_SCP (632))

        TW_EVENT_COMPLETED = 3015,
        TW_PREMISE_START_FROM = 3016,
        TW_PREMISE_RESULT = 3017,
        TW_PREMISE_TEST_QUERY_ID = 3018,
        TW_SOME_STRING_DATA = 3019,
        TW_SOME_INT_DATA = 3020,
        TW_SOME_OBJ_DATA = 3021,
    };

    enum class eTWTEST_ADMIN_SERVICES : BaseType { //(CATEGORY: eTWSchemaIDCategory::eTWTEST_ADMIN_SERVICES (633))

        TEST_ADMIN_TW_QUERY_ID = 3023,
        TEST_ADMIN_TW_LANGUAGE_LIST = 3024,
    };
    


    eTWSchemaID() = default;
    constexpr eTWSchemaID(Enum pID) : vID(pID) {}
    /*
    constexpr eTWSchemaID(eTWSchemaDCSection pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWSchemaObjType pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWDERIVED_SCHEMA pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWDERIVED_SCHEMA_SECTION pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWDERIVED_SCHEMA_OBJECT pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWDERIVED_SCHEMA_OBJ_FIELD pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWOBJECT_LIST pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWHASH_OBJECT pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWINDEX_OBJECT pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWAMOUNT pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWQUANTITY pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWRATEX pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWDATERANGE pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWTIMERANGE pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWHASHKEY_EXTENDED pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWHASHSUBOBJECT pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWBASE_HASH_OBJECT pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWLRUTIMER_PROPERTIES pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWID_PROPERTIES pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWHASHID_PROPERTIES pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWHASHINDEX_PROPERTIES pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWHASHSTRINGINDEX_PROPERTIES pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWHASHAGGR_PROPERTIES pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWDATA_PROPERTIES pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWDS_PROPERTIES pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWDC_PROPERTIES pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWDCMGR_PROPERTIES pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWINDEX_VALUE pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWTIME_INDEX_VALUE pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWREFID_INDEX_VALUE pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWSTRING_INDEX_VALUE pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWTIME_FILTER_DETAIL pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWINDEX_ELEM_FILTER_DETAIL pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWINDEX_ELEM pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWAPPLICATION_SESSION_OBJ pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWAPPLICATION_PATHS_OBJ pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWAPPLICATION_PARMS_OBJ pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWAPPLICATION_TWIN_OBJ pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWSTART_WINDOW_REQDATA pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWHANDOVER_TWIN_REQDATA pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWCOREDISKIO_OPERATION_REQ_PARMS pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWCOREDISKIO_OPERATION_RESP_PARMS pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWHANDLE_DISKIO_REQ_DATA pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWHANDLE_DISKIO_RESP_DATA pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWCONSUME_COMPLETE_HANDOVER_BY_TWIN_REQDATA pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWDC_COMPANY_OBJ pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWEVENT_STAGE_REQUESTCONTEXT_SCHEMA pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWTWEVENT_OBJ pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWINDIRECT_ROUTE_OBJ pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWWIP_STEP pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWDIRECT_ROUTE_OBJ pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWOTHER_DIRECT_IPIDS pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWDEST_OBJ pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWIOROOT_OBJ pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWTAF_FILE_INFO pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWDB_INFO pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWIOBASEPATH_OBJ pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWTAF_RUNNING_INFO pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWTAF_FILE_DATA pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWTWDC_SECTION_METADATA_SCHEMA pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWTWDC_METADATA_SCHEMA pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWVERSION_OBJECT pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWTWAPI_IS_DUPLICATE_DUID_REQ_OBJ_ID pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWTWAPI_IS_DUPLICATE_DUID_RESP_OBJ_ID pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWOPEN_DB_REQUEST pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWOPENDB_SCRATCHPAD pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWTAF_COORDINATION_REQUEST pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWVERSIONED_DS_BASE_REQUEST pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWVERSIONED_DS_BASE_SCRATCHPAD pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWVERSIONED_DS_VERSION_REQUEST pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWVERSIONED_DS_VERSION_SCRATCHPAD pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWVERSIONED_DS_HASHID_REQUEST pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWVERSIONED_DS_HASHID_SCRATCHPAD pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWVERSIONED_DS_OBJECT_REQUEST pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWVERSIONED_DS_OBJECT_SCRATCHPAD pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWVERSIONED_DS_INDEX_SCRATCHPAD pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWVERSIONED_DS_ITERATOR_REQUEST pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWVERSIONED_DS_ITERATOR_SCRATCHPAD pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWDS_ITERATOR_OBJECT_KEY pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWITERATOR_OBJECT pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWWIP_LIST pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWQUERY_SCRATCHPAD pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWQUERY_RANGE_DATA pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWQUERY_OBJECT pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWPRIMARY_QUERY_HASHKEY pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWFILTER_QUERY_HASHKEY pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWRIGHTS_QUERY_HASHKEY pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWSORTED_QUERY_HASHKEY pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWPRIMARY_QUERY pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWFILTER_SUB_QUERY pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWRIGHTS_SUB_QUERY pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWSORTING_SUB_QUERY pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWINDIVIDUAL_QUERY pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWCOMPOUND_QUERY pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWREQUEST pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWBizSchema pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWContactDetails pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWGSTDetails pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWGroupInformation pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWGroupStatutoryAndTaxationInformation pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWGroupGSTDetails pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWGroupTDSDetails pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWGroupTCSDetails pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWGroupServiceTaxDetails pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWGroupExciseTariffDetails pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWLedgerInformation pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWLedgerStatutoryAndTaxationInformation pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWLedgerExciseDetails pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWLedgerGSTDetails pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWLedgerServiceTaxDetails pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWLedgerTDSDetails pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWLedgerTCSDetails pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWLedgerBankAccountDetails pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWLedgerBankingConfiguration pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWLedgerInterestCalculationDetails pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWLedgerContactDetails pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWLedgerPaymentDetails pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWCostCategoryInformation pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWCostCentreInformation pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWCurrencyInformation pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWExchangeRateInformation pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWBudgetInformation pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWStockGroupInformation pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWStockCategoryInformation pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWStockItemInformation pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWStockItemAttributes pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWStationeryAttributes pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWBooksAttributes pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWPharmaceuticalAttributes pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWConsumerDurablesAttributes pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWConstructionMaterial pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWStockItemDutiesAndTaxes pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWGSTRateDetails pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWVATRateDetails pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWUOMInformation pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWLocationInformation pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWEmployeeCategoryInformation pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWEmployeeGroupInformation pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWEmployeeInformation pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWStatutoryDeatils pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWPassportAndVisaDetails pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWContractDetails pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWEmployeeContactDetails pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWEmployeeBankAccountDetails pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWEmployeeSalaryDetails pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWPayHeadInformation pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWBankAccountDetails pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWGSTRegistrationDetails pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWIncomeTaxDetails pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWUBLInvoiceDetails pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWOrderReference pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWInvoiceDocumentReference pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWDespatchAdviceReference pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWReceiptAdviceReference pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWContractReference pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWSeller pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWBuyer pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWDeliveryInformation pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWBatchAllocation pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWBankRelatedDetails pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWInvTransactionDetails pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWInvDocumentDetails pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWInvExportDetails pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWInvSellerDetails pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWInvBuyerDetails pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWInvDespatchDetails pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWInvShippingDetails pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWInvInvoiceValues pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWInvItemDetails pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWInvPaymentDetails pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWProductInformation pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWProductAttributes pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWStationeryProductAttributes pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWBooksProductAttributes pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWPharmaceuticalProductAttributes pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWConsumerDurablesProductAttributes pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWConstructionMaterialProductAttributes pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWProductDutiesAndTaxes pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWProductGSTRateDetails pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWProductVATRateDetails pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWBrandInformation pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWEnergyConsumptionDetails pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWMerchantReturnPolicy pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWVehicleInformation pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWOwnershipInformation pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWServiceInformation pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWPermitInformation pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWBedDetails pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWDimensions pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWMeasurement pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWPersonDetails pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWPersonalContactDetails pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWOccupationInformation pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWVoucher pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWTransactionDetails pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWVoucherOrderDetails pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWVoucherOriginalInvoiceDetails pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWVoucherExportDetails pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWVoucherImportDetails pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWVouchereWayBillDetails pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWeWayBillCONSIGNEEDetails pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWeWayBillCONSIGNORDetails pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWeWayBillTransporterDetails pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWeWayBillProductDetails pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWeWayBillDocumentTotalDetails pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWVoucherPartyDocumentDetails pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWVoucherProcessInstruction pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWVoucherAttendance pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWVoucherReferenceDetails pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWVoucherTransporterDetails pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWDespatchDetails pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWVoucherBillToDetails pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWVoucherShipToDetails pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWVoucherBillFromDetails pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWVoucherDispatchFromDetails pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWVoucherReceiptDetails pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWVoucherExciseDetails pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWVoucherInventoryDetails pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWVoucherVATDetails pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWVoucherGSTDetails pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWVoucherBillWiseDetails pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWVoucherEInvoiceDetails pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWVoucherItemAllocationsDetails pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWSellerDetails pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWBuyerDetails pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWInvoiceValues pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWPaymentDetails pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWDenomination pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWPOSDetails pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWLedgerEntry pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWLedgerVATInfo pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWLedgerGSTInfo pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWBillAllocations pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWCostCentreAllocations pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWCostCategoryAllocations pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWVoucherValueDetails pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWCompanyInformation pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWCompanyAddress pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWCompanyStatutoryInformation pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWCompanyGSTDetails pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWCompanyEwaybill pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWCompanyEinvoice pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWSingaporeGSTDetails pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWCompanyExciseDetails pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWExciseConctDetails pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWRG23DDetails pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWTariffDetails pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWJurisdictionDetails pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWCompanyVATDetails pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWAdditionalVATDetails pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWBahrainVATDetails pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWSaudiVATDetails pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWUKVATDetails pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWPhilippinesVATDetails pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWNepalVATDetails pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWKenyaVATDetails pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWAdditionalKenyaVATDetails pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWInodonesiaVATDetails pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWGhanaVATDetails pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWBotswanaVATDetails pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWBangladeshVATDetails pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWUAEVATDetails pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWOmanVATDetails pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWPayrollStatutoryDetails pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWProvidentFund pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWEmployeeStateInsurance pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWNationalPensionScheme pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWIncomeTax pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWTCSDetails pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWCompanyTCSCollectorDetails pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWPersonResponsibleForTCS pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWSurchargeAndCessDetailsForTCS pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWTDSDetails pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWCompanyTDSDeductorDetails pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWPersonResponsibleForTDS pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWSurchargeAndCessDetailsForTDS pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWForm24QeTDS pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWForm24QDeductorDetails pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWForm24QPersonResponsible pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWFormTaxPaidtoCentralGov pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWAnnexIDeducteeWiseBreakUp pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWAnnexIIDeducteeWiseBreakUp pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWForm26QeTDS pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWForm26QDeductorDetails pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWForm26QPersonResponsible pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWForm26QTaxPaidtoCentralGov pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWAnnexI26QDeducteeWiseBreakUp pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWForm27QeTDS pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWForm27QDeductorDetails pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWForm27QPersonResponsible pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTW27QTaxPaidtoCentralGov pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWAnnexI27QDeducteeWiseBreakUp pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWForm27EQeTDS pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWForm27EQCOLLECTORDetails pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWForm27EQPersonResponsible pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTW27EQTaxPaidtoCentralGov pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWAnnexI27EQPartyWiseBreakUp pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWForm27AeTDS pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWForm27ADetails pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWForm27APersonResponsible pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWForm27ACONTROL pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWMCASchema pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWMCAAcquisitions pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWMCAAuiditorInformation pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWMCABorrowingInformation pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWMCAComponents pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWMCAEmployeeBenefits pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWMCAImpairmentDetails pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWMCAImpairment pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWMCAInventories pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWMCALoansAndAdvances pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWMCAOtherProvisions pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWMCAProductProperties pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWMCAProductServices pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWMCARawMaterials pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWMCASegement pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWMCAShareholders pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWXBRL pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWXBRLAmalgamation pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWXBRLDetails pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWXBRLAuditorDetail pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWXBRLDebentureDetail pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWXBRLGoodsDetail pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWXBRLDirectorsRemuneration pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWXBRLForeignBankBalanceDetails pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWXBRLInvestmentAssociates pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWXBRLInvestmentJV pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWXBRLMSME pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWXBRLOtherDisclosures pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWXBRLPrimarySegmentDetail pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWXBRLRawMaterialCons pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWXBRLRelatedPartyTransaction pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWXBRLXBRLSecSegDetail pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWXBRLXBRLShareCapital pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWXBRLShareCapitalClassDetails pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWXBRLDirectorDetail pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWXBRLSubsidiaryInfo pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWScheduleVI pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWScheduleVIBorrowings pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWScheduleVIFixedAssets pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWScheduleVIInvestments pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWScheduleVIShareCapitalDetails pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWShareHoldersFunds pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWShareByOtherCompany pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWShareHolderShares pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWAggregatedShares pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWUNI_SCHEMA pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWUNI_SCHEMA_ENUM pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWUNI_SCHEMA_CONSTANT pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWUNI_CONTENT_SCHEMA_PROPERTIES pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWUNI_CONTAINER_CONTENT pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWUNI_CONTENT_SCHEMA pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWAPP_SCHEMA_METADATA pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWCoreUISchema pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWUIElementType pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWUIPropertyType pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWUISampleTemplates pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWUICompanySchemaFields pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWUILabelType pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWUIPositionType pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWUIEventsType pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWUICallBackEventData pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWUIDimensionType pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWBorderStyle pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWFontFamily pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWScreenOrientationType pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWUIResponsivenessData pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWClientCommandFieldID pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWClientCommand pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWClientActionFieldID pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWSchemaObjectFields pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWClientSchemaFieldID pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWPANIC_OBJECT pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWUI_POSITION pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWUI_DIMENSION pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWUI_PADDING pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWUI_BORDER pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWALIGNMENT pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWUI_FONT pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWWINDOW pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWPAGE pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWPANE pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWPART pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWUIFORM pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWUIREPORT pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWLINE pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWUIFIELD pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWLABEL pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWBUTTON pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWTEXTEDIT pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWLIST pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWUI_TEMPLATE_WELCOME_MESSAGE pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWUI_TEMPLATE_MENU_LIST pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWMENU_ENTRY pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWUI_TEMPLATE_REPORT_VIEW pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWREPORT_HEADER pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWREPORT_COLUMN pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWUI_TEMPLATE_FORM pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWFORM_ENTRY pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWFIELD_VALIDATE_PARMS pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWADDITIONAL_BUTTONS pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWUI_TEMPLATE_COMPOUND_VIEW pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWSCREEN pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWSCREEN_LIST pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWDC_LIST pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWZONE pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWROW pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWCELL pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWCONSOLE_COMM_PARMS pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWAPPLICATION_GATEWAY_OF_TALLY_OBJ pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWGATEWAY_REPORTS pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWIDC_ADDITIONAL_INFO pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWFRAME_PAGE_OBJECT pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWPANE_OBJECT_ID pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWPRESENTATION_RENDER_WINDOW_REQUEST_SCHEMA pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWPRESENTATION_PROCESS_LAYOUT_REQUEST_SCHEMA pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWPRESENTATION_LAUNCH_RUNTIME_WINDOW_REQUEST_SCHEMA pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWPRESENTATION_CREATE_STARTUP_WINDOW_REQUEST_SCHEMA pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWPRESENTATION_CLOSE_APP_WINDOW_REQUEST_SCHEMA pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWPRESENTATION_PROCESS_EVENTS_REQUEST_SCHEMA pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWPRESENTATION_INTERNAL_UI_EVENT_RESPONSE_SCHEMA pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWQueryDC pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWBootstrapFormIDs pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWLoginFormIDs pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWTW_ADMINDC_LANG_OBJ pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWTW_ADMINDC_QUERY_OBJ pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWTW_APP_PREFS_OBJECT pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWTW_YOGINI_BS_FILE_OBJECT pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWTW_LANGUAGE_LIST pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWTW_UNIVERSE_SUPERUSERS pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWTW_UNIVERSE_SUPERUSER pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWTW_APP_CURRENT_LANGUAGE_OBJ pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWSCHEMA_GET_LANGUAGES pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWLANGUAGE_OBJ pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWTW_QUERY_SCHEMA pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWSchemaCompanyType pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWTW_SERVERDC_QUERY_ID pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWLEDGER_OBJECT pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWAUTHENTICATED_USER_OBJECT pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWLEDGER_OBJECT_EXT pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWCOMPANY_OBJECT pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWPATH_OBJECT pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWMESSAGE_OBJECT pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWOPEN_COMPANY_LIST_OBJ pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWClientPlatform pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWDITOBJECT pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWUSEROBJECT pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWRESERVEOBJECT pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWIPV4OBJECT pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWTW_CLIENT_QUERY_OBJ pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWPresentationCommSchema pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWTW_TS_CONFIG_API_SCHEMA pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWTW_TS_CONFIG_RESP_API_SCHEMA pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWTSRealmServicesObject pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWPING_SCRATCHPAD_SCHEMA pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWQueryLanguage pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWPREMISE_BOOTSTRAP_REQ_SCHEMA pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWIPID_AND_ITS_STATUS pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWPREMISE_FETCH_IPIDS_RESP_SCHEMA pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWLOGINHANDLER_REQ_SCHEMA pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWYOGINI_BOOTSTRAPHANDLER_REQ_SCHEMA pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWPREMISE_ADMINQUERY_REQ_SCHEMA pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWPREMISE_LANGUAGEHANDLER_REQ_SCHEMA pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWPREMISE_ADMINQUERY_CONTEXT_SCHEMA pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWPREMISE_LANGUAGEQUERY_RESP_SCHEMA pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWUIYoginiSchemaFields pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWUIFileProperty pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWYoginiQueryDCExtensions pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWYOGINI_OPENPRAJAPATIDB_REQ_SCHEMA pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWYOGINI_ADDPRAJAPATIIP_REQ_SCHEMA pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWYOGINI_DELETEPRAJAPATIIP_REQ_SCHEMA pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWYOGINI_SHOWPRAJAPATIIPS_REQ_SCHEMA pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWYOGINI_SHOWPRAJAPATIIPS_RESP_SCHEMA pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWTW_LIST_OF_PRAJAPATI_IPS pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWTW_SITE_CONFIG_API_SCHEMA pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWTW_SITE_CONFIG_RESP_API_SCHEMA pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWKSHETRAPAL_OPENFILE_REQ_SCHEMA pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWDIT_OBJECT pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWTW_LIST_OF_USER_IDS pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWPremisServerAPIFields pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWPremiseServerFeaturesPayloadID pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWPremiseClientFeaturesPayloadID pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWPremiseClientPayloadID pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWSchemaPropertiesObjectType pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWClientDCCommands pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWCDC_AUTHENTICATED_USER_OBJ pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWCDC_COMPANY_DETAILS_OBJ pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWCDC_USER_OBJ pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWCDC_COMPANY_OBJ pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWUSER_DEF_PATH_OBJ pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWCDC_UI_OBJ pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWCLIENT_CONNECTREQUEST_REQ_SCHEMA pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWCLIENT_CONNECTREQUEST_RESP_SCHEMA pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWCLIENT_DISCONNECTREQUEST_REQ_SCHEMA pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWSOURCE_UNI_SCHEMA pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWSOURCE_UNI_SCHEMA_ENUM pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWSOURCE_UNI_SCHEMA_CONSTANT pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWSOURCE_CONTENT_SCHEMA_PROPERTIES pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWSOURCE_CONTAINER_CONTENT pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWSOURCE_CONTENT_SCHEMA pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWTWCMakePresetCacheVar pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWTWCMakePresetEnvVar pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWTWCMakeVSSVendorVar pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWTWCMakeVSRSVendorVar pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWTWToolChainFlags pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWTWHostToolChainFlags pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWBUILDGEN_OS pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWBUILDGEN_KERNEL pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWBUILDGEN_ARCH pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWBUILDGEN_PRESET pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWBUILDGEN_CMAKE_PRESET pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWBUILDGEN_CONFIG pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWBUILDGEN_STAGE pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWBUILDGEN_TRUNK pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWBUILD_CONDITION_VALUE pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWAPP_CONDITION_VALUE pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWBUILDGEN_LAYER pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWBUILDGEN_CMAKE_TARGET pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWAPPGEN_GENFILE_ASYNC_PARMS pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWAPPGEN_WORKSPACE pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWTWBuildLayer pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWAPPGEN_USER_CONFIG pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWAPPGEN_CONFIG pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWAPPGEN_CMDLINE pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWPRODUCT_APPUNIT_INFO pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWAPPGEN_PRODUCT pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWAPPGEN_API pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWAPPGEN_APPCODE pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWAPPGEN_APPUNIT pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWQUALIFIED_VALUES pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWAPPGEN_APP_CONSTANT pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWAPPGEN_APPCONSTANT_SCOPE pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWAPPGEN_APP_OPTION pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWAPPGEN_APPOPTION_SCOPE pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWDBAnalyzerPayloadID pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWIntegrationClientPayloadID pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWDeviceIntegrationPayloadID pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWEmployees pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWEmployee pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWNominee pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWContact pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWAddress pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWContact_Number pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWAddresses pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWHomeAddress pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWOfficeAddress pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWOrgDetails pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWPhoneNums pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWDetails pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWSkills pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWINTEG_BILLING_OBJ pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWMAPPING_OBJ pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWSchemaDisplayObj pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWField pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWTSDataPublishingServicesObject pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWCuratorTISchemaS pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWDSSchemaS pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWClientDCElements pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWDSSchema pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWDSSchemaModule pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWSCHEMA_OBJ pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWSKU_OBJ pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWTRANSACTION_OBJ pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWTI_OBJ pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWXXX_TWDSCS_SKU pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWXXX_TWDSCS_CLUSTR_TEMP_ID pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWXXX_TWDSSC_EXTERNAL_SKU_ENTITY_OBJ pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWXXX_TRANSACTION_DETAILS pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWXXX_TWDSCS_TRANSACTIONS_OBJ_ORDER_DETAIL pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWXXX_TWDSCS_TRANSACTIONS_OBJ pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWXXX_TWDSCS_TRANSACTIONS pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWXXX_TWDSCS_MAPPED_SKU_WITH_STATUS pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWXXX_TWDSCS_MAPPED_EXTERNAL_SKUS pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWXXX_TWDSCS_LOCAL_SKU_ENTITY_OBJ pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWXXX_TWDSCS_INCOMING_TRANSACTED_OBJ pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWXXX_TWDSCS_EXTERNAL_SKU_EXTERNALOBJID_LOCAlOBJID_PAIR pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWXXX_TWDSCS_EXTERNAL_SKU_MAPPED pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWXXX_TWDSCS_EXTERNAL_SKU_UNMAPPED pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWXXX_TWDSCS_EXTERNAL_DUID_OBJID_OBJ pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWCuratorTISchema pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWCURATOR_TI_OBJ pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWCURATOR_TI_OBJ2 pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWFULLNAME_COREOBJECT_TEST_OBJ pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWTEST_EMBEDDED_OBJ pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWTEST_ADDRESS pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWTEST_COMPANY_DETAILS pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWTEST_EMPLOYEES pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWTEST_DESCRIBE_OBJECT pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWCONTAINER_ID pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWTEST_DESCRIBE_OBJECT_ALL_TYPES pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWCOREOBJECT_TEST_OBJ1 pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWCOREOBJECT_TEST_OBJ2 pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWCOREOBJECT_TEST_OBJ3 pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWCOREOBJECT_TEST_OBJ4 pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWCOREOBJECT_TEST_EMB pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWTEST_DEPENDENT pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWTEST_EMPLOYEEADDRESS pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWTEST_EMPLOYEE pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWSTUDENTSCHEMA pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWTEST_OBJ pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWSTUDENTSCHEMAMETA pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWTW_CORE_PROCESSMGR_TEST_API_SCHEMA pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWGET_STUDENT_PERCENTAGE_REQUEST_SCHEMA pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWGET_STUDENT_PERCENTAGE_RESPONSE_SCHEMA pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWGET_STUDENT_PERCNTAGE_QUERY_SCHEMA pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWGET_STUDENT_PERCENTAGE_SCRATCHPAD_SCHEMA pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWGET_STUDENT_DETAIL_REQUEST_SCHEMA pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWGET_STUDENT_DETAIL_RESPONSE_SCHEMA pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWGET_STUDENT_DETAIL_QUERY_SCHEMA pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWGET_STUDENT_DETAIL_SCRATCHPAD_SCHEMA pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWSOMAPI_REQCONTEXT pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWSOMAPI_INPUT pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWSOMAPI_OUTPUT pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWMYSCRATCHPAD pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWSOMEAPI_SCRATCHPAD pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWGREETAPI_SCRATCHPAD_SCHEMA pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWFACTAPI_SCRATCHPAD_SCHEMA pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWMULTITASKAPI_SCRATCHPAD_SCHEMA pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWMULTIACTIVITYAPI_SCRATCHPAD_SCHEMA pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWScenario1ReadDB_SCHEMA pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWTW_CORE_COMMMGR_TEST_API_SCHEMA pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWDB_TEST_OBJ pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWSTUDENT_OBJ pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWMY_COMPANY_OBJ pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWDBTEST_EMBEDDED_OBJ pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWFULLNAME pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWDATA_DC_TEST_OBJ pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWTW_ADMIN_TEST_1 pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWTW_ADMIN_TEST_2 pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWTW_ADMIN_TEST_3 pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWTW_ADMIN_TEST_OBJ_3 pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWTEST_NFW_SCP pID) : vID((Enum)pID) {}
    constexpr eTWSchemaID(eTWTEST_ADMIN_SERVICES pID) : vID((Enum)pID) {}
    */

    Enum        EnumVal() const noexcept { return vID; }
    BaseType    IntVal() const noexcept { return (BaseType)vID; }

    //void        SetIntVal(eTWUS::BaseType pID) noexcept { vID = (Enum)(BaseType)pID; }

    constexpr      operator Enum () const { return vID; }
    constexpr bool operator == (const eTWSchemaID pID) const { return (vID == pID.vID); }
    constexpr bool operator == (const Enum pID) const { return (vID == pID); }
    constexpr bool operator == (const TUInt32 pID) const { return (vID == (Enum)pID); }
    constexpr bool operator == (const TUInt64 pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWSchemaID pID) const { return (vID != pID.vID); }
    constexpr bool operator != (const Enum pID) const { return (vID != pID); }
    constexpr bool operator != (const TUInt32 pID) const { return (vID != (Enum)pID); }
    constexpr bool operator != (const TUInt64 pID) const { return (vID != (Enum)pID); }
    constexpr bool operator ! () const { return (vID == (Enum)0); }
    
    constexpr operator eTWSchemaDCSection () const { return (eTWSchemaDCSection)vID; }

    constexpr bool operator + (const eTWSchemaDCSection pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWSchemaDCSection pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWSchemaObjType () const { return (eTWSchemaObjType)vID; }
    constexpr bool operator + (const eTWSchemaObjType pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWSchemaObjType pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWDERIVED_SCHEMA () const { return (eTWDERIVED_SCHEMA)vID; }
    constexpr bool operator + (const eTWDERIVED_SCHEMA pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWDERIVED_SCHEMA pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWDERIVED_SCHEMA_SECTION () const { return (eTWDERIVED_SCHEMA_SECTION)vID; }
    constexpr bool operator + (const eTWDERIVED_SCHEMA_SECTION pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWDERIVED_SCHEMA_SECTION pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWDERIVED_SCHEMA_OBJECT () const { return (eTWDERIVED_SCHEMA_OBJECT)vID; }
    
    constexpr bool operator + (const eTWDERIVED_SCHEMA_OBJECT pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWDERIVED_SCHEMA_OBJECT pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWDERIVED_SCHEMA_OBJ_FIELD () const { return (eTWDERIVED_SCHEMA_OBJ_FIELD)vID; }
    constexpr bool operator + (const eTWDERIVED_SCHEMA_OBJ_FIELD pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWDERIVED_SCHEMA_OBJ_FIELD pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWOBJECT_LIST () const { return (eTWOBJECT_LIST)vID; }
    constexpr bool operator + (const eTWOBJECT_LIST pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWOBJECT_LIST pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWHASH_OBJECT () const { return (eTWHASH_OBJECT)vID; }
    constexpr bool operator + (const eTWHASH_OBJECT pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWHASH_OBJECT pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWINDEX_OBJECT () const { return (eTWINDEX_OBJECT)vID; }
    constexpr bool operator + (const eTWINDEX_OBJECT pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWINDEX_OBJECT pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWAMOUNT () const { return (eTWAMOUNT)vID; }
    constexpr bool operator + (const eTWAMOUNT pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWAMOUNT pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWQUANTITY () const { return (eTWQUANTITY)vID; }
    constexpr bool operator + (const eTWQUANTITY pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWQUANTITY pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWRATEX () const { return (eTWRATEX)vID; }
    constexpr bool operator + (const eTWRATEX pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWRATEX pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWDATERANGE () const { return (eTWDATERANGE)vID; }
    constexpr bool operator + (const eTWDATERANGE pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWDATERANGE pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWTIMERANGE () const { return (eTWTIMERANGE)vID; }
    constexpr bool operator + (const eTWTIMERANGE pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWTIMERANGE pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWHASHKEY_EXTENDED () const { return (eTWHASHKEY_EXTENDED)vID; }
    constexpr bool operator + (const eTWHASHKEY_EXTENDED pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWHASHKEY_EXTENDED pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWHASHSUBOBJECT () const { return (eTWHASHSUBOBJECT)vID; }
    constexpr bool operator + (const eTWHASHSUBOBJECT pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWHASHSUBOBJECT pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWBASE_HASH_OBJECT () const { return (eTWBASE_HASH_OBJECT)vID; }
    constexpr bool operator + (const eTWBASE_HASH_OBJECT pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWBASE_HASH_OBJECT pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWLRUTIMER_PROPERTIES () const { return (eTWLRUTIMER_PROPERTIES)vID; }
    constexpr bool operator + (const eTWLRUTIMER_PROPERTIES pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWLRUTIMER_PROPERTIES pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWID_PROPERTIES () const { return (eTWID_PROPERTIES)vID; }
    constexpr bool operator + (const eTWID_PROPERTIES pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWID_PROPERTIES pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWHASHID_PROPERTIES () const { return (eTWHASHID_PROPERTIES)vID; }
    constexpr bool operator + (const eTWHASHID_PROPERTIES pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWHASHID_PROPERTIES pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWHASHINDEX_PROPERTIES () const { return (eTWHASHINDEX_PROPERTIES)vID; }
    constexpr bool operator + (const eTWHASHINDEX_PROPERTIES pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWHASHINDEX_PROPERTIES pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWHASHSTRINGINDEX_PROPERTIES () const { return (eTWHASHSTRINGINDEX_PROPERTIES)vID; }
    constexpr bool operator + (const eTWHASHSTRINGINDEX_PROPERTIES pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWHASHSTRINGINDEX_PROPERTIES pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWHASHAGGR_PROPERTIES () const { return (eTWHASHAGGR_PROPERTIES)vID; }
    constexpr bool operator + (const eTWHASHAGGR_PROPERTIES pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWHASHAGGR_PROPERTIES pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWDATA_PROPERTIES () const { return (eTWDATA_PROPERTIES)vID; }
    constexpr bool operator + (const eTWDATA_PROPERTIES pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWDATA_PROPERTIES pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWDS_PROPERTIES () const { return (eTWDS_PROPERTIES)vID; }
    constexpr bool operator + (const eTWDS_PROPERTIES pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWDS_PROPERTIES pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWDC_PROPERTIES () const { return (eTWDC_PROPERTIES)vID; }
    constexpr bool operator + (const eTWDC_PROPERTIES pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWDC_PROPERTIES pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWDCMGR_PROPERTIES () const { return (eTWDCMGR_PROPERTIES)vID; }
    constexpr bool operator + (const eTWDCMGR_PROPERTIES pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWDCMGR_PROPERTIES pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWINDEX_VALUE () const { return (eTWINDEX_VALUE)vID; }
    constexpr bool operator + (const eTWINDEX_VALUE pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWINDEX_VALUE pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWTIME_INDEX_VALUE () const { return (eTWTIME_INDEX_VALUE)vID; }
    constexpr bool operator + (const eTWTIME_INDEX_VALUE pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWTIME_INDEX_VALUE pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWREFID_INDEX_VALUE () const { return (eTWREFID_INDEX_VALUE)vID; }
    constexpr bool operator + (const eTWREFID_INDEX_VALUE pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWREFID_INDEX_VALUE pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWSTRING_INDEX_VALUE () const { return (eTWSTRING_INDEX_VALUE)vID; }
    constexpr bool operator + (const eTWSTRING_INDEX_VALUE pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWSTRING_INDEX_VALUE pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWTIME_FILTER_DETAIL () const { return (eTWTIME_FILTER_DETAIL)vID; }
    constexpr bool operator + (const eTWTIME_FILTER_DETAIL pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWTIME_FILTER_DETAIL pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWINDEX_ELEM_FILTER_DETAIL () const { return (eTWINDEX_ELEM_FILTER_DETAIL)vID; }
    constexpr bool operator + (const eTWINDEX_ELEM_FILTER_DETAIL pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWINDEX_ELEM_FILTER_DETAIL pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWINDEX_ELEM () const { return (eTWINDEX_ELEM)vID; }
    constexpr bool operator + (const eTWINDEX_ELEM pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWINDEX_ELEM pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWAPPLICATION_SESSION_OBJ () const { return (eTWAPPLICATION_SESSION_OBJ)vID; }
    constexpr bool operator + (const eTWAPPLICATION_SESSION_OBJ pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWAPPLICATION_SESSION_OBJ pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWAPPLICATION_PATHS_OBJ () const { return (eTWAPPLICATION_PATHS_OBJ)vID; }
    constexpr bool operator + (const eTWAPPLICATION_PATHS_OBJ pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWAPPLICATION_PATHS_OBJ pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWAPPLICATION_PARMS_OBJ () const { return (eTWAPPLICATION_PARMS_OBJ)vID; }
    constexpr bool operator + (const eTWAPPLICATION_PARMS_OBJ pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWAPPLICATION_PARMS_OBJ pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWAPPLICATION_TWIN_OBJ () const { return (eTWAPPLICATION_TWIN_OBJ)vID; }
    constexpr bool operator + (const eTWAPPLICATION_TWIN_OBJ pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWAPPLICATION_TWIN_OBJ pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWSTART_WINDOW_REQDATA () const { return (eTWSTART_WINDOW_REQDATA)vID; }
    constexpr bool operator + (const eTWSTART_WINDOW_REQDATA pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWSTART_WINDOW_REQDATA pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWHANDOVER_TWIN_REQDATA () const { return (eTWHANDOVER_TWIN_REQDATA)vID; }
    constexpr bool operator + (const eTWHANDOVER_TWIN_REQDATA pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWHANDOVER_TWIN_REQDATA pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWCOREDISKIO_OPERATION_REQ_PARMS () const { return (eTWCOREDISKIO_OPERATION_REQ_PARMS)vID; }
    constexpr bool operator + (const eTWCOREDISKIO_OPERATION_REQ_PARMS pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWCOREDISKIO_OPERATION_REQ_PARMS pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWCOREDISKIO_OPERATION_RESP_PARMS () const { return (eTWCOREDISKIO_OPERATION_RESP_PARMS)vID; }
    constexpr bool operator + (const eTWCOREDISKIO_OPERATION_RESP_PARMS pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWCOREDISKIO_OPERATION_RESP_PARMS pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWHANDLE_DISKIO_REQ_DATA () const { return (eTWHANDLE_DISKIO_REQ_DATA)vID; }
    constexpr bool operator + (const eTWHANDLE_DISKIO_REQ_DATA pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWHANDLE_DISKIO_REQ_DATA pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWHANDLE_DISKIO_RESP_DATA () const { return (eTWHANDLE_DISKIO_RESP_DATA)vID; }
    constexpr bool operator + (const eTWHANDLE_DISKIO_RESP_DATA pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWHANDLE_DISKIO_RESP_DATA pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWCONSUME_COMPLETE_HANDOVER_BY_TWIN_REQDATA () const { return (eTWCONSUME_COMPLETE_HANDOVER_BY_TWIN_REQDATA)vID; }
    constexpr bool operator + (const eTWCONSUME_COMPLETE_HANDOVER_BY_TWIN_REQDATA pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWCONSUME_COMPLETE_HANDOVER_BY_TWIN_REQDATA pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWDC_COMPANY_OBJ () const { return (eTWDC_COMPANY_OBJ)vID; }
    constexpr bool operator + (const eTWDC_COMPANY_OBJ pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWDC_COMPANY_OBJ pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWEVENT_STAGE_REQUESTCONTEXT_SCHEMA () const { return (eTWEVENT_STAGE_REQUESTCONTEXT_SCHEMA)vID; }
    constexpr bool operator + (const eTWEVENT_STAGE_REQUESTCONTEXT_SCHEMA pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWEVENT_STAGE_REQUESTCONTEXT_SCHEMA pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWTWEVENT_OBJ () const { return (eTWTWEVENT_OBJ)vID; }
    constexpr bool operator + (const eTWTWEVENT_OBJ pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWTWEVENT_OBJ pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWINDIRECT_ROUTE_OBJ () const { return (eTWINDIRECT_ROUTE_OBJ)vID; }
    constexpr bool operator + (const eTWINDIRECT_ROUTE_OBJ pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWINDIRECT_ROUTE_OBJ pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWWIP_STEP () const { return (eTWWIP_STEP)vID; }
    constexpr bool operator + (const eTWWIP_STEP pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWWIP_STEP pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWDIRECT_ROUTE_OBJ () const { return (eTWDIRECT_ROUTE_OBJ)vID; }
    constexpr bool operator + (const eTWDIRECT_ROUTE_OBJ pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWDIRECT_ROUTE_OBJ pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWOTHER_DIRECT_IPIDS () const { return (eTWOTHER_DIRECT_IPIDS)vID; }
    constexpr bool operator + (const eTWOTHER_DIRECT_IPIDS pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWOTHER_DIRECT_IPIDS pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWDEST_OBJ () const { return (eTWDEST_OBJ)vID; }
    constexpr bool operator + (const eTWDEST_OBJ pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWDEST_OBJ pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWIOROOT_OBJ () const { return (eTWIOROOT_OBJ)vID; }
    constexpr bool operator + (const eTWIOROOT_OBJ pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWIOROOT_OBJ pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWTAF_FILE_INFO () const { return (eTWTAF_FILE_INFO)vID; }
    constexpr bool operator + (const eTWTAF_FILE_INFO pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWTAF_FILE_INFO pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWDB_INFO () const { return (eTWDB_INFO)vID; }
    constexpr bool operator + (const eTWDB_INFO pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWDB_INFO pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWIOBASEPATH_OBJ () const { return (eTWIOBASEPATH_OBJ)vID; }
    constexpr bool operator + (const eTWIOBASEPATH_OBJ pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWIOBASEPATH_OBJ pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWTAF_RUNNING_INFO () const { return (eTWTAF_RUNNING_INFO)vID; }
    constexpr bool operator + (const eTWTAF_RUNNING_INFO pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWTAF_RUNNING_INFO pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWTAF_FILE_DATA () const { return (eTWTAF_FILE_DATA)vID; }
    constexpr bool operator + (const eTWTAF_FILE_DATA pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWTAF_FILE_DATA pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWTWDC_SECTION_METADATA_SCHEMA () const { return (eTWTWDC_SECTION_METADATA_SCHEMA)vID; }
    constexpr bool operator + (const eTWTWDC_SECTION_METADATA_SCHEMA pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWTWDC_SECTION_METADATA_SCHEMA pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWTWDC_METADATA_SCHEMA () const { return (eTWTWDC_METADATA_SCHEMA)vID; }
    constexpr bool operator + (const eTWTWDC_METADATA_SCHEMA pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWTWDC_METADATA_SCHEMA pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWVERSION_OBJECT () const { return (eTWVERSION_OBJECT)vID; }
    constexpr bool operator + (const eTWVERSION_OBJECT pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWVERSION_OBJECT pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWTWAPI_IS_DUPLICATE_DUID_REQ_OBJ_ID () const { return (eTWTWAPI_IS_DUPLICATE_DUID_REQ_OBJ_ID)vID; }
    constexpr bool operator + (const eTWTWAPI_IS_DUPLICATE_DUID_REQ_OBJ_ID pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWTWAPI_IS_DUPLICATE_DUID_REQ_OBJ_ID pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWTWAPI_IS_DUPLICATE_DUID_RESP_OBJ_ID () const { return (eTWTWAPI_IS_DUPLICATE_DUID_RESP_OBJ_ID)vID; }
    constexpr bool operator + (const eTWTWAPI_IS_DUPLICATE_DUID_RESP_OBJ_ID pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWTWAPI_IS_DUPLICATE_DUID_RESP_OBJ_ID pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWOPEN_DB_REQUEST () const { return (eTWOPEN_DB_REQUEST)vID; }
    constexpr bool operator + (const eTWOPEN_DB_REQUEST pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWOPEN_DB_REQUEST pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWOPENDB_SCRATCHPAD () const { return (eTWOPENDB_SCRATCHPAD)vID; }
    constexpr bool operator + (const eTWOPENDB_SCRATCHPAD pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWOPENDB_SCRATCHPAD pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWTAF_COORDINATION_REQUEST () const { return (eTWTAF_COORDINATION_REQUEST)vID; }
    constexpr bool operator + (const eTWTAF_COORDINATION_REQUEST pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWTAF_COORDINATION_REQUEST pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWVERSIONED_DS_BASE_REQUEST () const { return (eTWVERSIONED_DS_BASE_REQUEST)vID; }
    constexpr bool operator + (const eTWVERSIONED_DS_BASE_REQUEST pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWVERSIONED_DS_BASE_REQUEST pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWVERSIONED_DS_BASE_SCRATCHPAD () const { return (eTWVERSIONED_DS_BASE_SCRATCHPAD)vID; }
    constexpr bool operator + (const eTWVERSIONED_DS_BASE_SCRATCHPAD pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWVERSIONED_DS_BASE_SCRATCHPAD pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWVERSIONED_DS_VERSION_REQUEST () const { return (eTWVERSIONED_DS_VERSION_REQUEST)vID; }
    constexpr bool operator + (const eTWVERSIONED_DS_VERSION_REQUEST pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWVERSIONED_DS_VERSION_REQUEST pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWVERSIONED_DS_VERSION_SCRATCHPAD () const { return (eTWVERSIONED_DS_VERSION_SCRATCHPAD)vID; }
    constexpr bool operator + (const eTWVERSIONED_DS_VERSION_SCRATCHPAD pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWVERSIONED_DS_VERSION_SCRATCHPAD pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWVERSIONED_DS_HASHID_REQUEST () const { return (eTWVERSIONED_DS_HASHID_REQUEST)vID; }
    constexpr bool operator + (const eTWVERSIONED_DS_HASHID_REQUEST pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWVERSIONED_DS_HASHID_REQUEST pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWVERSIONED_DS_HASHID_SCRATCHPAD () const { return (eTWVERSIONED_DS_HASHID_SCRATCHPAD)vID; }
    constexpr bool operator + (const eTWVERSIONED_DS_HASHID_SCRATCHPAD pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWVERSIONED_DS_HASHID_SCRATCHPAD pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWVERSIONED_DS_OBJECT_REQUEST () const { return (eTWVERSIONED_DS_OBJECT_REQUEST)vID; }
    constexpr bool operator + (const eTWVERSIONED_DS_OBJECT_REQUEST pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWVERSIONED_DS_OBJECT_REQUEST pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWVERSIONED_DS_OBJECT_SCRATCHPAD () const { return (eTWVERSIONED_DS_OBJECT_SCRATCHPAD)vID; }
    constexpr bool operator + (const eTWVERSIONED_DS_OBJECT_SCRATCHPAD pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWVERSIONED_DS_OBJECT_SCRATCHPAD pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWVERSIONED_DS_INDEX_SCRATCHPAD () const { return (eTWVERSIONED_DS_INDEX_SCRATCHPAD)vID; }
    constexpr bool operator + (const eTWVERSIONED_DS_INDEX_SCRATCHPAD pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWVERSIONED_DS_INDEX_SCRATCHPAD pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWVERSIONED_DS_ITERATOR_REQUEST () const { return (eTWVERSIONED_DS_ITERATOR_REQUEST)vID; }
    constexpr bool operator + (const eTWVERSIONED_DS_ITERATOR_REQUEST pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWVERSIONED_DS_ITERATOR_REQUEST pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWVERSIONED_DS_ITERATOR_SCRATCHPAD () const { return (eTWVERSIONED_DS_ITERATOR_SCRATCHPAD)vID; }
    constexpr bool operator + (const eTWVERSIONED_DS_ITERATOR_SCRATCHPAD pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWVERSIONED_DS_ITERATOR_SCRATCHPAD pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWDS_ITERATOR_OBJECT_KEY () const { return (eTWDS_ITERATOR_OBJECT_KEY)vID; }
    constexpr bool operator + (const eTWDS_ITERATOR_OBJECT_KEY pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWDS_ITERATOR_OBJECT_KEY pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWITERATOR_OBJECT () const { return (eTWITERATOR_OBJECT)vID; }
    constexpr bool operator + (const eTWITERATOR_OBJECT pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWITERATOR_OBJECT pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWWIP_LIST () const { return (eTWWIP_LIST)vID; }
    constexpr bool operator + (const eTWWIP_LIST pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWWIP_LIST pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWQUERY_SCRATCHPAD () const { return (eTWQUERY_SCRATCHPAD)vID; }
    constexpr bool operator + (const eTWQUERY_SCRATCHPAD pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWQUERY_SCRATCHPAD pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWQUERY_RANGE_DATA () const { return (eTWQUERY_RANGE_DATA)vID; }
    constexpr bool operator + (const eTWQUERY_RANGE_DATA pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWQUERY_RANGE_DATA pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWQUERY_OBJECT () const { return (eTWQUERY_OBJECT)vID; }
    constexpr bool operator + (const eTWQUERY_OBJECT pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWQUERY_OBJECT pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWPRIMARY_QUERY_HASHKEY () const { return (eTWPRIMARY_QUERY_HASHKEY)vID; }
    constexpr bool operator + (const eTWPRIMARY_QUERY_HASHKEY pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWPRIMARY_QUERY_HASHKEY pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWFILTER_QUERY_HASHKEY () const { return (eTWFILTER_QUERY_HASHKEY)vID; }
    constexpr bool operator + (const eTWFILTER_QUERY_HASHKEY pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWFILTER_QUERY_HASHKEY pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWRIGHTS_QUERY_HASHKEY () const { return (eTWRIGHTS_QUERY_HASHKEY)vID; }
    constexpr bool operator + (const eTWRIGHTS_QUERY_HASHKEY pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWRIGHTS_QUERY_HASHKEY pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWSORTED_QUERY_HASHKEY () const { return (eTWSORTED_QUERY_HASHKEY)vID; }
    constexpr bool operator + (const eTWSORTED_QUERY_HASHKEY pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWSORTED_QUERY_HASHKEY pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWPRIMARY_QUERY () const { return (eTWPRIMARY_QUERY)vID; }
    constexpr bool operator + (const eTWPRIMARY_QUERY pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWPRIMARY_QUERY pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWFILTER_SUB_QUERY () const { return (eTWFILTER_SUB_QUERY)vID; }
    constexpr bool operator + (const eTWFILTER_SUB_QUERY pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWFILTER_SUB_QUERY pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWRIGHTS_SUB_QUERY () const { return (eTWRIGHTS_SUB_QUERY)vID; }
    constexpr bool operator + (const eTWRIGHTS_SUB_QUERY pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWRIGHTS_SUB_QUERY pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWSORTING_SUB_QUERY () const { return (eTWSORTING_SUB_QUERY)vID; }
    constexpr bool operator + (const eTWSORTING_SUB_QUERY pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWSORTING_SUB_QUERY pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWINDIVIDUAL_QUERY () const { return (eTWINDIVIDUAL_QUERY)vID; }
    constexpr bool operator + (const eTWINDIVIDUAL_QUERY pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWINDIVIDUAL_QUERY pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWCOMPOUND_QUERY () const { return (eTWCOMPOUND_QUERY)vID; }
    constexpr bool operator + (const eTWCOMPOUND_QUERY pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWCOMPOUND_QUERY pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWREQUEST () const { return (eTWREQUEST)vID; }
    constexpr bool operator + (const eTWREQUEST pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWREQUEST pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWBizSchema () const { return (eTWBizSchema)vID; }
    constexpr bool operator + (const eTWBizSchema pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWBizSchema pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWContactDetails () const { return (eTWContactDetails)vID; }
    constexpr bool operator + (const eTWContactDetails pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWContactDetails pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWGSTDetails () const { return (eTWGSTDetails)vID; }
    constexpr bool operator + (const eTWGSTDetails pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWGSTDetails pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWGroupInformation () const { return (eTWGroupInformation)vID; }
    constexpr bool operator + (const eTWGroupInformation pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWGroupInformation pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWGroupStatutoryAndTaxationInformation () const { return (eTWGroupStatutoryAndTaxationInformation)vID; }
    constexpr bool operator + (const eTWGroupStatutoryAndTaxationInformation pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWGroupStatutoryAndTaxationInformation pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWGroupGSTDetails () const { return (eTWGroupGSTDetails)vID; }
    constexpr bool operator + (const eTWGroupGSTDetails pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWGroupGSTDetails pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWGroupTDSDetails () const { return (eTWGroupTDSDetails)vID; }
    constexpr bool operator + (const eTWGroupTDSDetails pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWGroupTDSDetails pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWGroupTCSDetails () const { return (eTWGroupTCSDetails)vID; }
    constexpr bool operator + (const eTWGroupTCSDetails pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWGroupTCSDetails pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWGroupServiceTaxDetails () const { return (eTWGroupServiceTaxDetails)vID; }
    constexpr bool operator + (const eTWGroupServiceTaxDetails pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWGroupServiceTaxDetails pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWGroupExciseTariffDetails () const { return (eTWGroupExciseTariffDetails)vID; }
    constexpr bool operator + (const eTWGroupExciseTariffDetails pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWGroupExciseTariffDetails pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWLedgerInformation () const { return (eTWLedgerInformation)vID; }
    constexpr bool operator + (const eTWLedgerInformation pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWLedgerInformation pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWLedgerStatutoryAndTaxationInformation () const { return (eTWLedgerStatutoryAndTaxationInformation)vID; }
    constexpr bool operator + (const eTWLedgerStatutoryAndTaxationInformation pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWLedgerStatutoryAndTaxationInformation pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWLedgerExciseDetails () const { return (eTWLedgerExciseDetails)vID; }
    constexpr bool operator + (const eTWLedgerExciseDetails pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWLedgerExciseDetails pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWLedgerGSTDetails () const { return (eTWLedgerGSTDetails)vID; }
    constexpr bool operator + (const eTWLedgerGSTDetails pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWLedgerGSTDetails pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWLedgerServiceTaxDetails () const { return (eTWLedgerServiceTaxDetails)vID; }
    constexpr bool operator + (const eTWLedgerServiceTaxDetails pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWLedgerServiceTaxDetails pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWLedgerTDSDetails () const { return (eTWLedgerTDSDetails)vID; }
    constexpr bool operator + (const eTWLedgerTDSDetails pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWLedgerTDSDetails pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWLedgerTCSDetails () const { return (eTWLedgerTCSDetails)vID; }
    constexpr bool operator + (const eTWLedgerTCSDetails pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWLedgerTCSDetails pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWLedgerBankAccountDetails () const { return (eTWLedgerBankAccountDetails)vID; }
    constexpr bool operator + (const eTWLedgerBankAccountDetails pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWLedgerBankAccountDetails pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWLedgerBankingConfiguration () const { return (eTWLedgerBankingConfiguration)vID; }
    constexpr bool operator + (const eTWLedgerBankingConfiguration pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWLedgerBankingConfiguration pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWLedgerInterestCalculationDetails () const { return (eTWLedgerInterestCalculationDetails)vID; }
    constexpr bool operator + (const eTWLedgerInterestCalculationDetails pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWLedgerInterestCalculationDetails pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWLedgerContactDetails () const { return (eTWLedgerContactDetails)vID; }
    constexpr bool operator + (const eTWLedgerContactDetails pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWLedgerContactDetails pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWLedgerPaymentDetails () const { return (eTWLedgerPaymentDetails)vID; }
    constexpr bool operator + (const eTWLedgerPaymentDetails pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWLedgerPaymentDetails pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWCostCategoryInformation () const { return (eTWCostCategoryInformation)vID; }
    constexpr bool operator + (const eTWCostCategoryInformation pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWCostCategoryInformation pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWCostCentreInformation () const { return (eTWCostCentreInformation)vID; }
    constexpr bool operator + (const eTWCostCentreInformation pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWCostCentreInformation pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWCurrencyInformation () const { return (eTWCurrencyInformation)vID; }
    constexpr bool operator + (const eTWCurrencyInformation pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWCurrencyInformation pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWExchangeRateInformation () const { return (eTWExchangeRateInformation)vID; }
    constexpr bool operator + (const eTWExchangeRateInformation pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWExchangeRateInformation pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWBudgetInformation () const { return (eTWBudgetInformation)vID; }
    constexpr bool operator + (const eTWBudgetInformation pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWBudgetInformation pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWStockGroupInformation () const { return (eTWStockGroupInformation)vID; }
    constexpr bool operator + (const eTWStockGroupInformation pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWStockGroupInformation pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWStockCategoryInformation () const { return (eTWStockCategoryInformation)vID; }
    constexpr bool operator + (const eTWStockCategoryInformation pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWStockCategoryInformation pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWStockItemInformation () const { return (eTWStockItemInformation)vID; }
    constexpr bool operator + (const eTWStockItemInformation pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWStockItemInformation pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWStockItemAttributes () const { return (eTWStockItemAttributes)vID; }
    constexpr bool operator + (const eTWStockItemAttributes pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWStockItemAttributes pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWStationeryAttributes () const { return (eTWStationeryAttributes)vID; }
    constexpr bool operator + (const eTWStationeryAttributes pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWStationeryAttributes pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWBooksAttributes () const { return (eTWBooksAttributes)vID; }
    constexpr bool operator + (const eTWBooksAttributes pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWBooksAttributes pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWPharmaceuticalAttributes () const { return (eTWPharmaceuticalAttributes)vID; }
    constexpr bool operator + (const eTWPharmaceuticalAttributes pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWPharmaceuticalAttributes pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWConsumerDurablesAttributes () const { return (eTWConsumerDurablesAttributes)vID; }
    constexpr bool operator + (const eTWConsumerDurablesAttributes pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWConsumerDurablesAttributes pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWConstructionMaterial () const { return (eTWConstructionMaterial)vID; }
    constexpr bool operator + (const eTWConstructionMaterial pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWConstructionMaterial pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWStockItemDutiesAndTaxes () const { return (eTWStockItemDutiesAndTaxes)vID; }
    constexpr bool operator + (const eTWStockItemDutiesAndTaxes pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWStockItemDutiesAndTaxes pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWGSTRateDetails () const { return (eTWGSTRateDetails)vID; }
    constexpr bool operator + (const eTWGSTRateDetails pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWGSTRateDetails pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWVATRateDetails () const { return (eTWVATRateDetails)vID; }
    constexpr bool operator + (const eTWVATRateDetails pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWVATRateDetails pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWUOMInformation () const { return (eTWUOMInformation)vID; }
    constexpr bool operator + (const eTWUOMInformation pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWUOMInformation pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWLocationInformation () const { return (eTWLocationInformation)vID; }
    constexpr bool operator + (const eTWLocationInformation pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWLocationInformation pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWEmployeeCategoryInformation () const { return (eTWEmployeeCategoryInformation)vID; }
    constexpr bool operator + (const eTWEmployeeCategoryInformation pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWEmployeeCategoryInformation pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWEmployeeGroupInformation () const { return (eTWEmployeeGroupInformation)vID; }
    constexpr bool operator + (const eTWEmployeeGroupInformation pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWEmployeeGroupInformation pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWEmployeeInformation () const { return (eTWEmployeeInformation)vID; }
    constexpr bool operator + (const eTWEmployeeInformation pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWEmployeeInformation pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWStatutoryDeatils () const { return (eTWStatutoryDeatils)vID; }
    constexpr bool operator + (const eTWStatutoryDeatils pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWStatutoryDeatils pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWPassportAndVisaDetails () const { return (eTWPassportAndVisaDetails)vID; }
    constexpr bool operator + (const eTWPassportAndVisaDetails pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWPassportAndVisaDetails pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWContractDetails () const { return (eTWContractDetails)vID; }
    constexpr bool operator + (const eTWContractDetails pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWContractDetails pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWEmployeeContactDetails () const { return (eTWEmployeeContactDetails)vID; }
    constexpr bool operator + (const eTWEmployeeContactDetails pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWEmployeeContactDetails pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWEmployeeBankAccountDetails () const { return (eTWEmployeeBankAccountDetails)vID; }
    constexpr bool operator + (const eTWEmployeeBankAccountDetails pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWEmployeeBankAccountDetails pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWEmployeeSalaryDetails () const { return (eTWEmployeeSalaryDetails)vID; }
    constexpr bool operator + (const eTWEmployeeSalaryDetails pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWEmployeeSalaryDetails pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWPayHeadInformation () const { return (eTWPayHeadInformation)vID; }
    constexpr bool operator + (const eTWPayHeadInformation pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWPayHeadInformation pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWBankAccountDetails () const { return (eTWBankAccountDetails)vID; }
    constexpr bool operator + (const eTWBankAccountDetails pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWBankAccountDetails pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWGSTRegistrationDetails () const { return (eTWGSTRegistrationDetails)vID; }
    constexpr bool operator + (const eTWGSTRegistrationDetails pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWGSTRegistrationDetails pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWIncomeTaxDetails () const { return (eTWIncomeTaxDetails)vID; }
    constexpr bool operator + (const eTWIncomeTaxDetails pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWIncomeTaxDetails pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWUBLInvoiceDetails () const { return (eTWUBLInvoiceDetails)vID; }
    constexpr bool operator + (const eTWUBLInvoiceDetails pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWUBLInvoiceDetails pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWOrderReference () const { return (eTWOrderReference)vID; }
    constexpr bool operator + (const eTWOrderReference pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWOrderReference pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWInvoiceDocumentReference () const { return (eTWInvoiceDocumentReference)vID; }
    constexpr bool operator + (const eTWInvoiceDocumentReference pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWInvoiceDocumentReference pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWDespatchAdviceReference () const { return (eTWDespatchAdviceReference)vID; }
    constexpr bool operator + (const eTWDespatchAdviceReference pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWDespatchAdviceReference pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWReceiptAdviceReference () const { return (eTWReceiptAdviceReference)vID; }
    constexpr bool operator + (const eTWReceiptAdviceReference pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWReceiptAdviceReference pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWContractReference () const { return (eTWContractReference)vID; }
    constexpr bool operator + (const eTWContractReference pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWContractReference pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWSeller () const { return (eTWSeller)vID; }
    constexpr bool operator + (const eTWSeller pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWSeller pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWBuyer () const { return (eTWBuyer)vID; }
    constexpr bool operator + (const eTWBuyer pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWBuyer pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWDeliveryInformation () const { return (eTWDeliveryInformation)vID; }
    constexpr bool operator + (const eTWDeliveryInformation pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWDeliveryInformation pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWBatchAllocation () const { return (eTWBatchAllocation)vID; }
    constexpr bool operator + (const eTWBatchAllocation pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWBatchAllocation pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWBankRelatedDetails () const { return (eTWBankRelatedDetails)vID; }
    constexpr bool operator + (const eTWBankRelatedDetails pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWBankRelatedDetails pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWInvTransactionDetails () const { return (eTWInvTransactionDetails)vID; }
    constexpr bool operator + (const eTWInvTransactionDetails pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWInvTransactionDetails pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWInvDocumentDetails () const { return (eTWInvDocumentDetails)vID; }
    constexpr bool operator + (const eTWInvDocumentDetails pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWInvDocumentDetails pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWInvExportDetails () const { return (eTWInvExportDetails)vID; }
    constexpr bool operator + (const eTWInvExportDetails pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWInvExportDetails pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWInvSellerDetails () const { return (eTWInvSellerDetails)vID; }
    constexpr bool operator + (const eTWInvSellerDetails pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWInvSellerDetails pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWInvBuyerDetails () const { return (eTWInvBuyerDetails)vID; }
    constexpr bool operator + (const eTWInvBuyerDetails pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWInvBuyerDetails pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWInvDespatchDetails () const { return (eTWInvDespatchDetails)vID; }
    constexpr bool operator + (const eTWInvDespatchDetails pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWInvDespatchDetails pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWInvShippingDetails () const { return (eTWInvShippingDetails)vID; }
    constexpr bool operator + (const eTWInvShippingDetails pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWInvShippingDetails pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWInvInvoiceValues () const { return (eTWInvInvoiceValues)vID; }
    constexpr bool operator + (const eTWInvInvoiceValues pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWInvInvoiceValues pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWInvItemDetails () const { return (eTWInvItemDetails)vID; }
    constexpr bool operator + (const eTWInvItemDetails pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWInvItemDetails pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWInvPaymentDetails () const { return (eTWInvPaymentDetails)vID; }
    constexpr bool operator + (const eTWInvPaymentDetails pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWInvPaymentDetails pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWProductInformation () const { return (eTWProductInformation)vID; }
    constexpr bool operator + (const eTWProductInformation pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWProductInformation pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWProductAttributes () const { return (eTWProductAttributes)vID; }
    constexpr bool operator + (const eTWProductAttributes pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWProductAttributes pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWStationeryProductAttributes () const { return (eTWStationeryProductAttributes)vID; }
    constexpr bool operator + (const eTWStationeryProductAttributes pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWStationeryProductAttributes pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWBooksProductAttributes () const { return (eTWBooksProductAttributes)vID; }
    constexpr bool operator + (const eTWBooksProductAttributes pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWBooksProductAttributes pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWPharmaceuticalProductAttributes () const { return (eTWPharmaceuticalProductAttributes)vID; }
    constexpr bool operator + (const eTWPharmaceuticalProductAttributes pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWPharmaceuticalProductAttributes pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWConsumerDurablesProductAttributes () const { return (eTWConsumerDurablesProductAttributes)vID; }
    constexpr bool operator + (const eTWConsumerDurablesProductAttributes pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWConsumerDurablesProductAttributes pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWConstructionMaterialProductAttributes () const { return (eTWConstructionMaterialProductAttributes)vID; }
    constexpr bool operator + (const eTWConstructionMaterialProductAttributes pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWConstructionMaterialProductAttributes pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWProductDutiesAndTaxes () const { return (eTWProductDutiesAndTaxes)vID; }
    constexpr bool operator + (const eTWProductDutiesAndTaxes pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWProductDutiesAndTaxes pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWProductGSTRateDetails () const { return (eTWProductGSTRateDetails)vID; }
    constexpr bool operator + (const eTWProductGSTRateDetails pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWProductGSTRateDetails pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWProductVATRateDetails () const { return (eTWProductVATRateDetails)vID; }
    constexpr bool operator + (const eTWProductVATRateDetails pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWProductVATRateDetails pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWBrandInformation () const { return (eTWBrandInformation)vID; }
    constexpr bool operator + (const eTWBrandInformation pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWBrandInformation pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWEnergyConsumptionDetails () const { return (eTWEnergyConsumptionDetails)vID; }
    constexpr bool operator + (const eTWEnergyConsumptionDetails pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWEnergyConsumptionDetails pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWMerchantReturnPolicy () const { return (eTWMerchantReturnPolicy)vID; }
    constexpr bool operator + (const eTWMerchantReturnPolicy pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWMerchantReturnPolicy pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWVehicleInformation () const { return (eTWVehicleInformation)vID; }
    constexpr bool operator + (const eTWVehicleInformation pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWVehicleInformation pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWOwnershipInformation () const { return (eTWOwnershipInformation)vID; }
    constexpr bool operator + (const eTWOwnershipInformation pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWOwnershipInformation pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWServiceInformation () const { return (eTWServiceInformation)vID; }
    constexpr bool operator + (const eTWServiceInformation pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWServiceInformation pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWPermitInformation () const { return (eTWPermitInformation)vID; }
    constexpr bool operator + (const eTWPermitInformation pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWPermitInformation pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWBedDetails () const { return (eTWBedDetails)vID; }
    constexpr bool operator + (const eTWBedDetails pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWBedDetails pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWDimensions () const { return (eTWDimensions)vID; }
    constexpr bool operator + (const eTWDimensions pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWDimensions pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWMeasurement () const { return (eTWMeasurement)vID; }
    constexpr bool operator + (const eTWMeasurement pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWMeasurement pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWPersonDetails () const { return (eTWPersonDetails)vID; }
    constexpr bool operator + (const eTWPersonDetails pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWPersonDetails pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWPersonalContactDetails () const { return (eTWPersonalContactDetails)vID; }
    constexpr bool operator + (const eTWPersonalContactDetails pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWPersonalContactDetails pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWOccupationInformation () const { return (eTWOccupationInformation)vID; }
    constexpr bool operator + (const eTWOccupationInformation pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWOccupationInformation pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWVoucher () const { return (eTWVoucher)vID; }
    constexpr bool operator + (const eTWVoucher pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWVoucher pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWTransactionDetails () const { return (eTWTransactionDetails)vID; }
    constexpr bool operator + (const eTWTransactionDetails pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWTransactionDetails pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWVoucherOrderDetails () const { return (eTWVoucherOrderDetails)vID; }
    constexpr bool operator + (const eTWVoucherOrderDetails pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWVoucherOrderDetails pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWVoucherOriginalInvoiceDetails () const { return (eTWVoucherOriginalInvoiceDetails)vID; }
    constexpr bool operator + (const eTWVoucherOriginalInvoiceDetails pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWVoucherOriginalInvoiceDetails pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWVoucherExportDetails () const { return (eTWVoucherExportDetails)vID; }
    constexpr bool operator + (const eTWVoucherExportDetails pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWVoucherExportDetails pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWVoucherImportDetails () const { return (eTWVoucherImportDetails)vID; }
    constexpr bool operator + (const eTWVoucherImportDetails pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWVoucherImportDetails pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWVouchereWayBillDetails () const { return (eTWVouchereWayBillDetails)vID; }
    constexpr bool operator + (const eTWVouchereWayBillDetails pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWVouchereWayBillDetails pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWeWayBillCONSIGNEEDetails () const { return (eTWeWayBillCONSIGNEEDetails)vID; }
    constexpr bool operator + (const eTWeWayBillCONSIGNEEDetails pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWeWayBillCONSIGNEEDetails pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWeWayBillCONSIGNORDetails () const { return (eTWeWayBillCONSIGNORDetails)vID; }
    constexpr bool operator + (const eTWeWayBillCONSIGNORDetails pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWeWayBillCONSIGNORDetails pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWeWayBillTransporterDetails () const { return (eTWeWayBillTransporterDetails)vID; }
    constexpr bool operator + (const eTWeWayBillTransporterDetails pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWeWayBillTransporterDetails pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWeWayBillProductDetails () const { return (eTWeWayBillProductDetails)vID; }
    constexpr bool operator + (const eTWeWayBillProductDetails pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWeWayBillProductDetails pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWeWayBillDocumentTotalDetails () const { return (eTWeWayBillDocumentTotalDetails)vID; }
    constexpr bool operator + (const eTWeWayBillDocumentTotalDetails pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWeWayBillDocumentTotalDetails pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWVoucherPartyDocumentDetails () const { return (eTWVoucherPartyDocumentDetails)vID; }
    constexpr bool operator + (const eTWVoucherPartyDocumentDetails pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWVoucherPartyDocumentDetails pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWVoucherProcessInstruction () const { return (eTWVoucherProcessInstruction)vID; }
    constexpr bool operator + (const eTWVoucherProcessInstruction pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWVoucherProcessInstruction pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWVoucherAttendance () const { return (eTWVoucherAttendance)vID; }
    constexpr bool operator + (const eTWVoucherAttendance pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWVoucherAttendance pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWVoucherReferenceDetails () const { return (eTWVoucherReferenceDetails)vID; }
    constexpr bool operator + (const eTWVoucherReferenceDetails pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWVoucherReferenceDetails pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWVoucherTransporterDetails () const { return (eTWVoucherTransporterDetails)vID; }
    constexpr bool operator + (const eTWVoucherTransporterDetails pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWVoucherTransporterDetails pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWDespatchDetails () const { return (eTWDespatchDetails)vID; }
    constexpr bool operator + (const eTWDespatchDetails pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWDespatchDetails pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWVoucherBillToDetails () const { return (eTWVoucherBillToDetails)vID; }
    constexpr bool operator + (const eTWVoucherBillToDetails pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWVoucherBillToDetails pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWVoucherShipToDetails () const { return (eTWVoucherShipToDetails)vID; }
    constexpr bool operator + (const eTWVoucherShipToDetails pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWVoucherShipToDetails pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWVoucherBillFromDetails () const { return (eTWVoucherBillFromDetails)vID; }
    constexpr bool operator + (const eTWVoucherBillFromDetails pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWVoucherBillFromDetails pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWVoucherDispatchFromDetails () const { return (eTWVoucherDispatchFromDetails)vID; }
    constexpr bool operator + (const eTWVoucherDispatchFromDetails pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWVoucherDispatchFromDetails pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWVoucherReceiptDetails () const { return (eTWVoucherReceiptDetails)vID; }
    constexpr bool operator + (const eTWVoucherReceiptDetails pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWVoucherReceiptDetails pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWVoucherExciseDetails () const { return (eTWVoucherExciseDetails)vID; }
    constexpr bool operator + (const eTWVoucherExciseDetails pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWVoucherExciseDetails pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWVoucherInventoryDetails () const { return (eTWVoucherInventoryDetails)vID; }
    constexpr bool operator + (const eTWVoucherInventoryDetails pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWVoucherInventoryDetails pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWVoucherVATDetails () const { return (eTWVoucherVATDetails)vID; }
    constexpr bool operator + (const eTWVoucherVATDetails pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWVoucherVATDetails pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWVoucherGSTDetails () const { return (eTWVoucherGSTDetails)vID; }
    constexpr bool operator + (const eTWVoucherGSTDetails pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWVoucherGSTDetails pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWVoucherBillWiseDetails () const { return (eTWVoucherBillWiseDetails)vID; }
    constexpr bool operator + (const eTWVoucherBillWiseDetails pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWVoucherBillWiseDetails pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWVoucherEInvoiceDetails () const { return (eTWVoucherEInvoiceDetails)vID; }
    constexpr bool operator + (const eTWVoucherEInvoiceDetails pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWVoucherEInvoiceDetails pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWVoucherItemAllocationsDetails () const { return (eTWVoucherItemAllocationsDetails)vID; }
    constexpr bool operator + (const eTWVoucherItemAllocationsDetails pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWVoucherItemAllocationsDetails pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWSellerDetails () const { return (eTWSellerDetails)vID; }
    constexpr bool operator + (const eTWSellerDetails pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWSellerDetails pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWBuyerDetails () const { return (eTWBuyerDetails)vID; }
    constexpr bool operator + (const eTWBuyerDetails pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWBuyerDetails pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWInvoiceValues () const { return (eTWInvoiceValues)vID; }
    constexpr bool operator + (const eTWInvoiceValues pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWInvoiceValues pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWPaymentDetails () const { return (eTWPaymentDetails)vID; }
    constexpr bool operator + (const eTWPaymentDetails pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWPaymentDetails pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWDenomination () const { return (eTWDenomination)vID; }
    constexpr bool operator + (const eTWDenomination pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWDenomination pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWPOSDetails () const { return (eTWPOSDetails)vID; }
    constexpr bool operator + (const eTWPOSDetails pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWPOSDetails pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWLedgerEntry () const { return (eTWLedgerEntry)vID; }
    constexpr bool operator + (const eTWLedgerEntry pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWLedgerEntry pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWLedgerVATInfo () const { return (eTWLedgerVATInfo)vID; }
    constexpr bool operator + (const eTWLedgerVATInfo pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWLedgerVATInfo pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWLedgerGSTInfo () const { return (eTWLedgerGSTInfo)vID; }
    constexpr bool operator + (const eTWLedgerGSTInfo pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWLedgerGSTInfo pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWBillAllocations () const { return (eTWBillAllocations)vID; }
    constexpr bool operator + (const eTWBillAllocations pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWBillAllocations pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWCostCentreAllocations () const { return (eTWCostCentreAllocations)vID; }
    constexpr bool operator + (const eTWCostCentreAllocations pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWCostCentreAllocations pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWCostCategoryAllocations () const { return (eTWCostCategoryAllocations)vID; }
    constexpr bool operator + (const eTWCostCategoryAllocations pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWCostCategoryAllocations pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWVoucherValueDetails () const { return (eTWVoucherValueDetails)vID; }
    constexpr bool operator + (const eTWVoucherValueDetails pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWVoucherValueDetails pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWCompanyInformation () const { return (eTWCompanyInformation)vID; }
    constexpr bool operator + (const eTWCompanyInformation pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWCompanyInformation pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWCompanyAddress () const { return (eTWCompanyAddress)vID; }
    constexpr bool operator + (const eTWCompanyAddress pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWCompanyAddress pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWCompanyStatutoryInformation () const { return (eTWCompanyStatutoryInformation)vID; }
    constexpr bool operator + (const eTWCompanyStatutoryInformation pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWCompanyStatutoryInformation pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWCompanyGSTDetails () const { return (eTWCompanyGSTDetails)vID; }
    constexpr bool operator + (const eTWCompanyGSTDetails pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWCompanyGSTDetails pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWCompanyEwaybill () const { return (eTWCompanyEwaybill)vID; }
    constexpr bool operator + (const eTWCompanyEwaybill pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWCompanyEwaybill pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWCompanyEinvoice () const { return (eTWCompanyEinvoice)vID; }
    constexpr bool operator + (const eTWCompanyEinvoice pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWCompanyEinvoice pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWSingaporeGSTDetails () const { return (eTWSingaporeGSTDetails)vID; }
    constexpr bool operator + (const eTWSingaporeGSTDetails pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWSingaporeGSTDetails pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWCompanyExciseDetails () const { return (eTWCompanyExciseDetails)vID; }
    constexpr bool operator + (const eTWCompanyExciseDetails pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWCompanyExciseDetails pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWExciseConctDetails () const { return (eTWExciseConctDetails)vID; }
    constexpr bool operator + (const eTWExciseConctDetails pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWExciseConctDetails pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWRG23DDetails () const { return (eTWRG23DDetails)vID; }
    constexpr bool operator + (const eTWRG23DDetails pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWRG23DDetails pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWTariffDetails () const { return (eTWTariffDetails)vID; }
    constexpr bool operator + (const eTWTariffDetails pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWTariffDetails pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWJurisdictionDetails () const { return (eTWJurisdictionDetails)vID; }
    constexpr bool operator + (const eTWJurisdictionDetails pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWJurisdictionDetails pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWCompanyVATDetails () const { return (eTWCompanyVATDetails)vID; }
    constexpr bool operator + (const eTWCompanyVATDetails pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWCompanyVATDetails pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWAdditionalVATDetails () const { return (eTWAdditionalVATDetails)vID; }
    constexpr bool operator + (const eTWAdditionalVATDetails pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWAdditionalVATDetails pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWBahrainVATDetails () const { return (eTWBahrainVATDetails)vID; }
    constexpr bool operator + (const eTWBahrainVATDetails pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWBahrainVATDetails pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWSaudiVATDetails () const { return (eTWSaudiVATDetails)vID; }
    constexpr bool operator + (const eTWSaudiVATDetails pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWSaudiVATDetails pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWUKVATDetails () const { return (eTWUKVATDetails)vID; }
    constexpr bool operator + (const eTWUKVATDetails pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWUKVATDetails pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWPhilippinesVATDetails () const { return (eTWPhilippinesVATDetails)vID; }
    constexpr bool operator + (const eTWPhilippinesVATDetails pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWPhilippinesVATDetails pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWNepalVATDetails () const { return (eTWNepalVATDetails)vID; }
    constexpr bool operator + (const eTWNepalVATDetails pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWNepalVATDetails pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWKenyaVATDetails () const { return (eTWKenyaVATDetails)vID; }
    constexpr bool operator + (const eTWKenyaVATDetails pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWKenyaVATDetails pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWAdditionalKenyaVATDetails () const { return (eTWAdditionalKenyaVATDetails)vID; }
    constexpr bool operator + (const eTWAdditionalKenyaVATDetails pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWAdditionalKenyaVATDetails pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWInodonesiaVATDetails () const { return (eTWInodonesiaVATDetails)vID; }
    constexpr bool operator + (const eTWInodonesiaVATDetails pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWInodonesiaVATDetails pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWGhanaVATDetails () const { return (eTWGhanaVATDetails)vID; }
    constexpr bool operator + (const eTWGhanaVATDetails pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWGhanaVATDetails pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWBotswanaVATDetails () const { return (eTWBotswanaVATDetails)vID; }
    constexpr bool operator + (const eTWBotswanaVATDetails pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWBotswanaVATDetails pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWBangladeshVATDetails () const { return (eTWBangladeshVATDetails)vID; }
    constexpr bool operator + (const eTWBangladeshVATDetails pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWBangladeshVATDetails pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWUAEVATDetails () const { return (eTWUAEVATDetails)vID; }
    constexpr bool operator + (const eTWUAEVATDetails pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWUAEVATDetails pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWOmanVATDetails () const { return (eTWOmanVATDetails)vID; }
    constexpr bool operator + (const eTWOmanVATDetails pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWOmanVATDetails pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWPayrollStatutoryDetails () const { return (eTWPayrollStatutoryDetails)vID; }
    constexpr bool operator + (const eTWPayrollStatutoryDetails pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWPayrollStatutoryDetails pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWProvidentFund () const { return (eTWProvidentFund)vID; }
    constexpr bool operator + (const eTWProvidentFund pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWProvidentFund pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWEmployeeStateInsurance () const { return (eTWEmployeeStateInsurance)vID; }
    constexpr bool operator + (const eTWEmployeeStateInsurance pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWEmployeeStateInsurance pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWNationalPensionScheme () const { return (eTWNationalPensionScheme)vID; }
    constexpr bool operator + (const eTWNationalPensionScheme pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWNationalPensionScheme pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWIncomeTax () const { return (eTWIncomeTax)vID; }
    constexpr bool operator + (const eTWIncomeTax pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWIncomeTax pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWTCSDetails () const { return (eTWTCSDetails)vID; }
    constexpr bool operator + (const eTWTCSDetails pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWTCSDetails pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWCompanyTCSCollectorDetails () const { return (eTWCompanyTCSCollectorDetails)vID; }
    constexpr bool operator + (const eTWCompanyTCSCollectorDetails pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWCompanyTCSCollectorDetails pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWPersonResponsibleForTCS () const { return (eTWPersonResponsibleForTCS)vID; }
    constexpr bool operator + (const eTWPersonResponsibleForTCS pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWPersonResponsibleForTCS pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWSurchargeAndCessDetailsForTCS () const { return (eTWSurchargeAndCessDetailsForTCS)vID; }
    constexpr bool operator + (const eTWSurchargeAndCessDetailsForTCS pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWSurchargeAndCessDetailsForTCS pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWTDSDetails () const { return (eTWTDSDetails)vID; }
    constexpr bool operator + (const eTWTDSDetails pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWTDSDetails pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWCompanyTDSDeductorDetails () const { return (eTWCompanyTDSDeductorDetails)vID; }
    constexpr bool operator + (const eTWCompanyTDSDeductorDetails pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWCompanyTDSDeductorDetails pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWPersonResponsibleForTDS () const { return (eTWPersonResponsibleForTDS)vID; }
    constexpr bool operator + (const eTWPersonResponsibleForTDS pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWPersonResponsibleForTDS pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWSurchargeAndCessDetailsForTDS () const { return (eTWSurchargeAndCessDetailsForTDS)vID; }
    constexpr bool operator + (const eTWSurchargeAndCessDetailsForTDS pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWSurchargeAndCessDetailsForTDS pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWForm24QeTDS () const { return (eTWForm24QeTDS)vID; }
    constexpr bool operator + (const eTWForm24QeTDS pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWForm24QeTDS pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWForm24QDeductorDetails () const { return (eTWForm24QDeductorDetails)vID; }
    constexpr bool operator + (const eTWForm24QDeductorDetails pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWForm24QDeductorDetails pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWForm24QPersonResponsible () const { return (eTWForm24QPersonResponsible)vID; }
    constexpr bool operator + (const eTWForm24QPersonResponsible pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWForm24QPersonResponsible pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWFormTaxPaidtoCentralGov () const { return (eTWFormTaxPaidtoCentralGov)vID; }
    constexpr bool operator + (const eTWFormTaxPaidtoCentralGov pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWFormTaxPaidtoCentralGov pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWAnnexIDeducteeWiseBreakUp () const { return (eTWAnnexIDeducteeWiseBreakUp)vID; }
    constexpr bool operator + (const eTWAnnexIDeducteeWiseBreakUp pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWAnnexIDeducteeWiseBreakUp pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWAnnexIIDeducteeWiseBreakUp () const { return (eTWAnnexIIDeducteeWiseBreakUp)vID; }
    constexpr bool operator + (const eTWAnnexIIDeducteeWiseBreakUp pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWAnnexIIDeducteeWiseBreakUp pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWForm26QeTDS () const { return (eTWForm26QeTDS)vID; }
    constexpr bool operator + (const eTWForm26QeTDS pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWForm26QeTDS pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWForm26QDeductorDetails () const { return (eTWForm26QDeductorDetails)vID; }
    constexpr bool operator + (const eTWForm26QDeductorDetails pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWForm26QDeductorDetails pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWForm26QPersonResponsible () const { return (eTWForm26QPersonResponsible)vID; }
    constexpr bool operator + (const eTWForm26QPersonResponsible pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWForm26QPersonResponsible pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWForm26QTaxPaidtoCentralGov () const { return (eTWForm26QTaxPaidtoCentralGov)vID; }
    constexpr bool operator + (const eTWForm26QTaxPaidtoCentralGov pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWForm26QTaxPaidtoCentralGov pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWAnnexI26QDeducteeWiseBreakUp () const { return (eTWAnnexI26QDeducteeWiseBreakUp)vID; }
    constexpr bool operator + (const eTWAnnexI26QDeducteeWiseBreakUp pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWAnnexI26QDeducteeWiseBreakUp pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWForm27QeTDS () const { return (eTWForm27QeTDS)vID; }
    constexpr bool operator + (const eTWForm27QeTDS pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWForm27QeTDS pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWForm27QDeductorDetails () const { return (eTWForm27QDeductorDetails)vID; }
    constexpr bool operator + (const eTWForm27QDeductorDetails pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWForm27QDeductorDetails pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWForm27QPersonResponsible () const { return (eTWForm27QPersonResponsible)vID; }
    constexpr bool operator + (const eTWForm27QPersonResponsible pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWForm27QPersonResponsible pID) const { return (vID != (Enum)pID); }
    constexpr operator eTW27QTaxPaidtoCentralGov () const { return (eTW27QTaxPaidtoCentralGov)vID; }
    constexpr bool operator + (const eTW27QTaxPaidtoCentralGov pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTW27QTaxPaidtoCentralGov pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWAnnexI27QDeducteeWiseBreakUp () const { return (eTWAnnexI27QDeducteeWiseBreakUp)vID; }
    constexpr bool operator + (const eTWAnnexI27QDeducteeWiseBreakUp pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWAnnexI27QDeducteeWiseBreakUp pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWForm27EQeTDS () const { return (eTWForm27EQeTDS)vID; }
    constexpr bool operator + (const eTWForm27EQeTDS pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWForm27EQeTDS pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWForm27EQCOLLECTORDetails () const { return (eTWForm27EQCOLLECTORDetails)vID; }
    constexpr bool operator + (const eTWForm27EQCOLLECTORDetails pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWForm27EQCOLLECTORDetails pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWForm27EQPersonResponsible () const { return (eTWForm27EQPersonResponsible)vID; }
    constexpr bool operator + (const eTWForm27EQPersonResponsible pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWForm27EQPersonResponsible pID) const { return (vID != (Enum)pID); }
    constexpr operator eTW27EQTaxPaidtoCentralGov () const { return (eTW27EQTaxPaidtoCentralGov)vID; }
    constexpr bool operator + (const eTW27EQTaxPaidtoCentralGov pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTW27EQTaxPaidtoCentralGov pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWAnnexI27EQPartyWiseBreakUp () const { return (eTWAnnexI27EQPartyWiseBreakUp)vID; }
    constexpr bool operator + (const eTWAnnexI27EQPartyWiseBreakUp pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWAnnexI27EQPartyWiseBreakUp pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWForm27AeTDS () const { return (eTWForm27AeTDS)vID; }
    constexpr bool operator + (const eTWForm27AeTDS pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWForm27AeTDS pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWForm27ADetails () const { return (eTWForm27ADetails)vID; }
    constexpr bool operator + (const eTWForm27ADetails pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWForm27ADetails pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWForm27APersonResponsible () const { return (eTWForm27APersonResponsible)vID; }
    constexpr bool operator + (const eTWForm27APersonResponsible pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWForm27APersonResponsible pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWForm27ACONTROL () const { return (eTWForm27ACONTROL)vID; }
    constexpr bool operator + (const eTWForm27ACONTROL pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWForm27ACONTROL pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWMCASchema () const { return (eTWMCASchema)vID; }
    constexpr bool operator + (const eTWMCASchema pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWMCASchema pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWMCAAcquisitions () const { return (eTWMCAAcquisitions)vID; }
    constexpr bool operator + (const eTWMCAAcquisitions pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWMCAAcquisitions pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWMCAAuiditorInformation () const { return (eTWMCAAuiditorInformation)vID; }
    constexpr bool operator + (const eTWMCAAuiditorInformation pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWMCAAuiditorInformation pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWMCABorrowingInformation () const { return (eTWMCABorrowingInformation)vID; }
    constexpr bool operator + (const eTWMCABorrowingInformation pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWMCABorrowingInformation pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWMCAComponents () const { return (eTWMCAComponents)vID; }
    constexpr bool operator + (const eTWMCAComponents pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWMCAComponents pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWMCAEmployeeBenefits () const { return (eTWMCAEmployeeBenefits)vID; }
    constexpr bool operator + (const eTWMCAEmployeeBenefits pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWMCAEmployeeBenefits pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWMCAImpairmentDetails () const { return (eTWMCAImpairmentDetails)vID; }
    constexpr bool operator + (const eTWMCAImpairmentDetails pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWMCAImpairmentDetails pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWMCAImpairment () const { return (eTWMCAImpairment)vID; }
    constexpr bool operator + (const eTWMCAImpairment pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWMCAImpairment pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWMCAInventories () const { return (eTWMCAInventories)vID; }
    constexpr bool operator + (const eTWMCAInventories pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWMCAInventories pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWMCALoansAndAdvances () const { return (eTWMCALoansAndAdvances)vID; }
    constexpr bool operator + (const eTWMCALoansAndAdvances pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWMCALoansAndAdvances pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWMCAOtherProvisions () const { return (eTWMCAOtherProvisions)vID; }
    constexpr bool operator + (const eTWMCAOtherProvisions pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWMCAOtherProvisions pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWMCAProductProperties () const { return (eTWMCAProductProperties)vID; }
    constexpr bool operator + (const eTWMCAProductProperties pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWMCAProductProperties pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWMCAProductServices () const { return (eTWMCAProductServices)vID; }
    constexpr bool operator + (const eTWMCAProductServices pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWMCAProductServices pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWMCARawMaterials () const { return (eTWMCARawMaterials)vID; }
    constexpr bool operator + (const eTWMCARawMaterials pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWMCARawMaterials pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWMCASegement () const { return (eTWMCASegement)vID; }
    constexpr bool operator + (const eTWMCASegement pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWMCASegement pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWMCAShareholders () const { return (eTWMCAShareholders)vID; }
    constexpr bool operator + (const eTWMCAShareholders pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWMCAShareholders pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWXBRL () const { return (eTWXBRL)vID; }
    constexpr bool operator + (const eTWXBRL pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWXBRL pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWXBRLAmalgamation () const { return (eTWXBRLAmalgamation)vID; }
    constexpr bool operator + (const eTWXBRLAmalgamation pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWXBRLAmalgamation pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWXBRLDetails () const { return (eTWXBRLDetails)vID; }
    constexpr bool operator + (const eTWXBRLDetails pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWXBRLDetails pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWXBRLAuditorDetail () const { return (eTWXBRLAuditorDetail)vID; }
    constexpr bool operator + (const eTWXBRLAuditorDetail pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWXBRLAuditorDetail pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWXBRLDebentureDetail () const { return (eTWXBRLDebentureDetail)vID; }
    constexpr bool operator + (const eTWXBRLDebentureDetail pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWXBRLDebentureDetail pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWXBRLGoodsDetail () const { return (eTWXBRLGoodsDetail)vID; }
    constexpr bool operator + (const eTWXBRLGoodsDetail pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWXBRLGoodsDetail pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWXBRLDirectorsRemuneration () const { return (eTWXBRLDirectorsRemuneration)vID; }
    constexpr bool operator + (const eTWXBRLDirectorsRemuneration pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWXBRLDirectorsRemuneration pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWXBRLForeignBankBalanceDetails () const { return (eTWXBRLForeignBankBalanceDetails)vID; }
    constexpr bool operator + (const eTWXBRLForeignBankBalanceDetails pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWXBRLForeignBankBalanceDetails pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWXBRLInvestmentAssociates () const { return (eTWXBRLInvestmentAssociates)vID; }
    constexpr bool operator + (const eTWXBRLInvestmentAssociates pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWXBRLInvestmentAssociates pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWXBRLInvestmentJV () const { return (eTWXBRLInvestmentJV)vID; }
    constexpr bool operator + (const eTWXBRLInvestmentJV pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWXBRLInvestmentJV pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWXBRLMSME () const { return (eTWXBRLMSME)vID; }
    constexpr bool operator + (const eTWXBRLMSME pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWXBRLMSME pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWXBRLOtherDisclosures () const { return (eTWXBRLOtherDisclosures)vID; }
    constexpr bool operator + (const eTWXBRLOtherDisclosures pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWXBRLOtherDisclosures pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWXBRLPrimarySegmentDetail () const { return (eTWXBRLPrimarySegmentDetail)vID; }
    constexpr bool operator + (const eTWXBRLPrimarySegmentDetail pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWXBRLPrimarySegmentDetail pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWXBRLRawMaterialCons () const { return (eTWXBRLRawMaterialCons)vID; }
    constexpr bool operator + (const eTWXBRLRawMaterialCons pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWXBRLRawMaterialCons pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWXBRLRelatedPartyTransaction () const { return (eTWXBRLRelatedPartyTransaction)vID; }
    constexpr bool operator + (const eTWXBRLRelatedPartyTransaction pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWXBRLRelatedPartyTransaction pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWXBRLXBRLSecSegDetail () const { return (eTWXBRLXBRLSecSegDetail)vID; }
    constexpr bool operator + (const eTWXBRLXBRLSecSegDetail pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWXBRLXBRLSecSegDetail pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWXBRLXBRLShareCapital () const { return (eTWXBRLXBRLShareCapital)vID; }
    constexpr bool operator + (const eTWXBRLXBRLShareCapital pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWXBRLXBRLShareCapital pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWXBRLShareCapitalClassDetails () const { return (eTWXBRLShareCapitalClassDetails)vID; }
    constexpr bool operator + (const eTWXBRLShareCapitalClassDetails pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWXBRLShareCapitalClassDetails pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWXBRLDirectorDetail () const { return (eTWXBRLDirectorDetail)vID; }
    constexpr bool operator + (const eTWXBRLDirectorDetail pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWXBRLDirectorDetail pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWXBRLSubsidiaryInfo () const { return (eTWXBRLSubsidiaryInfo)vID; }
    constexpr bool operator + (const eTWXBRLSubsidiaryInfo pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWXBRLSubsidiaryInfo pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWScheduleVI () const { return (eTWScheduleVI)vID; }
    constexpr bool operator + (const eTWScheduleVI pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWScheduleVI pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWScheduleVIBorrowings () const { return (eTWScheduleVIBorrowings)vID; }
    constexpr bool operator + (const eTWScheduleVIBorrowings pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWScheduleVIBorrowings pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWScheduleVIFixedAssets () const { return (eTWScheduleVIFixedAssets)vID; }
    constexpr bool operator + (const eTWScheduleVIFixedAssets pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWScheduleVIFixedAssets pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWScheduleVIInvestments () const { return (eTWScheduleVIInvestments)vID; }
    constexpr bool operator + (const eTWScheduleVIInvestments pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWScheduleVIInvestments pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWScheduleVIShareCapitalDetails () const { return (eTWScheduleVIShareCapitalDetails)vID; }
    constexpr bool operator + (const eTWScheduleVIShareCapitalDetails pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWScheduleVIShareCapitalDetails pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWShareHoldersFunds () const { return (eTWShareHoldersFunds)vID; }
    constexpr bool operator + (const eTWShareHoldersFunds pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWShareHoldersFunds pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWShareByOtherCompany () const { return (eTWShareByOtherCompany)vID; }
    constexpr bool operator + (const eTWShareByOtherCompany pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWShareByOtherCompany pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWShareHolderShares () const { return (eTWShareHolderShares)vID; }
    constexpr bool operator + (const eTWShareHolderShares pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWShareHolderShares pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWAggregatedShares () const { return (eTWAggregatedShares)vID; }
    constexpr bool operator + (const eTWAggregatedShares pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWAggregatedShares pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWUNI_SCHEMA () const { return (eTWUNI_SCHEMA)vID; }
    constexpr bool operator + (const eTWUNI_SCHEMA pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWUNI_SCHEMA pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWUNI_SCHEMA_ENUM () const { return (eTWUNI_SCHEMA_ENUM)vID; }
    constexpr bool operator + (const eTWUNI_SCHEMA_ENUM pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWUNI_SCHEMA_ENUM pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWUNI_SCHEMA_CONSTANT () const { return (eTWUNI_SCHEMA_CONSTANT)vID; }
    constexpr bool operator + (const eTWUNI_SCHEMA_CONSTANT pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWUNI_SCHEMA_CONSTANT pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWUNI_CONTENT_SCHEMA_PROPERTIES () const { return (eTWUNI_CONTENT_SCHEMA_PROPERTIES)vID; }
    constexpr bool operator + (const eTWUNI_CONTENT_SCHEMA_PROPERTIES pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWUNI_CONTENT_SCHEMA_PROPERTIES pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWUNI_CONTAINER_CONTENT () const { return (eTWUNI_CONTAINER_CONTENT)vID; }
    constexpr bool operator + (const eTWUNI_CONTAINER_CONTENT pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWUNI_CONTAINER_CONTENT pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWUNI_CONTENT_SCHEMA () const { return (eTWUNI_CONTENT_SCHEMA)vID; }
    constexpr bool operator + (const eTWUNI_CONTENT_SCHEMA pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWUNI_CONTENT_SCHEMA pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWAPP_SCHEMA_METADATA () const { return (eTWAPP_SCHEMA_METADATA)vID; }
    constexpr bool operator + (const eTWAPP_SCHEMA_METADATA pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWAPP_SCHEMA_METADATA pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWCoreUISchema () const { return (eTWCoreUISchema)vID; }
    constexpr bool operator + (const eTWCoreUISchema pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWCoreUISchema pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWUIElementType () const { return (eTWUIElementType)vID; }
    constexpr bool operator + (const eTWUIElementType pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWUIElementType pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWUIPropertyType () const { return (eTWUIPropertyType)vID; }
    constexpr bool operator + (const eTWUIPropertyType pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWUIPropertyType pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWUISampleTemplates () const { return (eTWUISampleTemplates)vID; }
    constexpr bool operator + (const eTWUISampleTemplates pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWUISampleTemplates pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWUICompanySchemaFields () const { return (eTWUICompanySchemaFields)vID; }
    constexpr bool operator + (const eTWUICompanySchemaFields pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWUICompanySchemaFields pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWUILabelType () const { return (eTWUILabelType)vID; }
    constexpr bool operator + (const eTWUILabelType pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWUILabelType pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWUIPositionType () const { return (eTWUIPositionType)vID; }
    constexpr bool operator + (const eTWUIPositionType pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWUIPositionType pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWUIEventsType () const { return (eTWUIEventsType)vID; }
    constexpr bool operator + (const eTWUIEventsType pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWUIEventsType pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWUICallBackEventData () const { return (eTWUICallBackEventData)vID; }
    constexpr bool operator + (const eTWUICallBackEventData pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWUICallBackEventData pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWUIDimensionType () const { return (eTWUIDimensionType)vID; }
    constexpr bool operator + (const eTWUIDimensionType pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWUIDimensionType pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWBorderStyle () const { return (eTWBorderStyle)vID; }
    constexpr bool operator + (const eTWBorderStyle pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWBorderStyle pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWFontFamily () const { return (eTWFontFamily)vID; }
    constexpr bool operator + (const eTWFontFamily pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWFontFamily pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWScreenOrientationType () const { return (eTWScreenOrientationType)vID; }
    constexpr bool operator + (const eTWScreenOrientationType pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWScreenOrientationType pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWUIResponsivenessData () const { return (eTWUIResponsivenessData)vID; }
    constexpr bool operator + (const eTWUIResponsivenessData pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWUIResponsivenessData pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWClientCommandFieldID () const { return (eTWClientCommandFieldID)vID; }
    constexpr bool operator + (const eTWClientCommandFieldID pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWClientCommandFieldID pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWClientCommand () const { return (eTWClientCommand)vID; }
    constexpr bool operator + (const eTWClientCommand pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWClientCommand pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWClientActionFieldID () const { return (eTWClientActionFieldID)vID; }
    constexpr bool operator + (const eTWClientActionFieldID pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWClientActionFieldID pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWSchemaObjectFields () const { return (eTWSchemaObjectFields)vID; }
    constexpr bool operator + (const eTWSchemaObjectFields pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWSchemaObjectFields pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWClientSchemaFieldID () const { return (eTWClientSchemaFieldID)vID; }
    constexpr bool operator + (const eTWClientSchemaFieldID pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWClientSchemaFieldID pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWPANIC_OBJECT () const { return (eTWPANIC_OBJECT)vID; }
    constexpr bool operator + (const eTWPANIC_OBJECT pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWPANIC_OBJECT pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWUI_POSITION () const { return (eTWUI_POSITION)vID; }
    constexpr bool operator + (const eTWUI_POSITION pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWUI_POSITION pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWUI_DIMENSION () const { return (eTWUI_DIMENSION)vID; }
    constexpr bool operator + (const eTWUI_DIMENSION pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWUI_DIMENSION pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWUI_PADDING () const { return (eTWUI_PADDING)vID; }
    constexpr bool operator + (const eTWUI_PADDING pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWUI_PADDING pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWUI_BORDER () const { return (eTWUI_BORDER)vID; }
    constexpr bool operator + (const eTWUI_BORDER pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWUI_BORDER pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWALIGNMENT () const { return (eTWALIGNMENT)vID; }
    constexpr bool operator + (const eTWALIGNMENT pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWALIGNMENT pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWUI_FONT () const { return (eTWUI_FONT)vID; }
    constexpr bool operator + (const eTWUI_FONT pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWUI_FONT pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWWINDOW () const { return (eTWWINDOW)vID; }
    constexpr bool operator + (const eTWWINDOW pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWWINDOW pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWPAGE () const { return (eTWPAGE)vID; }
    constexpr bool operator + (const eTWPAGE pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWPAGE pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWPANE () const { return (eTWPANE)vID; }
    constexpr bool operator + (const eTWPANE pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWPANE pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWPART () const { return (eTWPART)vID; }
    constexpr bool operator + (const eTWPART pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWPART pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWUIFORM () const { return (eTWUIFORM)vID; }
    constexpr bool operator + (const eTWUIFORM pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWUIFORM pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWUIREPORT () const { return (eTWUIREPORT)vID; }
    constexpr bool operator + (const eTWUIREPORT pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWUIREPORT pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWLINE () const { return (eTWLINE)vID; }
    constexpr bool operator + (const eTWLINE pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWLINE pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWUIFIELD () const { return (eTWUIFIELD)vID; }
    constexpr bool operator + (const eTWUIFIELD pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWUIFIELD pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWLABEL () const { return (eTWLABEL)vID; }
    constexpr bool operator + (const eTWLABEL pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWLABEL pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWBUTTON () const { return (eTWBUTTON)vID; }
    constexpr bool operator + (const eTWBUTTON pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWBUTTON pID) const { return (vID != (Enum)pID); }
    constexpr operator eTWTEXTEDIT () const { return (eTWTEXTEDIT)vID; }
    constexpr bool operator + (const eTWTEXTEDIT pID) const { return (vID == (Enum)pID); }
    constexpr bool operator != (const eTWTEXTEDIT pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWLIST () const { return (eTWLIST)vID; }
    //constexpr bool operator == (const eTWLIST pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWLIST pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWUI_TEMPLATE_WELCOME_MESSAGE () const { return (eTWUI_TEMPLATE_WELCOME_MESSAGE)vID; }
    //constexpr bool operator == (const eTWUI_TEMPLATE_WELCOME_MESSAGE pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWUI_TEMPLATE_WELCOME_MESSAGE pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWUI_TEMPLATE_MENU_LIST () const { return (eTWUI_TEMPLATE_MENU_LIST)vID; }
    //constexpr bool operator == (const eTWUI_TEMPLATE_MENU_LIST pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWUI_TEMPLATE_MENU_LIST pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWMENU_ENTRY () const { return (eTWMENU_ENTRY)vID; }
    //constexpr bool operator == (const eTWMENU_ENTRY pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWMENU_ENTRY pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWUI_TEMPLATE_REPORT_VIEW () const { return (eTWUI_TEMPLATE_REPORT_VIEW)vID; }
    //constexpr bool operator == (const eTWUI_TEMPLATE_REPORT_VIEW pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWUI_TEMPLATE_REPORT_VIEW pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWREPORT_HEADER () const { return (eTWREPORT_HEADER)vID; }
    //constexpr bool operator == (const eTWREPORT_HEADER pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWREPORT_HEADER pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWREPORT_COLUMN () const { return (eTWREPORT_COLUMN)vID; }
    //constexpr bool operator == (const eTWREPORT_COLUMN pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWREPORT_COLUMN pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWUI_TEMPLATE_FORM () const { return (eTWUI_TEMPLATE_FORM)vID; }
    //constexpr bool operator == (const eTWUI_TEMPLATE_FORM pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWUI_TEMPLATE_FORM pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWFORM_ENTRY () const { return (eTWFORM_ENTRY)vID; }
    //constexpr bool operator == (const eTWFORM_ENTRY pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWFORM_ENTRY pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWFIELD_VALIDATE_PARMS () const { return (eTWFIELD_VALIDATE_PARMS)vID; }
    //constexpr bool operator == (const eTWFIELD_VALIDATE_PARMS pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWFIELD_VALIDATE_PARMS pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWADDITIONAL_BUTTONS () const { return (eTWADDITIONAL_BUTTONS)vID; }
    //constexpr bool operator == (const eTWADDITIONAL_BUTTONS pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWADDITIONAL_BUTTONS pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWUI_TEMPLATE_COMPOUND_VIEW () const { return (eTWUI_TEMPLATE_COMPOUND_VIEW)vID; }
    //constexpr bool operator == (const eTWUI_TEMPLATE_COMPOUND_VIEW pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWUI_TEMPLATE_COMPOUND_VIEW pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWSCREEN () const { return (eTWSCREEN)vID; }
    //constexpr bool operator == (const eTWSCREEN pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWSCREEN pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWSCREEN_LIST () const { return (eTWSCREEN_LIST)vID; }
    //constexpr bool operator == (const eTWSCREEN_LIST pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWSCREEN_LIST pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWDC_LIST () const { return (eTWDC_LIST)vID; }
    //constexpr bool operator == (const eTWDC_LIST pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWDC_LIST pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWZONE () const { return (eTWZONE)vID; }
    //constexpr bool operator == (const eTWZONE pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWZONE pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWROW () const { return (eTWROW)vID; }
    //constexpr bool operator == (const eTWROW pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWROW pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWCELL () const { return (eTWCELL)vID; }
    //constexpr bool operator == (const eTWCELL pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWCELL pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWCONSOLE_COMM_PARMS () const { return (eTWCONSOLE_COMM_PARMS)vID; }
    //constexpr bool operator == (const eTWCONSOLE_COMM_PARMS pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWCONSOLE_COMM_PARMS pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWAPPLICATION_GATEWAY_OF_TALLY_OBJ () const { return (eTWAPPLICATION_GATEWAY_OF_TALLY_OBJ)vID; }
    //constexpr bool operator == (const eTWAPPLICATION_GATEWAY_OF_TALLY_OBJ pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWAPPLICATION_GATEWAY_OF_TALLY_OBJ pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWGATEWAY_REPORTS () const { return (eTWGATEWAY_REPORTS)vID; }
    //constexpr bool operator == (const eTWGATEWAY_REPORTS pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWGATEWAY_REPORTS pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWIDC_ADDITIONAL_INFO () const { return (eTWIDC_ADDITIONAL_INFO)vID; }
    //constexpr bool operator == (const eTWIDC_ADDITIONAL_INFO pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWIDC_ADDITIONAL_INFO pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWFRAME_PAGE_OBJECT () const { return (eTWFRAME_PAGE_OBJECT)vID; }
    //constexpr bool operator == (const eTWFRAME_PAGE_OBJECT pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWFRAME_PAGE_OBJECT pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWPANE_OBJECT_ID () const { return (eTWPANE_OBJECT_ID)vID; }
    //constexpr bool operator == (const eTWPANE_OBJECT_ID pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWPANE_OBJECT_ID pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWPRESENTATION_RENDER_WINDOW_REQUEST_SCHEMA () const { return (eTWPRESENTATION_RENDER_WINDOW_REQUEST_SCHEMA)vID; }
    //constexpr bool operator == (const eTWPRESENTATION_RENDER_WINDOW_REQUEST_SCHEMA pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWPRESENTATION_RENDER_WINDOW_REQUEST_SCHEMA pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWPRESENTATION_PROCESS_LAYOUT_REQUEST_SCHEMA () const { return (eTWPRESENTATION_PROCESS_LAYOUT_REQUEST_SCHEMA)vID; }
    //constexpr bool operator == (const eTWPRESENTATION_PROCESS_LAYOUT_REQUEST_SCHEMA pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWPRESENTATION_PROCESS_LAYOUT_REQUEST_SCHEMA pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWPRESENTATION_LAUNCH_RUNTIME_WINDOW_REQUEST_SCHEMA () const { return (eTWPRESENTATION_LAUNCH_RUNTIME_WINDOW_REQUEST_SCHEMA)vID; }
    //constexpr bool operator == (const eTWPRESENTATION_LAUNCH_RUNTIME_WINDOW_REQUEST_SCHEMA pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWPRESENTATION_LAUNCH_RUNTIME_WINDOW_REQUEST_SCHEMA pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWPRESENTATION_CREATE_STARTUP_WINDOW_REQUEST_SCHEMA () const { return (eTWPRESENTATION_CREATE_STARTUP_WINDOW_REQUEST_SCHEMA)vID; }
    //constexpr bool operator == (const eTWPRESENTATION_CREATE_STARTUP_WINDOW_REQUEST_SCHEMA pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWPRESENTATION_CREATE_STARTUP_WINDOW_REQUEST_SCHEMA pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWPRESENTATION_CLOSE_APP_WINDOW_REQUEST_SCHEMA () const { return (eTWPRESENTATION_CLOSE_APP_WINDOW_REQUEST_SCHEMA)vID; }
    //constexpr bool operator == (const eTWPRESENTATION_CLOSE_APP_WINDOW_REQUEST_SCHEMA pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWPRESENTATION_CLOSE_APP_WINDOW_REQUEST_SCHEMA pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWPRESENTATION_PROCESS_EVENTS_REQUEST_SCHEMA () const { return (eTWPRESENTATION_PROCESS_EVENTS_REQUEST_SCHEMA)vID; }
    //constexpr bool operator == (const eTWPRESENTATION_PROCESS_EVENTS_REQUEST_SCHEMA pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWPRESENTATION_PROCESS_EVENTS_REQUEST_SCHEMA pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWPRESENTATION_INTERNAL_UI_EVENT_RESPONSE_SCHEMA () const { return (eTWPRESENTATION_INTERNAL_UI_EVENT_RESPONSE_SCHEMA)vID; }
    //constexpr bool operator == (const eTWPRESENTATION_INTERNAL_UI_EVENT_RESPONSE_SCHEMA pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWPRESENTATION_INTERNAL_UI_EVENT_RESPONSE_SCHEMA pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWQueryDC () const { return (eTWQueryDC)vID; }
    //constexpr bool operator == (const eTWQueryDC pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWQueryDC pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWBootstrapFormIDs () const { return (eTWBootstrapFormIDs)vID; }
    //constexpr bool operator == (const eTWBootstrapFormIDs pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWBootstrapFormIDs pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWLoginFormIDs () const { return (eTWLoginFormIDs)vID; }
    //constexpr bool operator == (const eTWLoginFormIDs pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWLoginFormIDs pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWTW_ADMINDC_LANG_OBJ () const { return (eTWTW_ADMINDC_LANG_OBJ)vID; }
    //constexpr bool operator == (const eTWTW_ADMINDC_LANG_OBJ pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWTW_ADMINDC_LANG_OBJ pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWTW_ADMINDC_QUERY_OBJ () const { return (eTWTW_ADMINDC_QUERY_OBJ)vID; }
    //constexpr bool operator == (const eTWTW_ADMINDC_QUERY_OBJ pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWTW_ADMINDC_QUERY_OBJ pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWTW_APP_PREFS_OBJECT () const { return (eTWTW_APP_PREFS_OBJECT)vID; }
    //constexpr bool operator == (const eTWTW_APP_PREFS_OBJECT pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWTW_APP_PREFS_OBJECT pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWTW_YOGINI_BS_FILE_OBJECT () const { return (eTWTW_YOGINI_BS_FILE_OBJECT)vID; }
    //constexpr bool operator == (const eTWTW_YOGINI_BS_FILE_OBJECT pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWTW_YOGINI_BS_FILE_OBJECT pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWTW_LANGUAGE_LIST () const { return (eTWTW_LANGUAGE_LIST)vID; }
    //constexpr bool operator == (const eTWTW_LANGUAGE_LIST pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWTW_LANGUAGE_LIST pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWTW_UNIVERSE_SUPERUSERS () const { return (eTWTW_UNIVERSE_SUPERUSERS)vID; }
    //constexpr bool operator == (const eTWTW_UNIVERSE_SUPERUSERS pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWTW_UNIVERSE_SUPERUSERS pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWTW_UNIVERSE_SUPERUSER () const { return (eTWTW_UNIVERSE_SUPERUSER)vID; }
    //constexpr bool operator == (const eTWTW_UNIVERSE_SUPERUSER pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWTW_UNIVERSE_SUPERUSER pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWTW_APP_CURRENT_LANGUAGE_OBJ () const { return (eTWTW_APP_CURRENT_LANGUAGE_OBJ)vID; }
    //constexpr bool operator == (const eTWTW_APP_CURRENT_LANGUAGE_OBJ pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWTW_APP_CURRENT_LANGUAGE_OBJ pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWSCHEMA_GET_LANGUAGES () const { return (eTWSCHEMA_GET_LANGUAGES)vID; }
    //constexpr bool operator == (const eTWSCHEMA_GET_LANGUAGES pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWSCHEMA_GET_LANGUAGES pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWLANGUAGE_OBJ () const { return (eTWLANGUAGE_OBJ)vID; }
    //constexpr bool operator == (const eTWLANGUAGE_OBJ pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWLANGUAGE_OBJ pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWTW_QUERY_SCHEMA () const { return (eTWTW_QUERY_SCHEMA)vID; }
    //constexpr bool operator == (const eTWTW_QUERY_SCHEMA pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWTW_QUERY_SCHEMA pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWSchemaCompanyType () const { return (eTWSchemaCompanyType)vID; }
    //constexpr bool operator == (const eTWSchemaCompanyType pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWSchemaCompanyType pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWTW_SERVERDC_QUERY_ID () const { return (eTWTW_SERVERDC_QUERY_ID)vID; }
    //constexpr bool operator == (const eTWTW_SERVERDC_QUERY_ID pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWTW_SERVERDC_QUERY_ID pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWLEDGER_OBJECT () const { return (eTWLEDGER_OBJECT)vID; }
    //constexpr bool operator == (const eTWLEDGER_OBJECT pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWLEDGER_OBJECT pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWAUTHENTICATED_USER_OBJECT () const { return (eTWAUTHENTICATED_USER_OBJECT)vID; }
    //constexpr bool operator == (const eTWAUTHENTICATED_USER_OBJECT pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWAUTHENTICATED_USER_OBJECT pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWLEDGER_OBJECT_EXT () const { return (eTWLEDGER_OBJECT_EXT)vID; }
    //constexpr bool operator == (const eTWLEDGER_OBJECT_EXT pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWLEDGER_OBJECT_EXT pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWCOMPANY_OBJECT () const { return (eTWCOMPANY_OBJECT)vID; }
    //constexpr bool operator == (const eTWCOMPANY_OBJECT pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWCOMPANY_OBJECT pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWPATH_OBJECT () const { return (eTWPATH_OBJECT)vID; }
    //constexpr bool operator == (const eTWPATH_OBJECT pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWPATH_OBJECT pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWMESSAGE_OBJECT () const { return (eTWMESSAGE_OBJECT)vID; }
    //constexpr bool operator == (const eTWMESSAGE_OBJECT pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWMESSAGE_OBJECT pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWOPEN_COMPANY_LIST_OBJ () const { return (eTWOPEN_COMPANY_LIST_OBJ)vID; }
    //constexpr bool operator == (const eTWOPEN_COMPANY_LIST_OBJ pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWOPEN_COMPANY_LIST_OBJ pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWClientPlatform () const { return (eTWClientPlatform)vID; }
    //constexpr bool operator == (const eTWClientPlatform pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWClientPlatform pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWDITOBJECT () const { return (eTWDITOBJECT)vID; }
    //constexpr bool operator == (const eTWDITOBJECT pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWDITOBJECT pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWUSEROBJECT () const { return (eTWUSEROBJECT)vID; }
    //constexpr bool operator == (const eTWUSEROBJECT pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWUSEROBJECT pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWRESERVEOBJECT () const { return (eTWRESERVEOBJECT)vID; }
    //constexpr bool operator == (const eTWRESERVEOBJECT pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWRESERVEOBJECT pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWIPV4OBJECT () const { return (eTWIPV4OBJECT)vID; }
    //constexpr bool operator == (const eTWIPV4OBJECT pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWIPV4OBJECT pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWTW_CLIENT_QUERY_OBJ () const { return (eTWTW_CLIENT_QUERY_OBJ)vID; }
    //constexpr bool operator == (const eTWTW_CLIENT_QUERY_OBJ pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWTW_CLIENT_QUERY_OBJ pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWPresentationCommSchema () const { return (eTWPresentationCommSchema)vID; }
    //constexpr bool operator == (const eTWPresentationCommSchema pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWPresentationCommSchema pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWTW_TS_CONFIG_API_SCHEMA () const { return (eTWTW_TS_CONFIG_API_SCHEMA)vID; }
    //constexpr bool operator == (const eTWTW_TS_CONFIG_API_SCHEMA pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWTW_TS_CONFIG_API_SCHEMA pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWTW_TS_CONFIG_RESP_API_SCHEMA () const { return (eTWTW_TS_CONFIG_RESP_API_SCHEMA)vID; }
    //constexpr bool operator == (const eTWTW_TS_CONFIG_RESP_API_SCHEMA pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWTW_TS_CONFIG_RESP_API_SCHEMA pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWTSRealmServicesObject () const { return (eTWTSRealmServicesObject)vID; }
    //constexpr bool operator == (const eTWTSRealmServicesObject pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWTSRealmServicesObject pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWPING_SCRATCHPAD_SCHEMA () const { return (eTWPING_SCRATCHPAD_SCHEMA)vID; }
    //constexpr bool operator == (const eTWPING_SCRATCHPAD_SCHEMA pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWPING_SCRATCHPAD_SCHEMA pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWQueryLanguage () const { return (eTWQueryLanguage)vID; }
    //constexpr bool operator == (const eTWQueryLanguage pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWQueryLanguage pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWPREMISE_BOOTSTRAP_REQ_SCHEMA () const { return (eTWPREMISE_BOOTSTRAP_REQ_SCHEMA)vID; }
    //constexpr bool operator == (const eTWPREMISE_BOOTSTRAP_REQ_SCHEMA pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWPREMISE_BOOTSTRAP_REQ_SCHEMA pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWIPID_AND_ITS_STATUS () const { return (eTWIPID_AND_ITS_STATUS)vID; }
    //constexpr bool operator == (const eTWIPID_AND_ITS_STATUS pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWIPID_AND_ITS_STATUS pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWPREMISE_FETCH_IPIDS_RESP_SCHEMA () const { return (eTWPREMISE_FETCH_IPIDS_RESP_SCHEMA)vID; }
    //constexpr bool operator == (const eTWPREMISE_FETCH_IPIDS_RESP_SCHEMA pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWPREMISE_FETCH_IPIDS_RESP_SCHEMA pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWLOGINHANDLER_REQ_SCHEMA () const { return (eTWLOGINHANDLER_REQ_SCHEMA)vID; }
    //constexpr bool operator == (const eTWLOGINHANDLER_REQ_SCHEMA pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWLOGINHANDLER_REQ_SCHEMA pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWYOGINI_BOOTSTRAPHANDLER_REQ_SCHEMA () const { return (eTWYOGINI_BOOTSTRAPHANDLER_REQ_SCHEMA)vID; }
    //constexpr bool operator == (const eTWYOGINI_BOOTSTRAPHANDLER_REQ_SCHEMA pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWYOGINI_BOOTSTRAPHANDLER_REQ_SCHEMA pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWPREMISE_ADMINQUERY_REQ_SCHEMA () const { return (eTWPREMISE_ADMINQUERY_REQ_SCHEMA)vID; }
    //constexpr bool operator == (const eTWPREMISE_ADMINQUERY_REQ_SCHEMA pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWPREMISE_ADMINQUERY_REQ_SCHEMA pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWPREMISE_LANGUAGEHANDLER_REQ_SCHEMA () const { return (eTWPREMISE_LANGUAGEHANDLER_REQ_SCHEMA)vID; }
    //constexpr bool operator == (const eTWPREMISE_LANGUAGEHANDLER_REQ_SCHEMA pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWPREMISE_LANGUAGEHANDLER_REQ_SCHEMA pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWPREMISE_ADMINQUERY_CONTEXT_SCHEMA () const { return (eTWPREMISE_ADMINQUERY_CONTEXT_SCHEMA)vID; }
    //constexpr bool operator == (const eTWPREMISE_ADMINQUERY_CONTEXT_SCHEMA pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWPREMISE_ADMINQUERY_CONTEXT_SCHEMA pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWPREMISE_LANGUAGEQUERY_RESP_SCHEMA () const { return (eTWPREMISE_LANGUAGEQUERY_RESP_SCHEMA)vID; }
    //constexpr bool operator == (const eTWPREMISE_LANGUAGEQUERY_RESP_SCHEMA pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWPREMISE_LANGUAGEQUERY_RESP_SCHEMA pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWUIYoginiSchemaFields () const { return (eTWUIYoginiSchemaFields)vID; }
    //constexpr bool operator == (const eTWUIYoginiSchemaFields pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWUIYoginiSchemaFields pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWUIFileProperty () const { return (eTWUIFileProperty)vID; }
    //constexpr bool operator == (const eTWUIFileProperty pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWUIFileProperty pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWYoginiQueryDCExtensions () const { return (eTWYoginiQueryDCExtensions)vID; }
    //constexpr bool operator == (const eTWYoginiQueryDCExtensions pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWYoginiQueryDCExtensions pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWYOGINI_OPENPRAJAPATIDB_REQ_SCHEMA () const { return (eTWYOGINI_OPENPRAJAPATIDB_REQ_SCHEMA)vID; }
    //constexpr bool operator == (const eTWYOGINI_OPENPRAJAPATIDB_REQ_SCHEMA pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWYOGINI_OPENPRAJAPATIDB_REQ_SCHEMA pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWYOGINI_ADDPRAJAPATIIP_REQ_SCHEMA () const { return (eTWYOGINI_ADDPRAJAPATIIP_REQ_SCHEMA)vID; }
    //constexpr bool operator == (const eTWYOGINI_ADDPRAJAPATIIP_REQ_SCHEMA pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWYOGINI_ADDPRAJAPATIIP_REQ_SCHEMA pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWYOGINI_DELETEPRAJAPATIIP_REQ_SCHEMA () const { return (eTWYOGINI_DELETEPRAJAPATIIP_REQ_SCHEMA)vID; }
    //constexpr bool operator == (const eTWYOGINI_DELETEPRAJAPATIIP_REQ_SCHEMA pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWYOGINI_DELETEPRAJAPATIIP_REQ_SCHEMA pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWYOGINI_SHOWPRAJAPATIIPS_REQ_SCHEMA () const { return (eTWYOGINI_SHOWPRAJAPATIIPS_REQ_SCHEMA)vID; }
    //constexpr bool operator == (const eTWYOGINI_SHOWPRAJAPATIIPS_REQ_SCHEMA pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWYOGINI_SHOWPRAJAPATIIPS_REQ_SCHEMA pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWYOGINI_SHOWPRAJAPATIIPS_RESP_SCHEMA () const { return (eTWYOGINI_SHOWPRAJAPATIIPS_RESP_SCHEMA)vID; }
    //constexpr bool operator == (const eTWYOGINI_SHOWPRAJAPATIIPS_RESP_SCHEMA pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWYOGINI_SHOWPRAJAPATIIPS_RESP_SCHEMA pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWTW_LIST_OF_PRAJAPATI_IPS () const { return (eTWTW_LIST_OF_PRAJAPATI_IPS)vID; }
    //constexpr bool operator == (const eTWTW_LIST_OF_PRAJAPATI_IPS pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWTW_LIST_OF_PRAJAPATI_IPS pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWTW_SITE_CONFIG_API_SCHEMA () const { return (eTWTW_SITE_CONFIG_API_SCHEMA)vID; }
    //constexpr bool operator == (const eTWTW_SITE_CONFIG_API_SCHEMA pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWTW_SITE_CONFIG_API_SCHEMA pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWTW_SITE_CONFIG_RESP_API_SCHEMA () const { return (eTWTW_SITE_CONFIG_RESP_API_SCHEMA)vID; }
    //constexpr bool operator == (const eTWTW_SITE_CONFIG_RESP_API_SCHEMA pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWTW_SITE_CONFIG_RESP_API_SCHEMA pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWKSHETRAPAL_OPENFILE_REQ_SCHEMA () const { return (eTWKSHETRAPAL_OPENFILE_REQ_SCHEMA)vID; }
    //constexpr bool operator == (const eTWKSHETRAPAL_OPENFILE_REQ_SCHEMA pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWKSHETRAPAL_OPENFILE_REQ_SCHEMA pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWDIT_OBJECT () const { return (eTWDIT_OBJECT)vID; }
    //constexpr bool operator == (const eTWDIT_OBJECT pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWDIT_OBJECT pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWTW_LIST_OF_USER_IDS () const { return (eTWTW_LIST_OF_USER_IDS)vID; }
    //constexpr bool operator == (const eTWTW_LIST_OF_USER_IDS pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWTW_LIST_OF_USER_IDS pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWPremisServerAPIFields () const { return (eTWPremisServerAPIFields)vID; }
    //constexpr bool operator == (const eTWPremisServerAPIFields pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWPremisServerAPIFields pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWPremiseServerFeaturesPayloadID () const { return (eTWPremiseServerFeaturesPayloadID)vID; }
    //constexpr bool operator == (const eTWPremiseServerFeaturesPayloadID pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWPremiseServerFeaturesPayloadID pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWPremiseClientFeaturesPayloadID () const { return (eTWPremiseClientFeaturesPayloadID)vID; }
    //constexpr bool operator == (const eTWPremiseClientFeaturesPayloadID pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWPremiseClientFeaturesPayloadID pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWPremiseClientPayloadID () const { return (eTWPremiseClientPayloadID)vID; }
    //constexpr bool operator == (const eTWPremiseClientPayloadID pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWPremiseClientPayloadID pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWSchemaPropertiesObjectType () const { return (eTWSchemaPropertiesObjectType)vID; }
    //constexpr bool operator == (const eTWSchemaPropertiesObjectType pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWSchemaPropertiesObjectType pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWClientDCCommands () const { return (eTWClientDCCommands)vID; }
    //constexpr bool operator == (const eTWClientDCCommands pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWClientDCCommands pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWCDC_AUTHENTICATED_USER_OBJ () const { return (eTWCDC_AUTHENTICATED_USER_OBJ)vID; }
    //constexpr bool operator == (const eTWCDC_AUTHENTICATED_USER_OBJ pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWCDC_AUTHENTICATED_USER_OBJ pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWCDC_COMPANY_DETAILS_OBJ () const { return (eTWCDC_COMPANY_DETAILS_OBJ)vID; }
    //constexpr bool operator == (const eTWCDC_COMPANY_DETAILS_OBJ pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWCDC_COMPANY_DETAILS_OBJ pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWCDC_USER_OBJ () const { return (eTWCDC_USER_OBJ)vID; }
    //constexpr bool operator == (const eTWCDC_USER_OBJ pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWCDC_USER_OBJ pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWCDC_COMPANY_OBJ () const { return (eTWCDC_COMPANY_OBJ)vID; }
    //constexpr bool operator == (const eTWCDC_COMPANY_OBJ pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWCDC_COMPANY_OBJ pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWUSER_DEF_PATH_OBJ () const { return (eTWUSER_DEF_PATH_OBJ)vID; }
    //constexpr bool operator == (const eTWUSER_DEF_PATH_OBJ pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWUSER_DEF_PATH_OBJ pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWCDC_UI_OBJ () const { return (eTWCDC_UI_OBJ)vID; }
    //constexpr bool operator == (const eTWCDC_UI_OBJ pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWCDC_UI_OBJ pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWCLIENT_CONNECTREQUEST_REQ_SCHEMA () const { return (eTWCLIENT_CONNECTREQUEST_REQ_SCHEMA)vID; }
    //constexpr bool operator == (const eTWCLIENT_CONNECTREQUEST_REQ_SCHEMA pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWCLIENT_CONNECTREQUEST_REQ_SCHEMA pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWCLIENT_CONNECTREQUEST_RESP_SCHEMA () const { return (eTWCLIENT_CONNECTREQUEST_RESP_SCHEMA)vID; }
    //constexpr bool operator == (const eTWCLIENT_CONNECTREQUEST_RESP_SCHEMA pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWCLIENT_CONNECTREQUEST_RESP_SCHEMA pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWCLIENT_DISCONNECTREQUEST_REQ_SCHEMA () const { return (eTWCLIENT_DISCONNECTREQUEST_REQ_SCHEMA)vID; }
    //constexpr bool operator == (const eTWCLIENT_DISCONNECTREQUEST_REQ_SCHEMA pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWCLIENT_DISCONNECTREQUEST_REQ_SCHEMA pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWSOURCE_UNI_SCHEMA () const { return (eTWSOURCE_UNI_SCHEMA)vID; }
    //constexpr bool operator == (const eTWSOURCE_UNI_SCHEMA pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWSOURCE_UNI_SCHEMA pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWSOURCE_UNI_SCHEMA_ENUM () const { return (eTWSOURCE_UNI_SCHEMA_ENUM)vID; }
    //constexpr bool operator == (const eTWSOURCE_UNI_SCHEMA_ENUM pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWSOURCE_UNI_SCHEMA_ENUM pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWSOURCE_UNI_SCHEMA_CONSTANT () const { return (eTWSOURCE_UNI_SCHEMA_CONSTANT)vID; }
    //constexpr bool operator == (const eTWSOURCE_UNI_SCHEMA_CONSTANT pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWSOURCE_UNI_SCHEMA_CONSTANT pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWSOURCE_CONTENT_SCHEMA_PROPERTIES () const { return (eTWSOURCE_CONTENT_SCHEMA_PROPERTIES)vID; }
    //constexpr bool operator == (const eTWSOURCE_CONTENT_SCHEMA_PROPERTIES pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWSOURCE_CONTENT_SCHEMA_PROPERTIES pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWSOURCE_CONTAINER_CONTENT () const { return (eTWSOURCE_CONTAINER_CONTENT)vID; }
    //constexpr bool operator == (const eTWSOURCE_CONTAINER_CONTENT pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWSOURCE_CONTAINER_CONTENT pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWSOURCE_CONTENT_SCHEMA () const { return (eTWSOURCE_CONTENT_SCHEMA)vID; }
    //constexpr bool operator == (const eTWSOURCE_CONTENT_SCHEMA pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWSOURCE_CONTENT_SCHEMA pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWTWCMakePresetCacheVar () const { return (eTWTWCMakePresetCacheVar)vID; }
    //constexpr bool operator == (const eTWTWCMakePresetCacheVar pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWTWCMakePresetCacheVar pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWTWCMakePresetEnvVar () const { return (eTWTWCMakePresetEnvVar)vID; }
    //constexpr bool operator == (const eTWTWCMakePresetEnvVar pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWTWCMakePresetEnvVar pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWTWCMakeVSSVendorVar () const { return (eTWTWCMakeVSSVendorVar)vID; }
    //constexpr bool operator == (const eTWTWCMakeVSSVendorVar pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWTWCMakeVSSVendorVar pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWTWCMakeVSRSVendorVar () const { return (eTWTWCMakeVSRSVendorVar)vID; }
    //constexpr bool operator == (const eTWTWCMakeVSRSVendorVar pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWTWCMakeVSRSVendorVar pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWTWToolChainFlags () const { return (eTWTWToolChainFlags)vID; }
    //constexpr bool operator == (const eTWTWToolChainFlags pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWTWToolChainFlags pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWTWHostToolChainFlags () const { return (eTWTWHostToolChainFlags)vID; }
    //constexpr bool operator == (const eTWTWHostToolChainFlags pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWTWHostToolChainFlags pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWBUILDGEN_OS () const { return (eTWBUILDGEN_OS)vID; }
    //constexpr bool operator == (const eTWBUILDGEN_OS pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWBUILDGEN_OS pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWBUILDGEN_KERNEL () const { return (eTWBUILDGEN_KERNEL)vID; }
    //constexpr bool operator == (const eTWBUILDGEN_KERNEL pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWBUILDGEN_KERNEL pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWBUILDGEN_ARCH () const { return (eTWBUILDGEN_ARCH)vID; }
    //constexpr bool operator == (const eTWBUILDGEN_ARCH pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWBUILDGEN_ARCH pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWBUILDGEN_PRESET () const { return (eTWBUILDGEN_PRESET)vID; }
    //constexpr bool operator == (const eTWBUILDGEN_PRESET pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWBUILDGEN_PRESET pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWBUILDGEN_CMAKE_PRESET () const { return (eTWBUILDGEN_CMAKE_PRESET)vID; }
    //constexpr bool operator == (const eTWBUILDGEN_CMAKE_PRESET pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWBUILDGEN_CMAKE_PRESET pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWBUILDGEN_CONFIG () const { return (eTWBUILDGEN_CONFIG)vID; }
    //constexpr bool operator == (const eTWBUILDGEN_CONFIG pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWBUILDGEN_CONFIG pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWBUILDGEN_STAGE () const { return (eTWBUILDGEN_STAGE)vID; }
    //constexpr bool operator == (const eTWBUILDGEN_STAGE pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWBUILDGEN_STAGE pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWBUILDGEN_TRUNK () const { return (eTWBUILDGEN_TRUNK)vID; }
    //constexpr bool operator == (const eTWBUILDGEN_TRUNK pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWBUILDGEN_TRUNK pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWBUILD_CONDITION_VALUE () const { return (eTWBUILD_CONDITION_VALUE)vID; }
    //constexpr bool operator == (const eTWBUILD_CONDITION_VALUE pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWBUILD_CONDITION_VALUE pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWAPP_CONDITION_VALUE () const { return (eTWAPP_CONDITION_VALUE)vID; }
    //constexpr bool operator == (const eTWAPP_CONDITION_VALUE pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWAPP_CONDITION_VALUE pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWBUILDGEN_LAYER () const { return (eTWBUILDGEN_LAYER)vID; }
    //constexpr bool operator == (const eTWBUILDGEN_LAYER pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWBUILDGEN_LAYER pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWBUILDGEN_CMAKE_TARGET () const { return (eTWBUILDGEN_CMAKE_TARGET)vID; }
    //constexpr bool operator == (const eTWBUILDGEN_CMAKE_TARGET pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWBUILDGEN_CMAKE_TARGET pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWAPPGEN_GENFILE_ASYNC_PARMS () const { return (eTWAPPGEN_GENFILE_ASYNC_PARMS)vID; }
    //constexpr bool operator == (const eTWAPPGEN_GENFILE_ASYNC_PARMS pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWAPPGEN_GENFILE_ASYNC_PARMS pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWAPPGEN_WORKSPACE () const { return (eTWAPPGEN_WORKSPACE)vID; }
    //constexpr bool operator == (const eTWAPPGEN_WORKSPACE pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWAPPGEN_WORKSPACE pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWTWBuildLayer () const { return (eTWTWBuildLayer)vID; }
    //constexpr bool operator == (const eTWTWBuildLayer pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWTWBuildLayer pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWAPPGEN_USER_CONFIG () const { return (eTWAPPGEN_USER_CONFIG)vID; }
    //constexpr bool operator == (const eTWAPPGEN_USER_CONFIG pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWAPPGEN_USER_CONFIG pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWAPPGEN_CONFIG () const { return (eTWAPPGEN_CONFIG)vID; }
    //constexpr bool operator == (const eTWAPPGEN_CONFIG pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWAPPGEN_CONFIG pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWAPPGEN_CMDLINE () const { return (eTWAPPGEN_CMDLINE)vID; }
    //constexpr bool operator == (const eTWAPPGEN_CMDLINE pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWAPPGEN_CMDLINE pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWPRODUCT_APPUNIT_INFO () const { return (eTWPRODUCT_APPUNIT_INFO)vID; }
    //constexpr bool operator == (const eTWPRODUCT_APPUNIT_INFO pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWPRODUCT_APPUNIT_INFO pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWAPPGEN_PRODUCT () const { return (eTWAPPGEN_PRODUCT)vID; }
    //constexpr bool operator == (const eTWAPPGEN_PRODUCT pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWAPPGEN_PRODUCT pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWAPPGEN_API () const { return (eTWAPPGEN_API)vID; }
    //constexpr bool operator == (const eTWAPPGEN_API pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWAPPGEN_API pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWAPPGEN_APPCODE () const { return (eTWAPPGEN_APPCODE)vID; }
    //constexpr bool operator == (const eTWAPPGEN_APPCODE pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWAPPGEN_APPCODE pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWAPPGEN_APPUNIT () const { return (eTWAPPGEN_APPUNIT)vID; }
    //constexpr bool operator == (const eTWAPPGEN_APPUNIT pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWAPPGEN_APPUNIT pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWQUALIFIED_VALUES () const { return (eTWQUALIFIED_VALUES)vID; }
    //constexpr bool operator == (const eTWQUALIFIED_VALUES pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWQUALIFIED_VALUES pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWAPPGEN_APP_CONSTANT () const { return (eTWAPPGEN_APP_CONSTANT)vID; }
    //constexpr bool operator == (const eTWAPPGEN_APP_CONSTANT pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWAPPGEN_APP_CONSTANT pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWAPPGEN_APPCONSTANT_SCOPE () const { return (eTWAPPGEN_APPCONSTANT_SCOPE)vID; }
    //constexpr bool operator == (const eTWAPPGEN_APPCONSTANT_SCOPE pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWAPPGEN_APPCONSTANT_SCOPE pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWAPPGEN_APP_OPTION () const { return (eTWAPPGEN_APP_OPTION)vID; }
    //constexpr bool operator == (const eTWAPPGEN_APP_OPTION pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWAPPGEN_APP_OPTION pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWAPPGEN_APPOPTION_SCOPE () const { return (eTWAPPGEN_APPOPTION_SCOPE)vID; }
    //constexpr bool operator == (const eTWAPPGEN_APPOPTION_SCOPE pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWAPPGEN_APPOPTION_SCOPE pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWDBAnalyzerPayloadID () const { return (eTWDBAnalyzerPayloadID)vID; }
    //constexpr bool operator == (const eTWDBAnalyzerPayloadID pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWDBAnalyzerPayloadID pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWIntegrationClientPayloadID () const { return (eTWIntegrationClientPayloadID)vID; }
    //constexpr bool operator == (const eTWIntegrationClientPayloadID pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWIntegrationClientPayloadID pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWDeviceIntegrationPayloadID () const { return (eTWDeviceIntegrationPayloadID)vID; }
    //constexpr bool operator == (const eTWDeviceIntegrationPayloadID pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWDeviceIntegrationPayloadID pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWEmployees () const { return (eTWEmployees)vID; }
    //constexpr bool operator == (const eTWEmployees pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWEmployees pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWEmployee () const { return (eTWEmployee)vID; }
    //constexpr bool operator == (const eTWEmployee pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWEmployee pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWNominee () const { return (eTWNominee)vID; }
    //constexpr bool operator == (const eTWNominee pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWNominee pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWContact () const { return (eTWContact)vID; }
    //constexpr bool operator == (const eTWContact pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWContact pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWAddress () const { return (eTWAddress)vID; }
    //constexpr bool operator == (const eTWAddress pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWAddress pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWContact_Number () const { return (eTWContact_Number)vID; }
    //constexpr bool operator == (const eTWContact_Number pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWContact_Number pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWAddresses () const { return (eTWAddresses)vID; }
    //constexpr bool operator == (const eTWAddresses pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWAddresses pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWHomeAddress () const { return (eTWHomeAddress)vID; }
    //constexpr bool operator == (const eTWHomeAddress pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWHomeAddress pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWOfficeAddress () const { return (eTWOfficeAddress)vID; }
    //constexpr bool operator == (const eTWOfficeAddress pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWOfficeAddress pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWOrgDetails () const { return (eTWOrgDetails)vID; }
    //constexpr bool operator == (const eTWOrgDetails pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWOrgDetails pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWPhoneNums () const { return (eTWPhoneNums)vID; }
    //constexpr bool operator == (const eTWPhoneNums pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWPhoneNums pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWDetails () const { return (eTWDetails)vID; }
    //constexpr bool operator == (const eTWDetails pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWDetails pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWSkills () const { return (eTWSkills)vID; }
    //constexpr bool operator == (const eTWSkills pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWSkills pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWINTEG_BILLING_OBJ () const { return (eTWINTEG_BILLING_OBJ)vID; }
    //constexpr bool operator == (const eTWINTEG_BILLING_OBJ pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWINTEG_BILLING_OBJ pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWMAPPING_OBJ () const { return (eTWMAPPING_OBJ)vID; }
    //constexpr bool operator == (const eTWMAPPING_OBJ pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWMAPPING_OBJ pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWSchemaDisplayObj () const { return (eTWSchemaDisplayObj)vID; }
    //constexpr bool operator == (const eTWSchemaDisplayObj pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWSchemaDisplayObj pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWField () const { return (eTWField)vID; }
    //constexpr bool operator == (const eTWField pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWField pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWTSDataPublishingServicesObject () const { return (eTWTSDataPublishingServicesObject)vID; }
    //constexpr bool operator == (const eTWTSDataPublishingServicesObject pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWTSDataPublishingServicesObject pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWCuratorTISchemaS () const { return (eTWCuratorTISchemaS)vID; }
    //constexpr bool operator == (const eTWCuratorTISchemaS pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWCuratorTISchemaS pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWDSSchemaS () const { return (eTWDSSchemaS)vID; }
    //constexpr bool operator == (const eTWDSSchemaS pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWDSSchemaS pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWClientDCElements () const { return (eTWClientDCElements)vID; }
    //constexpr bool operator == (const eTWClientDCElements pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWClientDCElements pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWDSSchema () const { return (eTWDSSchema)vID; }
    //constexpr bool operator == (const eTWDSSchema pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWDSSchema pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWDSSchemaModule () const { return (eTWDSSchemaModule)vID; }
    //constexpr bool operator == (const eTWDSSchemaModule pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWDSSchemaModule pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWSCHEMA_OBJ () const { return (eTWSCHEMA_OBJ)vID; }
    //constexpr bool operator == (const eTWSCHEMA_OBJ pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWSCHEMA_OBJ pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWSKU_OBJ () const { return (eTWSKU_OBJ)vID; }
    //constexpr bool operator == (const eTWSKU_OBJ pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWSKU_OBJ pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWTRANSACTION_OBJ () const { return (eTWTRANSACTION_OBJ)vID; }
    //constexpr bool operator == (const eTWTRANSACTION_OBJ pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWTRANSACTION_OBJ pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWTI_OBJ () const { return (eTWTI_OBJ)vID; }
    //constexpr bool operator == (const eTWTI_OBJ pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWTI_OBJ pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWXXX_TWDSCS_SKU () const { return (eTWXXX_TWDSCS_SKU)vID; }
    //constexpr bool operator == (const eTWXXX_TWDSCS_SKU pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWXXX_TWDSCS_SKU pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWXXX_TWDSCS_CLUSTR_TEMP_ID () const { return (eTWXXX_TWDSCS_CLUSTR_TEMP_ID)vID; }
    //constexpr bool operator == (const eTWXXX_TWDSCS_CLUSTR_TEMP_ID pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWXXX_TWDSCS_CLUSTR_TEMP_ID pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWXXX_TWDSSC_EXTERNAL_SKU_ENTITY_OBJ () const { return (eTWXXX_TWDSSC_EXTERNAL_SKU_ENTITY_OBJ)vID; }
    //constexpr bool operator == (const eTWXXX_TWDSSC_EXTERNAL_SKU_ENTITY_OBJ pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWXXX_TWDSSC_EXTERNAL_SKU_ENTITY_OBJ pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWXXX_TRANSACTION_DETAILS () const { return (eTWXXX_TRANSACTION_DETAILS)vID; }
    //constexpr bool operator == (const eTWXXX_TRANSACTION_DETAILS pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWXXX_TRANSACTION_DETAILS pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWXXX_TWDSCS_TRANSACTIONS_OBJ_ORDER_DETAIL () const { return (eTWXXX_TWDSCS_TRANSACTIONS_OBJ_ORDER_DETAIL)vID; }
    //constexpr bool operator == (const eTWXXX_TWDSCS_TRANSACTIONS_OBJ_ORDER_DETAIL pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWXXX_TWDSCS_TRANSACTIONS_OBJ_ORDER_DETAIL pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWXXX_TWDSCS_TRANSACTIONS_OBJ () const { return (eTWXXX_TWDSCS_TRANSACTIONS_OBJ)vID; }
    //constexpr bool operator == (const eTWXXX_TWDSCS_TRANSACTIONS_OBJ pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWXXX_TWDSCS_TRANSACTIONS_OBJ pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWXXX_TWDSCS_TRANSACTIONS () const { return (eTWXXX_TWDSCS_TRANSACTIONS)vID; }
    //constexpr bool operator == (const eTWXXX_TWDSCS_TRANSACTIONS pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWXXX_TWDSCS_TRANSACTIONS pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWXXX_TWDSCS_MAPPED_SKU_WITH_STATUS () const { return (eTWXXX_TWDSCS_MAPPED_SKU_WITH_STATUS)vID; }
    //constexpr bool operator == (const eTWXXX_TWDSCS_MAPPED_SKU_WITH_STATUS pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWXXX_TWDSCS_MAPPED_SKU_WITH_STATUS pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWXXX_TWDSCS_MAPPED_EXTERNAL_SKUS () const { return (eTWXXX_TWDSCS_MAPPED_EXTERNAL_SKUS)vID; }
    //constexpr bool operator == (const eTWXXX_TWDSCS_MAPPED_EXTERNAL_SKUS pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWXXX_TWDSCS_MAPPED_EXTERNAL_SKUS pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWXXX_TWDSCS_LOCAL_SKU_ENTITY_OBJ () const { return (eTWXXX_TWDSCS_LOCAL_SKU_ENTITY_OBJ)vID; }
    //constexpr bool operator == (const eTWXXX_TWDSCS_LOCAL_SKU_ENTITY_OBJ pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWXXX_TWDSCS_LOCAL_SKU_ENTITY_OBJ pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWXXX_TWDSCS_INCOMING_TRANSACTED_OBJ () const { return (eTWXXX_TWDSCS_INCOMING_TRANSACTED_OBJ)vID; }
    //constexpr bool operator == (const eTWXXX_TWDSCS_INCOMING_TRANSACTED_OBJ pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWXXX_TWDSCS_INCOMING_TRANSACTED_OBJ pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWXXX_TWDSCS_EXTERNAL_SKU_EXTERNALOBJID_LOCAlOBJID_PAIR () const { return (eTWXXX_TWDSCS_EXTERNAL_SKU_EXTERNALOBJID_LOCAlOBJID_PAIR)vID; }
    //constexpr bool operator == (const eTWXXX_TWDSCS_EXTERNAL_SKU_EXTERNALOBJID_LOCAlOBJID_PAIR pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWXXX_TWDSCS_EXTERNAL_SKU_EXTERNALOBJID_LOCAlOBJID_PAIR pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWXXX_TWDSCS_EXTERNAL_SKU_MAPPED () const { return (eTWXXX_TWDSCS_EXTERNAL_SKU_MAPPED)vID; }
    //constexpr bool operator == (const eTWXXX_TWDSCS_EXTERNAL_SKU_MAPPED pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWXXX_TWDSCS_EXTERNAL_SKU_MAPPED pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWXXX_TWDSCS_EXTERNAL_SKU_UNMAPPED () const { return (eTWXXX_TWDSCS_EXTERNAL_SKU_UNMAPPED)vID; }
    //constexpr bool operator == (const eTWXXX_TWDSCS_EXTERNAL_SKU_UNMAPPED pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWXXX_TWDSCS_EXTERNAL_SKU_UNMAPPED pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWXXX_TWDSCS_EXTERNAL_DUID_OBJID_OBJ () const { return (eTWXXX_TWDSCS_EXTERNAL_DUID_OBJID_OBJ)vID; }
    //constexpr bool operator == (const eTWXXX_TWDSCS_EXTERNAL_DUID_OBJID_OBJ pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWXXX_TWDSCS_EXTERNAL_DUID_OBJID_OBJ pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWCuratorTISchema () const { return (eTWCuratorTISchema)vID; }
    //constexpr bool operator == (const eTWCuratorTISchema pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWCuratorTISchema pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWCURATOR_TI_OBJ () const { return (eTWCURATOR_TI_OBJ)vID; }
    //constexpr bool operator == (const eTWCURATOR_TI_OBJ pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWCURATOR_TI_OBJ pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWCURATOR_TI_OBJ2 () const { return (eTWCURATOR_TI_OBJ2)vID; }
    //constexpr bool operator == (const eTWCURATOR_TI_OBJ2 pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWCURATOR_TI_OBJ2 pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWFULLNAME_COREOBJECT_TEST_OBJ () const { return (eTWFULLNAME_COREOBJECT_TEST_OBJ)vID; }
    //constexpr bool operator == (const eTWFULLNAME_COREOBJECT_TEST_OBJ pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWFULLNAME_COREOBJECT_TEST_OBJ pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWTEST_EMBEDDED_OBJ () const { return (eTWTEST_EMBEDDED_OBJ)vID; }
    //constexpr bool operator == (const eTWTEST_EMBEDDED_OBJ pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWTEST_EMBEDDED_OBJ pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWTEST_ADDRESS () const { return (eTWTEST_ADDRESS)vID; }
    //constexpr bool operator == (const eTWTEST_ADDRESS pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWTEST_ADDRESS pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWTEST_COMPANY_DETAILS () const { return (eTWTEST_COMPANY_DETAILS)vID; }
    //constexpr bool operator == (const eTWTEST_COMPANY_DETAILS pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWTEST_COMPANY_DETAILS pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWTEST_EMPLOYEES () const { return (eTWTEST_EMPLOYEES)vID; }
    //constexpr bool operator == (const eTWTEST_EMPLOYEES pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWTEST_EMPLOYEES pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWTEST_DESCRIBE_OBJECT () const { return (eTWTEST_DESCRIBE_OBJECT)vID; }
    //constexpr bool operator == (const eTWTEST_DESCRIBE_OBJECT pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWTEST_DESCRIBE_OBJECT pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWCONTAINER_ID () const { return (eTWCONTAINER_ID)vID; }
    //constexpr bool operator == (const eTWCONTAINER_ID pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWCONTAINER_ID pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWTEST_DESCRIBE_OBJECT_ALL_TYPES () const { return (eTWTEST_DESCRIBE_OBJECT_ALL_TYPES)vID; }
    //constexpr bool operator == (const eTWTEST_DESCRIBE_OBJECT_ALL_TYPES pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWTEST_DESCRIBE_OBJECT_ALL_TYPES pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWCOREOBJECT_TEST_OBJ1 () const { return (eTWCOREOBJECT_TEST_OBJ1)vID; }
    //constexpr bool operator == (const eTWCOREOBJECT_TEST_OBJ1 pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWCOREOBJECT_TEST_OBJ1 pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWCOREOBJECT_TEST_OBJ2 () const { return (eTWCOREOBJECT_TEST_OBJ2)vID; }
    //constexpr bool operator == (const eTWCOREOBJECT_TEST_OBJ2 pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWCOREOBJECT_TEST_OBJ2 pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWCOREOBJECT_TEST_OBJ3 () const { return (eTWCOREOBJECT_TEST_OBJ3)vID; }
    //constexpr bool operator == (const eTWCOREOBJECT_TEST_OBJ3 pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWCOREOBJECT_TEST_OBJ3 pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWCOREOBJECT_TEST_OBJ4 () const { return (eTWCOREOBJECT_TEST_OBJ4)vID; }
    //constexpr bool operator == (const eTWCOREOBJECT_TEST_OBJ4 pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWCOREOBJECT_TEST_OBJ4 pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWCOREOBJECT_TEST_EMB () const { return (eTWCOREOBJECT_TEST_EMB)vID; }
    //constexpr bool operator == (const eTWCOREOBJECT_TEST_EMB pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWCOREOBJECT_TEST_EMB pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWTEST_DEPENDENT () const { return (eTWTEST_DEPENDENT)vID; }
    //constexpr bool operator == (const eTWTEST_DEPENDENT pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWTEST_DEPENDENT pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWTEST_EMPLOYEEADDRESS () const { return (eTWTEST_EMPLOYEEADDRESS)vID; }
    //constexpr bool operator == (const eTWTEST_EMPLOYEEADDRESS pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWTEST_EMPLOYEEADDRESS pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWTEST_EMPLOYEE () const { return (eTWTEST_EMPLOYEE)vID; }
    //constexpr bool operator == (const eTWTEST_EMPLOYEE pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWTEST_EMPLOYEE pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWSTUDENTSCHEMA () const { return (eTWSTUDENTSCHEMA)vID; }
    //constexpr bool operator == (const eTWSTUDENTSCHEMA pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWSTUDENTSCHEMA pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWTEST_OBJ () const { return (eTWTEST_OBJ)vID; }
    //constexpr bool operator == (const eTWTEST_OBJ pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWTEST_OBJ pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWSTUDENTSCHEMAMETA () const { return (eTWSTUDENTSCHEMAMETA)vID; }
    //constexpr bool operator == (const eTWSTUDENTSCHEMAMETA pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWSTUDENTSCHEMAMETA pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWTW_CORE_PROCESSMGR_TEST_API_SCHEMA () const { return (eTWTW_CORE_PROCESSMGR_TEST_API_SCHEMA)vID; }
    //constexpr bool operator == (const eTWTW_CORE_PROCESSMGR_TEST_API_SCHEMA pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWTW_CORE_PROCESSMGR_TEST_API_SCHEMA pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWGET_STUDENT_PERCENTAGE_REQUEST_SCHEMA () const { return (eTWGET_STUDENT_PERCENTAGE_REQUEST_SCHEMA)vID; }
    //constexpr bool operator == (const eTWGET_STUDENT_PERCENTAGE_REQUEST_SCHEMA pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWGET_STUDENT_PERCENTAGE_REQUEST_SCHEMA pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWGET_STUDENT_PERCENTAGE_RESPONSE_SCHEMA () const { return (eTWGET_STUDENT_PERCENTAGE_RESPONSE_SCHEMA)vID; }
    //constexpr bool operator == (const eTWGET_STUDENT_PERCENTAGE_RESPONSE_SCHEMA pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWGET_STUDENT_PERCENTAGE_RESPONSE_SCHEMA pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWGET_STUDENT_PERCNTAGE_QUERY_SCHEMA () const { return (eTWGET_STUDENT_PERCNTAGE_QUERY_SCHEMA)vID; }
    //constexpr bool operator == (const eTWGET_STUDENT_PERCNTAGE_QUERY_SCHEMA pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWGET_STUDENT_PERCNTAGE_QUERY_SCHEMA pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWGET_STUDENT_PERCENTAGE_SCRATCHPAD_SCHEMA () const { return (eTWGET_STUDENT_PERCENTAGE_SCRATCHPAD_SCHEMA)vID; }
    //constexpr bool operator == (const eTWGET_STUDENT_PERCENTAGE_SCRATCHPAD_SCHEMA pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWGET_STUDENT_PERCENTAGE_SCRATCHPAD_SCHEMA pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWGET_STUDENT_DETAIL_REQUEST_SCHEMA () const { return (eTWGET_STUDENT_DETAIL_REQUEST_SCHEMA)vID; }
    //constexpr bool operator == (const eTWGET_STUDENT_DETAIL_REQUEST_SCHEMA pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWGET_STUDENT_DETAIL_REQUEST_SCHEMA pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWGET_STUDENT_DETAIL_RESPONSE_SCHEMA () const { return (eTWGET_STUDENT_DETAIL_RESPONSE_SCHEMA)vID; }
    //constexpr bool operator == (const eTWGET_STUDENT_DETAIL_RESPONSE_SCHEMA pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWGET_STUDENT_DETAIL_RESPONSE_SCHEMA pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWGET_STUDENT_DETAIL_QUERY_SCHEMA () const { return (eTWGET_STUDENT_DETAIL_QUERY_SCHEMA)vID; }
    //constexpr bool operator == (const eTWGET_STUDENT_DETAIL_QUERY_SCHEMA pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWGET_STUDENT_DETAIL_QUERY_SCHEMA pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWGET_STUDENT_DETAIL_SCRATCHPAD_SCHEMA () const { return (eTWGET_STUDENT_DETAIL_SCRATCHPAD_SCHEMA)vID; }
    //constexpr bool operator == (const eTWGET_STUDENT_DETAIL_SCRATCHPAD_SCHEMA pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWGET_STUDENT_DETAIL_SCRATCHPAD_SCHEMA pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWSOMAPI_REQCONTEXT () const { return (eTWSOMAPI_REQCONTEXT)vID; }
    //constexpr bool operator == (const eTWSOMAPI_REQCONTEXT pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWSOMAPI_REQCONTEXT pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWSOMAPI_INPUT () const { return (eTWSOMAPI_INPUT)vID; }
    //constexpr bool operator == (const eTWSOMAPI_INPUT pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWSOMAPI_INPUT pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWSOMAPI_OUTPUT () const { return (eTWSOMAPI_OUTPUT)vID; }
    //constexpr bool operator == (const eTWSOMAPI_OUTPUT pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWSOMAPI_OUTPUT pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWMYSCRATCHPAD () const { return (eTWMYSCRATCHPAD)vID; }
    //constexpr bool operator == (const eTWMYSCRATCHPAD pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWMYSCRATCHPAD pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWSOMEAPI_SCRATCHPAD () const { return (eTWSOMEAPI_SCRATCHPAD)vID; }
    //constexpr bool operator == (const eTWSOMEAPI_SCRATCHPAD pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWSOMEAPI_SCRATCHPAD pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWGREETAPI_SCRATCHPAD_SCHEMA () const { return (eTWGREETAPI_SCRATCHPAD_SCHEMA)vID; }
    //constexpr bool operator == (const eTWGREETAPI_SCRATCHPAD_SCHEMA pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWGREETAPI_SCRATCHPAD_SCHEMA pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWFACTAPI_SCRATCHPAD_SCHEMA () const { return (eTWFACTAPI_SCRATCHPAD_SCHEMA)vID; }
    //constexpr bool operator == (const eTWFACTAPI_SCRATCHPAD_SCHEMA pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWFACTAPI_SCRATCHPAD_SCHEMA pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWMULTITASKAPI_SCRATCHPAD_SCHEMA () const { return (eTWMULTITASKAPI_SCRATCHPAD_SCHEMA)vID; }
    //constexpr bool operator == (const eTWMULTITASKAPI_SCRATCHPAD_SCHEMA pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWMULTITASKAPI_SCRATCHPAD_SCHEMA pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWMULTIACTIVITYAPI_SCRATCHPAD_SCHEMA () const { return (eTWMULTIACTIVITYAPI_SCRATCHPAD_SCHEMA)vID; }
    //constexpr bool operator == (const eTWMULTIACTIVITYAPI_SCRATCHPAD_SCHEMA pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWMULTIACTIVITYAPI_SCRATCHPAD_SCHEMA pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWScenario1ReadDB_SCHEMA () const { return (eTWScenario1ReadDB_SCHEMA)vID; }
    //constexpr bool operator == (const eTWScenario1ReadDB_SCHEMA pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWScenario1ReadDB_SCHEMA pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWTW_CORE_COMMMGR_TEST_API_SCHEMA () const { return (eTWTW_CORE_COMMMGR_TEST_API_SCHEMA)vID; }
    //constexpr bool operator == (const eTWTW_CORE_COMMMGR_TEST_API_SCHEMA pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWTW_CORE_COMMMGR_TEST_API_SCHEMA pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWDB_TEST_OBJ () const { return (eTWDB_TEST_OBJ)vID; }
    //constexpr bool operator == (const eTWDB_TEST_OBJ pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWDB_TEST_OBJ pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWSTUDENT_OBJ () const { return (eTWSTUDENT_OBJ)vID; }
    //constexpr bool operator == (const eTWSTUDENT_OBJ pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWSTUDENT_OBJ pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWMY_COMPANY_OBJ () const { return (eTWMY_COMPANY_OBJ)vID; }
    //constexpr bool operator == (const eTWMY_COMPANY_OBJ pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWMY_COMPANY_OBJ pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWDBTEST_EMBEDDED_OBJ () const { return (eTWDBTEST_EMBEDDED_OBJ)vID; }
    //constexpr bool operator == (const eTWDBTEST_EMBEDDED_OBJ pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWDBTEST_EMBEDDED_OBJ pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWFULLNAME () const { return (eTWFULLNAME)vID; }
    //constexpr bool operator == (const eTWFULLNAME pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWFULLNAME pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWDATA_DC_TEST_OBJ () const { return (eTWDATA_DC_TEST_OBJ)vID; }
    //constexpr bool operator == (const eTWDATA_DC_TEST_OBJ pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWDATA_DC_TEST_OBJ pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWTW_ADMIN_TEST_1 () const { return (eTWTW_ADMIN_TEST_1)vID; }
    //constexpr bool operator == (const eTWTW_ADMIN_TEST_1 pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWTW_ADMIN_TEST_1 pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWTW_ADMIN_TEST_2 () const { return (eTWTW_ADMIN_TEST_2)vID; }
    //constexpr bool operator == (const eTWTW_ADMIN_TEST_2 pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWTW_ADMIN_TEST_2 pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWTW_ADMIN_TEST_3 () const { return (eTWTW_ADMIN_TEST_3)vID; }
    //constexpr bool operator == (const eTWTW_ADMIN_TEST_3 pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWTW_ADMIN_TEST_3 pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWTW_ADMIN_TEST_OBJ_3 () const { return (eTWTW_ADMIN_TEST_OBJ_3)vID; }
    //constexpr bool operator == (const eTWTW_ADMIN_TEST_OBJ_3 pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWTW_ADMIN_TEST_OBJ_3 pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWTEST_NFW_SCP () const { return (eTWTEST_NFW_SCP)vID; }
    //constexpr bool operator == (const eTWTEST_NFW_SCP pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWTEST_NFW_SCP pID) const { return (vID != (Enum)pID); }
    //constexpr operator eTWTEST_ADMIN_SERVICES () const { return (eTWTEST_ADMIN_SERVICES)vID; }
    //constexpr bool operator == (const eTWTEST_ADMIN_SERVICES pID) const { return (vID == (Enum)pID); }
    //constexpr bool operator != (const eTWTEST_ADMIN_SERVICES pID) const { return (vID != (Enum)pID); }
    
    static constexpr Enum UNKNOWN = (Enum)0;
    static constexpr Enum PRIMARY = (Enum)1;
    static constexpr Enum SCHEMA = (Enum)2;
    static constexpr Enum DERIVED_SCHEMA = (Enum)3;
    /*
    static constexpr Enum VERSION = (Enum)4;
    static constexpr Enum CONTENT_ID = (Enum)5;
    static constexpr Enum SECTION_START_ID = (Enum)6;
    static constexpr Enum SECTION_END_ID = (Enum)7;
    static constexpr Enum DERIVED_SCHEMA_SECTION = (Enum)8;
    static constexpr Enum START_ID = (Enum)9;
    static constexpr Enum END_ID = (Enum)10;
    static constexpr Enum DERIVED_SCHEMA_OBJECT = (Enum)11;
    static constexpr Enum DERIVED_ID = (Enum)12;
    static constexpr Enum HASH_SECTION_ID = (Enum)13;
    static constexpr Enum DERIVED_SCHEMA_SEC_OBJECT = (Enum)14;
    static constexpr Enum DERIVED_SCHEMA_OBJ_FIELD = (Enum)15;
    static constexpr Enum OBJECT_LIST = (Enum)16;
    static constexpr Enum VALUE = (Enum)17;
    static constexpr Enum HASH_OBJECT = (Enum)18;
    static constexpr Enum GET_INDEXDETAIL_ID = (Enum)19;
    static constexpr Enum GET_OBJID_ID = (Enum)20;
    static constexpr Enum INDEX_OBJECT = (Enum)21;
    static constexpr Enum GET_INDEX_ID = (Enum)22;
    static constexpr Enum AMOUNT = (Enum)23;
    static constexpr Enum QUALIFIED_NUMS = (Enum)24;
    static constexpr Enum EXCHG_RATES = (Enum)25;
    static constexpr Enum QUANTITY = (Enum)26;
    static constexpr Enum UOM_FACTOR = (Enum)27;
    static constexpr Enum RATEX = (Enum)28;
    static constexpr Enum ID_VAL_PAIR1 = (Enum)29;
    static constexpr Enum ID_VAL_PAIR2 = (Enum)30;
    static constexpr Enum INPUT_STRING = (Enum)31;
    static constexpr Enum DATERANGE = (Enum)32;
    static constexpr Enum START_DATE = (Enum)33;
    static constexpr Enum END_DATE = (Enum)34;
    static constexpr Enum DIFF_DAYS = (Enum)35;
    static constexpr Enum PERIOD_STRING = (Enum)36;
    static constexpr Enum TIMERANGE = (Enum)37;
    static constexpr Enum START_TIME = (Enum)38;
    static constexpr Enum END_TIME = (Enum)39;
    static constexpr Enum DIFF_SECS = (Enum)40;
    static constexpr Enum HASHKEY_EXTENDED = (Enum)41;
    static constexpr Enum HASHKEY = (Enum)42;
    static constexpr Enum HASHVALUE = (Enum)43;
    static constexpr Enum HASHSUBOBJECT = (Enum)44;
    static constexpr Enum OBJID = (Enum)45;
    static constexpr Enum BASE_HASH_OBJECT = (Enum)46;
    static constexpr Enum LRUTIMER_PROPERTIES = (Enum)47;
    static constexpr Enum CACHETYPE = (Enum)48;
    static constexpr Enum CACHE_POINTER = (Enum)49;
    static constexpr Enum FAST_TIMER = (Enum)50;
    static constexpr Enum MEDIUM_TIMER = (Enum)51;
    static constexpr Enum SLOW_TIMER = (Enum)52;
    static constexpr Enum LOW_PRIORITY = (Enum)53;
    static constexpr Enum REGULAR_PRIORITY = (Enum)54;
    static constexpr Enum HIGH_PRIORITY = (Enum)55;
    static constexpr Enum ID_PROPERTIES = (Enum)56;
    static constexpr Enum IDTYPE = (Enum)57;
    static constexpr Enum QUARANTINE = (Enum)58;
    static constexpr Enum IDMASK = (Enum)59;
    static constexpr Enum RESERVED_IDS = (Enum)60;
    static constexpr Enum IS_SUB_SHARDED = (Enum)61;
    static constexpr Enum NUMBER_OF_SUB_SHARDS = (Enum)62;
    static constexpr Enum SUB_SHARD_ALIVE_TIME = (Enum)63;
    static constexpr Enum HASHID_PROPERTIES = (Enum)64;
    static constexpr Enum HASHID_STORE_TYPE = (Enum)65;
    static constexpr Enum HASHID_STORE_POINTER = (Enum)66;
    static constexpr Enum HASHMASK = (Enum)67;
    static constexpr Enum HASHINDEX_PROPERTIES = (Enum)68;
    static constexpr Enum HASHINDEX_STORE_POINTER = (Enum)69;
    static constexpr Enum INITIAL_PRIMARY_INDEX_RANGE = (Enum)70;
    static constexpr Enum INDEX_CAPACITY_INCREASE_STEP = (Enum)71;
    static constexpr Enum MAX_INDEX_ELEMS = (Enum)72;
    static constexpr Enum SPLIT_FACTOR = (Enum)73;
    static constexpr Enum DEFAULT_TIME_INDEX_BUCKET_TYPE = (Enum)74;
    static constexpr Enum REFID_BUCKET_FACTOR = (Enum)75;
    static constexpr Enum HASHSTRINGINDEX_PROPERTIES = (Enum)76;
    static constexpr Enum HASHSTRINGINDEX_STORE_POINTER = (Enum)77;
    static constexpr Enum HASHAGGR_PROPERTIES = (Enum)78;
    static constexpr Enum HASHAGGR_STORE_POINTER = (Enum)79;
    static constexpr Enum DATA_PROPERTIES = (Enum)80;
    static constexpr Enum HASHKEY_TYPE = (Enum)81;
    static constexpr Enum SCHEMA_ID = (Enum)82;
    static constexpr Enum LOCAL_INDEX_FIELD = (Enum)83;
    static constexpr Enum LOCAL_STRINGINDEX_FIELD = (Enum)84;
    static constexpr Enum LOCAL_AGGR_FIELD = (Enum)85;
    static constexpr Enum DS_PROPERTIES = (Enum)86;
    static constexpr Enum STORE_TYPE = (Enum)87;
    static constexpr Enum STOREID = (Enum)88;
    static constexpr Enum SUBSTOREID = (Enum)89;
    static constexpr Enum GENERATIONID = (Enum)90;
    static constexpr Enum REPLICAID = (Enum)91;
    static constexpr Enum HASHIDDS_DEFINITION = (Enum)92;
    static constexpr Enum DC_PROPERTIES = (Enum)93;
    static constexpr Enum DC_TYPE = (Enum)94;
    static constexpr Enum DCID = (Enum)95;
    static constexpr Enum DCMGR_PROPERTIES = (Enum)96;
    static constexpr Enum TIERID = (Enum)97;
    static constexpr Enum INDEX_VALUE = (Enum)98;
    static constexpr Enum FIELDID = (Enum)99;
    static constexpr Enum TIME_INDEX_VALUE = (Enum)100;
    static constexpr Enum REFID_INDEX_VALUE = (Enum)101;
    static constexpr Enum STRING_INDEX_VALUE = (Enum)102;
    static constexpr Enum STRING_WORD = (Enum)103;
    static constexpr Enum TIME_FILTER_DETAIL = (Enum)104;
    static constexpr Enum FOR_TIME = (Enum)105;
    static constexpr Enum FROM_TIME = (Enum)106;
    static constexpr Enum TO_TIME = (Enum)107;
    static constexpr Enum INDEX_ELEM_FILTER_DETAIL = (Enum)108;
    static constexpr Enum USE_APPOBJTYPEFILTER = (Enum)109;
    static constexpr Enum APPOBJTYPE_SCHEMAID = (Enum)110;
    static constexpr Enum USE_STRINGFILTER = (Enum)111;
    static constexpr Enum STRINGKEY = (Enum)112;
    static constexpr Enum COMPARE_SCOPE = (Enum)113;
    static constexpr Enum STRING_SCHEMAID = (Enum)114;
    static constexpr Enum USE_TIMEFILTER = (Enum)115;
    static constexpr Enum FROM_TME = (Enum)116;
    static constexpr Enum TIME_SCHEMAID = (Enum)117;
    static constexpr Enum USE_REFIDFILTER = (Enum)118;
    static constexpr Enum REFID = (Enum)119;
    static constexpr Enum REFID_SCHEMAID = (Enum)120;
    static constexpr Enum INDEX_ELEM = (Enum)121;
    static constexpr Enum OBJTYPE = (Enum)122;
    static constexpr Enum INDEX_DATA = (Enum)123;
    static constexpr Enum PARENT_INDEX_ID = (Enum)124;
    static constexpr Enum ID_CAPACITY = (Enum)125;
    static constexpr Enum ID_RANGE_END = (Enum)126;
    static constexpr Enum ID_CURRENT_CAPACITY = (Enum)127;
    static constexpr Enum SUB_INDEX_ID = (Enum)128;
    static constexpr Enum TIME_BUCKET_TYPE = (Enum)129;
    static constexpr Enum TIME_REFERENCE_INDEX = (Enum)130;
    static constexpr Enum TIME_INDEX_ID = (Enum)131;
    static constexpr Enum REFID_INDEX_ID = (Enum)132;
    static constexpr Enum APPLICATION_SESSION_OBJ = (Enum)133;
    static constexpr Enum APPLICATION_NAME = (Enum)134;
    static constexpr Enum APPLICATION_BASENAME = (Enum)135;
    static constexpr Enum BOOTSCHEMADB_INITIALSTATE = (Enum)136;
    static constexpr Enum CORESCHEMADB_INITIALSTATE = (Enum)137;
    static constexpr Enum CORECONFIGDB_INITIALSTATE = (Enum)138;
    static constexpr Enum USERCONFIGDB_INITIALSTATE = (Enum)139;
    static constexpr Enum CACHEDB_INITIALSTATE = (Enum)140;
    static constexpr Enum NETWORK_NAME = (Enum)141;
    static constexpr Enum MACHINE_NAME = (Enum)142;
    static constexpr Enum DEVICE_NAME = (Enum)143;
    static constexpr Enum OS_NAME = (Enum)144;
    static constexpr Enum OS_VERSION = (Enum)145;
    static constexpr Enum OS_LANGUAGE = (Enum)146;
    static constexpr Enum APPLICATION_PATHS_OBJ = (Enum)147;
    static constexpr Enum APPLICATION_PATH = (Enum)148;
    static constexpr Enum APPLICATION_FILENAME = (Enum)149;
    static constexpr Enum BOOTSCHEMA_PATH = (Enum)150;
    static constexpr Enum APPDB_PATH = (Enum)151;
    static constexpr Enum ADMIN_PATH = (Enum)152;
    static constexpr Enum USERDATA_DEFAULT_PATH = (Enum)153;
    static constexpr Enum USERDATA_DEFAULT_BACKUP_PATH = (Enum)154;
    static constexpr Enum BASE_CURRENT_PATH = (Enum)155;
    static constexpr Enum PROCESSIDDB_FILENAME = (Enum)156;
    static constexpr Enum APPLICATION_PARMS_OBJ = (Enum)157;
    static constexpr Enum APPLICATION_PARMS = (Enum)158;
    static constexpr Enum COMPANY_FILENAME = (Enum)159;
    static constexpr Enum MISSING_COMPANY_FILENAME = (Enum)160;
    static constexpr Enum NOACCESS_COMPANY_FILENAME = (Enum)161;
    static constexpr Enum CAPSULE_FILENAME = (Enum)162;
    static constexpr Enum MISSING_CAPSULE_FILENAME = (Enum)163;
    static constexpr Enum NOACCESS_CAPSULE_FILENAME = (Enum)164;
    static constexpr Enum INVALID_FILENAME = (Enum)165;
    static constexpr Enum TWIN_OS_PROCESSID = (Enum)166;
    static constexpr Enum TWIN_RECV_TIME_TICKS = (Enum)167;
    static constexpr Enum TWIN_TRANSFER_CONFIRMED = (Enum)168;
    static constexpr Enum PARMS_HANDED_OVER = (Enum)169;
    static constexpr Enum APPLICATION_TWIN_OBJ = (Enum)170;
    static constexpr Enum START_WINDOW_REQDATA = (Enum)171;
    static constexpr Enum HANDOVER_TWIN_REQDATA = (Enum)172;
    static constexpr Enum COREDISKIO_OPERATION_REQ_PARMS = (Enum)173;
    static constexpr Enum DISK_IO_OPERATION = (Enum)174;
    static constexpr Enum IS_FOR_DISKFILE = (Enum)175;
    static constexpr Enum ABSOLUTE_FILE_PATH = (Enum)176;
    static constexpr Enum BLOCK_SIZE = (Enum)177;
    static constexpr Enum IS_OPEN_FIRST = (Enum)178;
    static constexpr Enum DISK_FILE_SIZE = (Enum)179;
    static constexpr Enum IS_CREATED = (Enum)180;
    static constexpr Enum IS_OVERWRITE = (Enum)181;
    static constexpr Enum IS_WITH_TIME_CHANGE = (Enum)182;
    static constexpr Enum IS_READ_ONLY = (Enum)183;
    static constexpr Enum IS_HIDDEN = (Enum)184;
    static constexpr Enum IS_DIRECT_MODE = (Enum)185;
    static constexpr Enum IS_ASSET_FILE = (Enum)186;
    static constexpr Enum DISK_FILE_POINTER = (Enum)187;
    static constexpr Enum IS_READ_LOCK = (Enum)188;
    static constexpr Enum OFFSET = (Enum)189;
    static constexpr Enum BUFFER = (Enum)190;
    static constexpr Enum SIZE = (Enum)191;
    static constexpr Enum BLOCK_NUMBER = (Enum)192;
    static constexpr Enum TIME_OUT = (Enum)193;
    static constexpr Enum ABSOLUTE_PATH = (Enum)194;
    static constexpr Enum DRIVE_PATH = (Enum)195;
    static constexpr Enum SOURCE_FILE_PATH = (Enum)196;
    static constexpr Enum DEST_FILE_PATH = (Enum)197;
    static constexpr Enum SET_READ_ONLY = (Enum)198;
    static constexpr Enum IS_INCLUDE_HIDDEN = (Enum)199;
    static constexpr Enum COREDISKIO_OPERATION_RESP_PARMS = (Enum)200;
    static constexpr Enum FAIL_PATH = (Enum)201;
    static constexpr Enum FILE_LIST = (Enum)202;
    static constexpr Enum DIR_LIST = (Enum)203;
    static constexpr Enum TIME_STAMP = (Enum)204;
    static constexpr Enum IS_ALREADY_EXISTING = (Enum)205;
    static constexpr Enum IS_DRIVE_VALID = (Enum)206;
    static constexpr Enum HANDLE_DISKIO_REQ_DATA = (Enum)207;
    static constexpr Enum HANDLE_DISKIO_RESP_DATA = (Enum)208;
    static constexpr Enum CONSUME_COMPLETE_HANDOVER_BY_TWIN_REQDATA = (Enum)209;
    static constexpr Enum HASH_INDEX = (Enum)210;
    static constexpr Enum DC_COMPANY_OBJ = (Enum)211;
    static constexpr Enum DC_COMPANY_PATH = (Enum)212;
    static constexpr Enum DC_COMPANY_NAME = (Enum)213;
    static constexpr Enum EVENT_STAGE_REQUESTCONTEXT_SCHEMA = (Enum)214;
    static constexpr Enum STAGE_SCHEMA_ID = (Enum)215;
    static constexpr Enum USER_LANGUAGE = (Enum)216;
    static constexpr Enum USER_ID = (Enum)217;
    static constexpr Enum AUTHENTICATED_USER_ID = (Enum)218;
    static constexpr Enum STAGE_STATUS = (Enum)219;
    static constexpr Enum STAGE_POP = (Enum)220;
    static constexpr Enum STAGE_OWNER = (Enum)221;
    static constexpr Enum STAGE_FUNCTION_PTR = (Enum)222;
    static constexpr Enum STAGE_CONTINUATION_FUNCTION_PTR = (Enum)223;
    static constexpr Enum STAGE_CONTINUATION_CONDITION = (Enum)224;
    static constexpr Enum STAGE_CONTINUATION_API = (Enum)225;
    static constexpr Enum STAGE_CONTINUATION_DESTID = (Enum)226;
    static constexpr Enum STAGE_CONTINUATION_DESTID_TYPE = (Enum)227;
    static constexpr Enum STAGE_APIID = (Enum)228;
    static constexpr Enum STAGE_APIOWNER = (Enum)229;
    static constexpr Enum STAGE_TWAPISTATICFUNC = (Enum)230;
    static constexpr Enum STAGE_APICLASSMEMBERFUNC = (Enum)231;
    static constexpr Enum STAGE_DESTID = (Enum)232;
    static constexpr Enum STAGE_DESTID_TYPE = (Enum)233;
    static constexpr Enum COMMMGR_CALLBACK_FUNC = (Enum)234;
    static constexpr Enum TASKMODE_WAIT_ON_TASK = (Enum)235;
    static constexpr Enum TASKMODE_TASKCONSUMERFUNC = (Enum)236;
    static constexpr Enum TASKMODE_TOTAL_TASKS = (Enum)237;
    static constexpr Enum TASKMODE_SUCCESS_CONDITION = (Enum)238;
    static constexpr Enum TASKMODE_TASKS_DONE = (Enum)239;
    static constexpr Enum TASKMODE_TOTAL_SUCCESS = (Enum)240;
    static constexpr Enum TWEVENT_OBJ = (Enum)241;
    static constexpr Enum TWEVENT_ISEXECUTED = (Enum)242;
    static constexpr Enum TWEVENT_EVENTID = (Enum)243;
    static constexpr Enum TWEVENT_COMMID = (Enum)244;
    static constexpr Enum TWEVENT_PARENTID = (Enum)245;
    static constexpr Enum TWEVENT_TIMEDTASKID = (Enum)246;
    static constexpr Enum TWEVENT_ISTIMEDEVENTPERIODIC = (Enum)247;
    static constexpr Enum TWEvent_INTERESTEDEVENTS = (Enum)248;
    static constexpr Enum EVENT_STAGE_REQUESTCONTEXT = (Enum)249;
    static constexpr Enum EVENT_STAGE_INPUT = (Enum)250;
    static constexpr Enum EVENT_STAGE_OUTPUT = (Enum)251;
    static constexpr Enum EVENT_STAGE_SCRATCHPAD = (Enum)252;
    static constexpr Enum INDIRECT_ROUTE_OBJ = (Enum)253;
    static constexpr Enum NEXT_HOP_DESTID = (Enum)254;
    static constexpr Enum DEST_DESTID_ON_NEXT_HOP = (Enum)255;
    static constexpr Enum NUM_LEGS = (Enum)256;
    static constexpr Enum MTU = (Enum)257;
    static constexpr Enum LAST_STATE = (Enum)258;
    static constexpr Enum LAST_STATE_TIME = (Enum)259;
    static constexpr Enum WIP_STEP = (Enum)260;
    static constexpr Enum PACKET_TYPE = (Enum)261;
    static constexpr Enum NUM_RETRIES_AVAILABLE = (Enum)262;
    static constexpr Enum SUCCEEDED = (Enum)263;
    static constexpr Enum COMPLETION_ALERTABLE_WAIT = (Enum)264;
    static constexpr Enum DIRECT_ROUTE_OBJ = (Enum)265;
    static constexpr Enum IPADDRESS = (Enum)266;
    static constexpr Enum IPID_SOURCE = (Enum)267;
    static constexpr Enum IPID_FOUND_REACHABLE_ONCE = (Enum)268;
    static constexpr Enum SRC_IPID_AS_SEEN_BY_DEST = (Enum)269;
    static constexpr Enum LPTTELEM = (Enum)270;
    static constexpr Enum STATE_CHANGE_ALERTABLE_WAIT = (Enum)271;
    static constexpr Enum PINGING_ON_BASE_DIT_ALERTABLE_WAIT = (Enum)272;
    static constexpr Enum REGISTERED_FOR_PING_ON_BASE_DIT_ALERTABLE_WAIT = (Enum)273;
    static constexpr Enum REACHED_ON_SIMPLE_PORTS_ALERTABLE_WAIT = (Enum)274;
    static constexpr Enum REGULAR_PORTS_REMEDY_SUCCEEDED_ALERTABLE_WAIT = (Enum)275;
    static constexpr Enum REGULAR_PORTS_REMEDY_APPLIED_ALERTABLE_WAIT = (Enum)276;
    static constexpr Enum CONTACTED_ON_SIMPLE_PORTS_ALERTABLE_WAIT = (Enum)277;
    static constexpr Enum REGISTER_WITH_ME_RECEIVED = (Enum)278;
    static constexpr Enum OTHER_DIRECT_IPIDS = (Enum)279;
    static constexpr Enum DEST_OBJ = (Enum)280;
    static constexpr Enum PUID = (Enum)281;
    static constexpr Enum APP_TYPE = (Enum)282;
    static constexpr Enum PRODUCT_ID = (Enum)283;
    static constexpr Enum BUILD_VERSION = (Enum)284;
    static constexpr Enum IS_BOOTSTRAPPED = (Enum)285;
    static constexpr Enum UNIVERSAL_ID = (Enum)286;
    static constexpr Enum DIT_VERSION = (Enum)287;
    static constexpr Enum DIT_PORT = (Enum)288;
    static constexpr Enum SIMPLE_PORT = (Enum)289;
    static constexpr Enum MSG_IDS = (Enum)290;
    static constexpr Enum SRC_DIT_SOCK_ID = (Enum)291;
    static constexpr Enum SRC_DESTID_ON_DEST = (Enum)292;
    static constexpr Enum DIRECT_ROUTE_LPTTOFFSET = (Enum)293;
    static constexpr Enum IOROOT_OBJ = (Enum)294;
    static constexpr Enum IOROOT_TYPE = (Enum)295;
    static constexpr Enum IOROOT_NAME = (Enum)296;
    static constexpr Enum IS_PROCESS_EXCLUSIVE = (Enum)297;
    static constexpr Enum IS_NETWORKED_OR_REMOVABLE = (Enum)298;
    static constexpr Enum IOBASEPATH_IDS = (Enum)299;
    static constexpr Enum IOROOT_ALIASES = (Enum)300;
    static constexpr Enum IOROOT_STATUS = (Enum)301;
    static constexpr Enum PENDING_TASKS_QUEUE_PTR = (Enum)302;
    static constexpr Enum TAF_FILE_INFO = (Enum)303;
    static constexpr Enum IOBASEPATH_ID = (Enum)304;
    static constexpr Enum ACTIVE_TAF_ID = (Enum)305;
    static constexpr Enum DB_INFO = (Enum)306;
    static constexpr Enum DUID = (Enum)307;
    static constexpr Enum MODE = (Enum)308;
    static constexpr Enum IOBASEPATH_OBJ = (Enum)309;
    static constexpr Enum IOROOT_ID = (Enum)310;
    static constexpr Enum IOBASEPATH_NAME = (Enum)311;
    static constexpr Enum IOBASEPATH_STATE = (Enum)312;
    static constexpr Enum FILE_INFO = (Enum)313;
    static constexpr Enum DIR_INFO = (Enum)314;
    static constexpr Enum IOBASEPATH_ALIASES = (Enum)315;
    static constexpr Enum LEADER_PUID = (Enum)316;
    static constexpr Enum ALTERNATE_LEADER_PUID = (Enum)317;
    static constexpr Enum TAF_RUNNING_INFO = (Enum)318;
    static constexpr Enum RUNNING_NUMBER = (Enum)319;
    static constexpr Enum RUNNING_NUMBER_UTT = (Enum)320;
    static constexpr Enum TAF_FILE_DATA = (Enum)321;
    static constexpr Enum ONLINE_PUID = (Enum)322;
    static constexpr Enum OFFLINE_PUID = (Enum)323;
    static constexpr Enum APP_VERSION = (Enum)324;
    static constexpr Enum PROCESS_TYPE = (Enum)325;
    static constexpr Enum PROCESS_CLASS = (Enum)326;
    static constexpr Enum TWDC_SECTION_METADATA_SCHEMA = (Enum)327;
    static constexpr Enum DC_SECTION_CONTENT_LRUTIMER = (Enum)328;
    static constexpr Enum DC_SECTION_MESSAGE_DRIVEN = (Enum)329;
    static constexpr Enum TWDC_METADATA_SCHEMA = (Enum)330;
    static constexpr Enum ID_MAX_BIT_SIZE = (Enum)331;
    static constexpr Enum ID_REUSE = (Enum)332;
    static constexpr Enum ID_QUARANTINE_TIME = (Enum)333;
    static constexpr Enum DC_PURPOSE = (Enum)334;
    static constexpr Enum DC_IS_PERSISTED = (Enum)335;
    static constexpr Enum DC_CONTENT_OBJECT = (Enum)336;
    static constexpr Enum DC_IS_MIRRORED = (Enum)337;
    static constexpr Enum DC_NEED_VERSIONING = (Enum)338;
    static constexpr Enum DC_PRESERVE_HISTORY = (Enum)339;
    static constexpr Enum DC_OPEN_ONLY_IN_EXCLUSIVE_MODE = (Enum)340;
    static constexpr Enum DC_ACCEPTABLE_OPEN_MODES = (Enum)341;
    static constexpr Enum DC_MULTI_SECTION = (Enum)342;
    static constexpr Enum DC_REPLICA_ID = (Enum)343;
    static constexpr Enum DC_GENERATION_ID = (Enum)344;
    static constexpr Enum DC_SHARDED_ACROSS_PROCESS = (Enum)345;
    static constexpr Enum DC_CONTENT_SHARDED_WITHIN_DC = (Enum)346;
    static constexpr Enum DC_SCHEMA_ID = (Enum)347;
    static constexpr Enum DC_FILENAME = (Enum)348;
    static constexpr Enum DC_CREATE_ALWAYS = (Enum)349;
    static constexpr Enum DC_INITIAL_SIZE = (Enum)350;
    static constexpr Enum DC_FILEPATH = (Enum)351;
    static constexpr Enum DC_FILE_EXTENSION = (Enum)352;
    static constexpr Enum DC_FAILED_PATH = (Enum)353;
    static constexpr Enum DC_FILE_TYPE = (Enum)354;
    static constexpr Enum DC_APP_BUILD_VERSION = (Enum)355;
    static constexpr Enum DC_OPEN_MODE = (Enum)356;
    static constexpr Enum DC_OPEN_FAIL_IF_MODE_ERROR = (Enum)357;
    static constexpr Enum DC_OPEN_FAIL_IF_DOESNOTEXIST = (Enum)358;
    static constexpr Enum DC_CREATE_FAIL_IF_EXIST = (Enum)359;
    static constexpr Enum DC_OPEN_CREATE_IF_DOESNOTEXIST = (Enum)360;
    static constexpr Enum DC_RESET_ON_OPEN = (Enum)361;
    static constexpr Enum DC_VERIFY_ON_OPEN = (Enum)362;
    static constexpr Enum DC_RESET_ON_VERIFY = (Enum)363;
    static constexpr Enum DC_OPEN_VALIDATE_BUILD_VERSION = (Enum)364;
    static constexpr Enum DC_APPLICATION_DATA = (Enum)365;
    static constexpr Enum DC_DUID = (Enum)366;
    static constexpr Enum VERSION_OBJECT = (Enum)367;
    static constexpr Enum VERSION_TIME = (Enum)368;
    static constexpr Enum VERSION_BLOCKNUM = (Enum)369;
    static constexpr Enum VERSION_OBJID = (Enum)370;
    static constexpr Enum VERSION_MGMT_BLOCKNUM = (Enum)371;
    static constexpr Enum TWAPI_IS_DUPLICATE_DUID_REQ_OBJ_ID = (Enum)372;
    static constexpr Enum TWAPI_DUID_FLD_ID = (Enum)373;
    static constexpr Enum TWAPI_PUID_FLD_ID = (Enum)374;
    static constexpr Enum TWAPI_RUNNING_NUMBER_FLD_ID = (Enum)375;
    static constexpr Enum TWAPI_IS_DUPLICATE_DUID_RESP_OBJ_ID = (Enum)376;
    static constexpr Enum OPEN_DB_REQUEST = (Enum)377;
    static constexpr Enum DB_TYPE = (Enum)378;
    static constexpr Enum OPEN_MODE = (Enum)379;
    static constexpr Enum WRITE_MODE_IS_MANDATORY = (Enum)380;
    static constexpr Enum OPEN_ACTION = (Enum)381;
    static constexpr Enum QUALIFICATION_MODE = (Enum)382;
    static constexpr Enum BASE_DIRECTORY_PATH = (Enum)383;
    static constexpr Enum DB_SUB_DIRECTORY = (Enum)384;
    static constexpr Enum DB_NAME = (Enum)385;
    static constexpr Enum GENERATION_ID = (Enum)386;
    static constexpr Enum REPLICA_ID = (Enum)387;
    static constexpr Enum REQUEST_STATUS = (Enum)388;
    static constexpr Enum DB_READ_ONLY_DUE_TO_PERMISSIONS = (Enum)389;
    static constexpr Enum OPENDB_SCRATCHPAD = (Enum)390;
    static constexpr Enum TAF_FILE_NAME = (Enum)391;
    static constexpr Enum FILE_HANDLE = (Enum)392;
    static constexpr Enum DISKIO_OP_STATUS = (Enum)393;
    static constexpr Enum TAF_FILES = (Enum)394;
    static constexpr Enum TAF_FILE_CREATED = (Enum)395;
    static constexpr Enum IOBASEPATH_CREATED = (Enum)396;
    static constexpr Enum IOROOT_CREATED = (Enum)397;
    static constexpr Enum TAF_MODEL = (Enum)398;
    static constexpr Enum TAF_FILE_IS_READ_ONLY = (Enum)399;
    static constexpr Enum TAF_FILE_INFO_REPEAT_NDX = (Enum)400;
    static constexpr Enum POTENTIAL_STALE_TAF_INFO = (Enum)401;
    static constexpr Enum TAF_COORDINATION_REQUEST = (Enum)402;
    static constexpr Enum ACTION = (Enum)403;
    static constexpr Enum RUNNING_NUMBER_NDX = (Enum)404;
    static constexpr Enum VERSIONED_DS_BASE_REQUEST = (Enum)405;
    static constexpr Enum REQUESTED_VERSION = (Enum)406;
    static constexpr Enum RESOLVED_VERSION = (Enum)407;
    static constexpr Enum VERSIONED_DS_BASE_SCRATCHPAD = (Enum)408;
    static constexpr Enum VERSION_PRIMARYOBJECT_DS_PTR = (Enum)409;
    static constexpr Enum VERSION_OBJECT_DS_PTR = (Enum)410;
    static constexpr Enum ITERATOR_OBJECT_DS_PTR = (Enum)411;
    static constexpr Enum VERSIONDS_DATA_PTR = (Enum)412;
    static constexpr Enum OBJECT_SUBSTORETYPE = (Enum)413;
    static constexpr Enum ID_ACTION = (Enum)414;
    static constexpr Enum OBJECT_ACTION = (Enum)415;
    static constexpr Enum INDEX_ACTION = (Enum)416;
    static constexpr Enum RESOLVED_OBJID_SCHEMAID = (Enum)417;
    static constexpr Enum RESOLVED_OBJID_CREATED_SCHEMAID = (Enum)418;
    static constexpr Enum VERSIONED_DS_VERSION_REQUEST = (Enum)419;
    static constexpr Enum CREATED_OBJID = (Enum)420;
    static constexpr Enum MODIFIED_OBJID = (Enum)421;
    static constexpr Enum MAIN_DS_FINAL_LASTID = (Enum)422;
    static constexpr Enum HASHID_DS_FINAL_LASTID = (Enum)423;
    static constexpr Enum INDEX_DS_FINAL_LASTID = (Enum)424;
    static constexpr Enum AGGREGATE_DS_FINAL_LASTID = (Enum)425;
    static constexpr Enum VERSIONED_DS_VERSION_SCRATCHPAD = (Enum)426;
    static constexpr Enum NEW_OBJECT = (Enum)427;
    static constexpr Enum EXISTING_OBJECT = (Enum)428;
    static constexpr Enum EDIT_SET = (Enum)429;
    static constexpr Enum EDIT_GET = (Enum)430;
    static constexpr Enum RESOLVED_HASHID = (Enum)431;
    static constexpr Enum OBJECT_RESULT_PTR = (Enum)432;
    static constexpr Enum OBJECT_SCHEMA_PTR = (Enum)433;
    static constexpr Enum DB_BLOCK_PTR = (Enum)434;
    static constexpr Enum DB_DISKOBJ_PTR = (Enum)435;
    static constexpr Enum VERSIONED_DS_HASHID_REQUEST = (Enum)436;
    static constexpr Enum REQUESTED_OBJID = (Enum)437;
    static constexpr Enum REQUESTED_HASHKEY = (Enum)438;
    static constexpr Enum RESOLVED_OBJID = (Enum)439;
    static constexpr Enum RESOLVED_OBJID_CREATED = (Enum)440;
    static constexpr Enum RESOLVED_HASHKEY = (Enum)441;
    static constexpr Enum VERSIONED_DS_HASHID_SCRATCHPAD = (Enum)442;
    static constexpr Enum VERSIONED_DS_OBJECT_REQUEST = (Enum)443;
    static constexpr Enum REQUESTED_PRIORITY = (Enum)444;
    static constexpr Enum RESOLVED_MAIN_VERSION_OBJID = (Enum)445;
    static constexpr Enum VERSIONED_DS_OBJECT_SCRATCHPAD = (Enum)446;
    static constexpr Enum PREPARE_FOR_EDIT = (Enum)447;
    static constexpr Enum OBJECT_BLOCK_INFO = (Enum)448;
    static constexpr Enum OBJECT_VERSION = (Enum)449;
    static constexpr Enum OBJECT_VERSION_UTT = (Enum)450;
    static constexpr Enum WIP_VERSION = (Enum)451;
    static constexpr Enum WIP_VERSION_UTT = (Enum)452;
    static constexpr Enum OBJECT_RESULT_IS_SET = (Enum)453;
    static constexpr Enum OBJECT_RESULT_API_STATUS = (Enum)454;
    static constexpr Enum OBJECT_RESULT_STATUS = (Enum)455;
    static constexpr Enum VERSIONED_DS_INDEX_SCRATCHPAD = (Enum)456;
    static constexpr Enum REQUESTED_INDEX_HASHKEY = (Enum)457;
    static constexpr Enum RESOLVED_INDEX_OBJECT_OBJID = (Enum)458;
    static constexpr Enum RESOLVED_INDEX_OBJECT_OBJID_CREATED = (Enum)459;
    static constexpr Enum INDEX_CONTINUATION_FUNCTION_PTR = (Enum)460;
    static constexpr Enum SUBINDEX_OBJECT_OBJID = (Enum)461;
    static constexpr Enum IS_FRESH_SUBINDEX_OBJECT_OBJID = (Enum)462;
    static constexpr Enum SUBINDEX_ID_CAPACITY = (Enum)463;
    static constexpr Enum SUBINDEX_ID_RANGE_END = (Enum)464;
    static constexpr Enum INDEX_ELEM_OBJTYPE = (Enum)465;
    static constexpr Enum INDEX_ELEM_OBJID = (Enum)466;
    static constexpr Enum IS_TIME_SENSITIVE = (Enum)467;
    static constexpr Enum CURRENT_INDEX_VALUE = (Enum)468;
    static constexpr Enum IS_TIME_BUCKET_CYCLE = (Enum)469;
    static constexpr Enum STRING_INDEX_IS_NEW = (Enum)470;
    static constexpr Enum VERSIONED_DS_ITERATOR_REQUEST = (Enum)471;
    static constexpr Enum RESOLVED_ITERATOR_ID = (Enum)472;
    static constexpr Enum RESOLVED_ITERATOR_UTT = (Enum)473;
    static constexpr Enum RESOLVED_ITERATOR_RESULT_BEGIN_NDX = (Enum)474;
    static constexpr Enum RESOLVED_ITERATOR_RESULT_END_NDX = (Enum)475;
    static constexpr Enum REQUESTED_APPOBJTYPE = (Enum)476;
    static constexpr Enum REQUESTED_REFID = (Enum)477;
    static constexpr Enum REQUESTED_REFID_FIELDID = (Enum)478;
    static constexpr Enum REQUESTED_STRING = (Enum)479;
    static constexpr Enum REQUESTED_MATCH_STYLE = (Enum)480;
    static constexpr Enum REQUESTED_STRING_FIELDID = (Enum)481;
    static constexpr Enum REQUESTED_TIME_FILTER = (Enum)482;
    static constexpr Enum REQUESTED_DIRECTION_IS_BACKWARD = (Enum)483;
    static constexpr Enum REQUESTED_FROM_NDX = (Enum)484;
    static constexpr Enum REQUESTED_NUMBER_OF_IDS = (Enum)485;
    static constexpr Enum FILTERS_IGNORED_IN_RESULT = (Enum)486;
    static constexpr Enum REQUESTED_STRING_WAS_MULTIWORD = (Enum)487;
    static constexpr Enum RESULT_IDLIST = (Enum)488;
    static constexpr Enum RESULT_NO_MORE_IDS = (Enum)489;
    static constexpr Enum RESULT_TOTAL_IDS = (Enum)490;
    static constexpr Enum RESULT_ID_FROM_NDX = (Enum)491;
    static constexpr Enum RESULT_ID_TO_NDX = (Enum)492;
    static constexpr Enum VERSIONED_DS_ITERATOR_SCRATCHPAD = (Enum)493;
    static constexpr Enum CONTINUE_ITERATION = (Enum)494;
    static constexpr Enum INDEX_LIST_PRIMARYINDEXOBJ_HASHKEY = (Enum)495;
    static constexpr Enum INDEX_LIST_PRIMARYINDEXOBJ_OBJID = (Enum)496;
    static constexpr Enum INDEX_LIST_CURRENT_PRIMARYOBJID_NDX = (Enum)497;
    static constexpr Enum INDEX_LIST_SUBINDEXOBJ_OBJID = (Enum)498;
    static constexpr Enum INDEX_LIST_CURRENT_SUBOBJID_NDX = (Enum)499;
    static constexpr Enum INDEX_LIST_CURRENT_OBJID = (Enum)500;
    static constexpr Enum INDEX_LIST_USE_STRINGFILTER = (Enum)501;
    static constexpr Enum INDEX_LIST_STRINGKEY = (Enum)502;
    static constexpr Enum INDEX_LIST_COMPARE_SCOPE = (Enum)503;
    static constexpr Enum INDEX_LIST_STRING_SCHEMAID = (Enum)504;
    static constexpr Enum INDEX_LIST_USE_APPOBJTYPEFILTER = (Enum)505;
    static constexpr Enum INDEX_LIST_APPOBJTYPE_SCHEMAID = (Enum)506;
    static constexpr Enum INDEX_LIST_USE_TIMEFILTER = (Enum)507;
    static constexpr Enum INDEX_LIST_FROMTIME = (Enum)508;
    static constexpr Enum INDEX_LIST_TOTIME = (Enum)509;
    static constexpr Enum INDEX_LIST_TIME_SCHEMAID = (Enum)510;
    static constexpr Enum INDEX_LIST_USE_REFIDFILTER = (Enum)511;
    static constexpr Enum INDEX_LIST_REFID = (Enum)512;
    static constexpr Enum INDEX_LIST_REFID_SCHEMAID = (Enum)513;
    static constexpr Enum INDEX_LIST_NO_MORE_IDS = (Enum)514;
    static constexpr Enum INDEX_LIST_REQUESTED_NUMIDS = (Enum)515;
    static constexpr Enum INDEX_LIST_GATHERED_NUMIDS = (Enum)516;
    static constexpr Enum DS_ITERATOR_OBJECT_KEY = (Enum)517;
    static constexpr Enum ITERATOR_RESOLVED_VERSION = (Enum)518;
    static constexpr Enum ITERATOR_PRIMARYINDEXOBJ_HASHKEY = (Enum)519;
    static constexpr Enum ITERATOR_USE_STRINGFILTER = (Enum)520;
    static constexpr Enum ITERATOR_STRINGKEY = (Enum)521;
    static constexpr Enum ITERATOR_COMPARE_SCOPE = (Enum)522;
    static constexpr Enum ITERATOR_USE_TIMEFILTER = (Enum)523;
    static constexpr Enum ITERATOR_FROMTIME = (Enum)524;
    static constexpr Enum ITERATOR_TOTIME = (Enum)525;
    static constexpr Enum ITERATOR_TIME_SCHEMAID = (Enum)526;
    static constexpr Enum ITERATOR_USE_REFIDFILTER = (Enum)527;
    static constexpr Enum ITERATOR_REFID = (Enum)528;
    static constexpr Enum ITERATOR_REFID_SCHEMAID = (Enum)529;
    static constexpr Enum ITERATOR_OBJECT = (Enum)530;
    static constexpr Enum ITERATOR_COMPLETE = (Enum)531;
    static constexpr Enum RESULTS = (Enum)532;
    static constexpr Enum IS_STRING_INDEX = (Enum)533;
    static constexpr Enum STRING_KEY = (Enum)534;
    static constexpr Enum STRING_PART = (Enum)535;
    static constexpr Enum STRING_HASHID = (Enum)536;
    static constexpr Enum STRING_PART_OBJID = (Enum)537;
    static constexpr Enum STRING_KEY_OBJID = (Enum)538;
    static constexpr Enum LAST_STRING_KEY_OBJID_DONE = (Enum)539;
    static constexpr Enum INDEX_OBJTYPE = (Enum)540;
    static constexpr Enum MAIN_INDEX_OBJID = (Enum)541;
    static constexpr Enum REFID_BUCKET_OBJID = (Enum)542;
    static constexpr Enum RESOLVED_TIME_FROM = (Enum)543;
    static constexpr Enum RESOLVED_TIME_TO = (Enum)544;
    static constexpr Enum RESOLVED_TIME_FIELDID = (Enum)545;
    static constexpr Enum CURRENT_PRIMARY_INDEX_OBJID = (Enum)546;
    static constexpr Enum TIME_BUCKETS_OBJID = (Enum)547;
    static constexpr Enum RESULT_AVBL_FROM = (Enum)548;
    static constexpr Enum RESULT_NUM_IDS = (Enum)549;
    static constexpr Enum WIP_LIST = (Enum)550;
    static constexpr Enum WIP_OBJID = (Enum)551;
    static constexpr Enum WIP_MODIFIED_OBJID = (Enum)552;
    static constexpr Enum MAIN_DS_INITIAL_LASTID = (Enum)553;
    static constexpr Enum HASHID_DS_INITIAL_LASTID = (Enum)554;
    static constexpr Enum INDEX_DS_INITIAL_LASTID = (Enum)555;
    static constexpr Enum AGGREGATE_DS_INITIAL_LASTID = (Enum)556;
    static constexpr Enum QUERY_SCRATCHPAD = (Enum)557;
    static constexpr Enum QUERY_HASHKEY = (Enum)558;
    static constexpr Enum QUERY_OBJID = (Enum)559;
    static constexpr Enum QUERY_DETAILS = (Enum)560;
    static constexpr Enum PARENT_QUERY_DETAILS = (Enum)561;
    static constexpr Enum SOURCE_QUERY_DETAILS = (Enum)562;
    static constexpr Enum QUERY_RANGE_DATA = (Enum)563;
    static constexpr Enum RANGE_FROM = (Enum)564;
    static constexpr Enum RANGE_TO = (Enum)565;
    static constexpr Enum ACTIVE_EVENT_ID = (Enum)566;
    static constexpr Enum ID = (Enum)567;
    static constexpr Enum QUERY_OBJECT = (Enum)568;
    static constexpr Enum QUERY_IS_COMPLETE = (Enum)569;
    static constexpr Enum FORWARD_QUERY_RANGE_DATA = (Enum)570;
    static constexpr Enum REVERSE_QUERY_RANGE_DATA = (Enum)571;
    static constexpr Enum PRIMARY_QUERY_HASHKEY = (Enum)572;
    static constexpr Enum RESOLVED_SOURCE_DCID = (Enum)573;
    static constexpr Enum RESOLVED_APP_OBJTYPE = (Enum)574;
    static constexpr Enum FILTER_QUERY_HASHKEY = (Enum)575;
    static constexpr Enum RESOLVED_PARENT_QUERYID = (Enum)576;
    static constexpr Enum RESOLVED_STRINGKEY = (Enum)577;
    static constexpr Enum RESOLVED_COMPARE_SCOPE = (Enum)578;
    static constexpr Enum RESOLVED_STRING_SCHEMAID = (Enum)579;
    static constexpr Enum RESOLVED_REFID = (Enum)580;
    static constexpr Enum RESOLVED_REFID_SCHEMAID = (Enum)581;
    static constexpr Enum RESOLVED_FROMTIME = (Enum)582;
    static constexpr Enum RESOLVED_TOTIME = (Enum)583;
    static constexpr Enum RESOLVED_TIME_SCHEMAID = (Enum)584;
    static constexpr Enum RIGHTS_QUERY_HASHKEY = (Enum)585;
    static constexpr Enum SORTED_QUERY_HASHKEY = (Enum)586;
    static constexpr Enum RESOLVED_SORT_DIRECTION = (Enum)587;
    static constexpr Enum RESOLVED_SORT_SCHEMAID = (Enum)588;
    static constexpr Enum PRIMARY_QUERY = (Enum)589;
    static constexpr Enum PARENT_QUERY_HASHKEY = (Enum)590;
    static constexpr Enum PARENT_QUERY_ID = (Enum)591;
    static constexpr Enum REQUEST_SOURCEDC = (Enum)592;
    static constexpr Enum REQUEST_APP_OBJTYPE = (Enum)593;
    static constexpr Enum REQUEST_OBJID = (Enum)594;
    static constexpr Enum REQUEST_VERSION = (Enum)595;
    static constexpr Enum REQUEST_FROMTIME = (Enum)596;
    static constexpr Enum REQUEST_TOTIME = (Enum)597;
    static constexpr Enum REQUEST_TIME_SCHEMAID = (Enum)598;
    static constexpr Enum FILTER_SUB_QUERY = (Enum)599;
    static constexpr Enum REQUEST_STRINGKEY = (Enum)600;
    static constexpr Enum REQUEST_COMPARE_SCOPE = (Enum)601;
    static constexpr Enum REQUEST_STRING_SCHEMAID = (Enum)602;
    static constexpr Enum REQUEST_REFID = (Enum)603;
    static constexpr Enum REQUEST_REFID_SCHEMAID = (Enum)604;
    static constexpr Enum RIGHTS_SUB_QUERY = (Enum)605;
    static constexpr Enum REQUEST_AUTHENTICATED_USERID = (Enum)606;
    static constexpr Enum SORTING_SUB_QUERY = (Enum)607;
    static constexpr Enum SORTING_QUERY_HASHKEY = (Enum)608;
    static constexpr Enum REQUEST_SORT_DIRECTION = (Enum)609;
    static constexpr Enum REQUEST_SORT_SCHEMAID = (Enum)610;
    static constexpr Enum INDIVIDUAL_QUERY = (Enum)611;
    static constexpr Enum INDIVIDUAL_QUERY_HASHKEY = (Enum)612;
    static constexpr Enum RANGE_DIRECTION = (Enum)613;
    static constexpr Enum RANGE_NUMBER = (Enum)614;
    static constexpr Enum COMPOUND_QUERY = (Enum)615;
    static constexpr Enum COMPOUND_QUERY_HASHKEY = (Enum)616;
    static constexpr Enum REQUEST = (Enum)617;
    static constexpr Enum CONTACT_PERSON = (Enum)618;
    static constexpr Enum MAILING_NAME = (Enum)619;
    static constexpr Enum SON_OF = (Enum)620;
    static constexpr Enum DAUTHTER_OF = (Enum)621;
    static constexpr Enum ADDRESS = (Enum)622;
    static constexpr Enum FLAT_NUMBER = (Enum)623;
    static constexpr Enum FLOOR_NUMBER = (Enum)624;
    static constexpr Enum BUILDING_NAME = (Enum)625;
    static constexpr Enum NAME_OF_PREMISES_BUILDING = (Enum)625; //(Alias of: BUILDING_NAME)
    static constexpr Enum BUILDING_NUMBER = (Enum)626;
    static constexpr Enum ROAD = (Enum)627;
    static constexpr Enum STREET = (Enum)628;
    static constexpr Enum STREET_NAME = (Enum)628; //(Alias of: STREET)
    static constexpr Enum LANE = (Enum)629;
    static constexpr Enum AREA = (Enum)630;
    static constexpr Enum LOCATION = (Enum)631;
    static constexpr Enum DISTRICT = (Enum)632;
    static constexpr Enum TALUK = (Enum)633;
    static constexpr Enum CITY = (Enum)634;
    static constexpr Enum TOWN = (Enum)635;
    static constexpr Enum VILLAGE = (Enum)636;
    static constexpr Enum STATE = (Enum)637;
    static constexpr Enum COUNTRY = (Enum)638;
    static constexpr Enum COUNTRY_CODE = (Enum)639;
    static constexpr Enum COUNTRY_SUBDIVISION = (Enum)640;
    static constexpr Enum PO_BOX_NUMBER = (Enum)641;
    static constexpr Enum PIN_CODE = (Enum)642;
    static constexpr Enum POST_CODE = (Enum)643;
    static constexpr Enum STD_CODE = (Enum)644;
    static constexpr Enum PHONE_NO = (Enum)645;
    static constexpr Enum TELEPHONE_NO = (Enum)645; //(Alias of: PHONE_NO)
    static constexpr Enum MOBILE_NO = (Enum)646;
    static constexpr Enum FAX_NO = (Enum)647;
    static constexpr Enum EMAIL = (Enum)648;
    static constexpr Enum CC_EMAIL = (Enum)649;
    static constexpr Enum WEBSITE = (Enum)650;
    static constexpr Enum PLUS_CODE_ADDRESS = (Enum)651;
    static constexpr Enum HSN_CODE = (Enum)652;
    static constexpr Enum HSN = (Enum)652; //(Alias of: HSN_CODE)
    static constexpr Enum HSN_DESCRIPTION = (Enum)653;
    static constexpr Enum SAC = (Enum)654;
    static constexpr Enum SAC_CODE = (Enum)654; //(Alias of: SAC)
    static constexpr Enum SAC_DESCRIPTION = (Enum)655;
    static constexpr Enum NATURE_OF_TRANSACTION = (Enum)656;
    static constexpr Enum REVERSE_CHARGE_APPLICABLE = (Enum)657;
    static constexpr Enum REVERSE_CHARGE_RATE = (Enum)658;
    static constexpr Enum STATE_NAME = (Enum)659;
    static constexpr Enum APPLICABLE_FROM = (Enum)660;
    static constexpr Enum CALCULATION_TYPE = (Enum)661;
    static constexpr Enum SLAB_RATE_APPLICABLE = (Enum)662;
    static constexpr Enum UPTO_ITEM_RATE = (Enum)663;
    static constexpr Enum TAX_TYPE = (Enum)664;
    static constexpr Enum COMPUTED_ON = (Enum)665;
    static constexpr Enum COMPUTE_BASED_ON_ITEM_RATE = (Enum)666;
    static constexpr Enum IGST_RATE = (Enum)667;
    static constexpr Enum CGST_RATE = (Enum)668;
    static constexpr Enum SGST_RATE = (Enum)669;
    static constexpr Enum CESS_RATE = (Enum)670;
    static constexpr Enum STATE_CESS_RATE = (Enum)671;
    static constexpr Enum VALUATION_TYPE = (Enum)672;
    static constexpr Enum TYPE_OF_SUPPLY = (Enum)673;
    static constexpr Enum NOTIFICATION_DATE = (Enum)674;
    static constexpr Enum NOTIFICATION_NUMBER = (Enum)675;
    static constexpr Enum REPORTING_UNIT_OF_MEASURE = (Enum)676;
    static constexpr Enum NAME = (Enum)677;
    static constexpr Enum PARENT = (Enum)678;
    static constexpr Enum TYPE = (Enum)679;
    static constexpr Enum IS_SUB_LEDGER = (Enum)680;
    static constexpr Enum IS_REVENUE = (Enum)681;
    static constexpr Enum ALLOCATION_METHOD = (Enum)682;
    static constexpr Enum IS_NETT_BAL_FOR_REPORTING = (Enum)683;
    static constexpr Enum METHOD_OF_ALLOCATION_IN_PURCHASE = (Enum)684;
    static constexpr Enum TCS_APPLICABLE = (Enum)685;
    static constexpr Enum TDS_APPLICABLE = (Enum)686;
    static constexpr Enum MAINTAIN_BILLWISE = (Enum)687;
    static constexpr Enum COST_CENTRE_ON = (Enum)688;
    static constexpr Enum OPENING_BALANCE = (Enum)689;
    static constexpr Enum CLOSING_BALANCE = (Enum)690;
    static constexpr Enum COMPUTE_INTEREST_ON_BILLWISE = (Enum)691;
    static constexpr Enum SECTION = (Enum)692;
    static constexpr Enum PAYMENT_CODE = (Enum)693;
    static constexpr Enum REMITTANCE_CODE = (Enum)694;
    static constexpr Enum RATE_FOR_INDIVIDUALS_OR_HUF_WITH_PAN = (Enum)695;
    static constexpr Enum RATE_FOR_OTHER_DEDUCTED_TYPES_WITH_PAN = (Enum)696;
    static constexpr Enum IS_ZERO_RATED = (Enum)697;
    static constexpr Enum THRESHOLD_LIMIT = (Enum)698;
    static constexpr Enum EXEMPTION_LIMIT = (Enum)698; //(Alias of: THRESHOLD_LIMIT)
    static constexpr Enum DEDUCTEE_REFERENCE = (Enum)699;
    static constexpr Enum TAX_IDENTIFICATION_NUMBER = (Enum)700;
    static constexpr Enum UNIQUE_IDENTIFICATION_NUMBER = (Enum)700; //(Alias of: TAX_IDENTIFICATION_NUMBER)
    static constexpr Enum NAME_AS_ON_PAN = (Enum)701;
    static constexpr Enum RATE_FOR_OTHER_COLLECTEE_TYPES_WITH_PAN = (Enum)702;
    static constexpr Enum RATE_FOR_OTHER_COLLECTEE_TYPES_WITHOUT_PAN = (Enum)703;
    static constexpr Enum TYPE_OF_SERVICE = (Enum)704;
    static constexpr Enum SERVICE_TAX_RATE = (Enum)705;
    static constexpr Enum EDUCATION_CESS_RATE = (Enum)706;
    static constexpr Enum SECONDARY_EDUCATION_CESS_RATE = (Enum)707;
    static constexpr Enum SWATCHH_BHARAT_CESS_RATE = (Enum)708;
    static constexpr Enum KRISHI_KALYAN_CESS_RATE = (Enum)709;
    static constexpr Enum TARIFF_NAME = (Enum)710;
    static constexpr Enum RATE = (Enum)711;
    static constexpr Enum DESCRIPTION = (Enum)712;
    static constexpr Enum NOTES = (Enum)713;
    static constexpr Enum TYPE_OF_LEDGER = (Enum)714;
    static constexpr Enum PAN = (Enum)715;
    static constexpr Enum INCOME_TAX_NUMBER = (Enum)715; //(Alias of: PAN)
    static constexpr Enum IT_NUMBER = (Enum)715; //(Alias of: PAN)
    static constexpr Enum PAN_STATUS = (Enum)716;
    static constexpr Enum TIN = (Enum)717;
    static constexpr Enum SALES_TAX_NUMBER = (Enum)717; //(Alias of: TIN)
    static constexpr Enum CST_NUMBER = (Enum)718;
    static constexpr Enum CENTRAL_TAX_NUMBER = (Enum)718; //(Alias of: CST_NUMBER)
    static constexpr Enum ECC_NUMBER = (Enum)719;
    static constexpr Enum IMPORTER_ECC_NUMBER = (Enum)720;
    static constexpr Enum IEC_NUMBER = (Enum)721;
    static constexpr Enum RANGE = (Enum)722;
    static constexpr Enum DIVISION = (Enum)723;
    static constexpr Enum COMMISSIONNERATE = (Enum)724;
    static constexpr Enum JURISDICATION_APPLICABILITY_DETAILS = (Enum)725;
    static constexpr Enum REGISTRATION_TYPE = (Enum)726;
    static constexpr Enum ASSESSEE_OF_OTHER_TERRITORY = (Enum)727;
    static constexpr Enum GSTIN = (Enum)728;
    static constexpr Enum UIN = (Enum)728; //(Alias of: GSTIN)
    static constexpr Enum E_COMMERCE_OPERATOR = (Enum)729;
    static constexpr Enum CONSIDER_PARTY_AS_DEEMED_EXPORTER_FOR_PURCHASES = (Enum)730;
    static constexpr Enum PARTY_TYPE = (Enum)731;
    static constexpr Enum TRANSPORTER = (Enum)732;
    static constexpr Enum SERVICE_TAX_REGISTRATION_NUMBER = (Enum)733;
    static constexpr Enum IS_PARTY_AN_ASSOCIATED_ENTERPRISE = (Enum)734;
    static constexpr Enum DOES_PARTY_BELONG_TO_TAXABLE_TERRITORY = (Enum)735;
    static constexpr Enum ACCOUNT_HOLDERS_NAME = (Enum)736;
    static constexpr Enum ACCOUNT_NUMBER = (Enum)737;
    static constexpr Enum IFS_CODE = (Enum)738;
    static constexpr Enum IFSC = (Enum)738; //(Alias of: IFS_CODE)
    static constexpr Enum SWIFT_CODE = (Enum)739;
    static constexpr Enum BANK_NAME = (Enum)740;
    static constexpr Enum BRANCH = (Enum)741;
    static constexpr Enum BSR_CODE = (Enum)742;
    static constexpr Enum CLIENT_CODE = (Enum)743;
    static constexpr Enum EFFECTIVE_DATE_FOR_RECONCILIATION = (Enum)744;
    static constexpr Enum CHEQUE_BOOK = (Enum)745;
    static constexpr Enum CHECK_BOOK = (Enum)745; //(Alias of: CHEQUE_BOOK)
    static constexpr Enum FROM_NUMBER = (Enum)746;
    static constexpr Enum TO_NUMBER = (Enum)747;
    static constexpr Enum NUMBER_OF_CHEQUES = (Enum)748;
    static constexpr Enum NUMBER_OF_CHECKS = (Enum)748; //(Alias of: NUMBER_OF_CHEQUES)
    static constexpr Enum CHEQUE_BOOK_NAME = (Enum)749;
    static constexpr Enum CHECK_BOOK_NAME = (Enum)749; //(Alias of: CHEQUE_BOOK_NAME)
    static constexpr Enum CHEQUE_PRINTING = (Enum)750;
    static constexpr Enum CHECK_PRINTING = (Enum)750; //(Alias of: CHEQUE_PRINTING)
    static constexpr Enum USE_NOTIONAL_BANK_FOR_POST_DATED_VOUCHER = (Enum)751;
    static constexpr Enum CALCULATED_INTEREST_BASED_ON = (Enum)752;
    static constexpr Enum INCLUDE_TRANSACTION_DATE_FOR_INTEREST_CALCULATION_FOR_AMOUNTS_ADDED = (Enum)753;
    static constexpr Enum INCLUDE_TRANSACTION_DATE_FOR_INTEREST_CALCULATION_FOR_AMOUNTS_DEDUCTED = (Enum)754;
    static constexpr Enum INTEREST_STYLE = (Enum)755;
    static constexpr Enum INTEREST_BALANCES = (Enum)756;
    static constexpr Enum ACCOUNT_TYPE = (Enum)757;
    static constexpr Enum BANK_LOCATION = (Enum)758;
    static constexpr Enum BENEFICIARY_CODE = (Enum)759;
    static constexpr Enum COMPANY_BANK = (Enum)760;
    static constexpr Enum BRANCH_NAME = (Enum)761;
    static constexpr Enum CHEQUE_CROSS_COMMENT = (Enum)762;
    static constexpr Enum CHECK_CROSS_COMMENT = (Enum)762; //(Alias of: CHEQUE_CROSS_COMMENT)
    static constexpr Enum DEFAULT_TRANSACTION_TYPE = (Enum)763;
    static constexpr Enum DELIVERY_MODE = (Enum)764;
    static constexpr Enum DELIVERY_TO = (Enum)765;
    static constexpr Enum MICR_CODE = (Enum)766;
    static constexpr Enum PAYABLE_LOCATION = (Enum)767;
    static constexpr Enum PAYMENT_FAVOURING = (Enum)768;
    static constexpr Enum PRINT_LOCATION = (Enum)769;
    static constexpr Enum TRANSFER_MODE = (Enum)770;
    static constexpr Enum ALLOCATE_REVENUE_ITEMS = (Enum)771;
    static constexpr Enum ALLOCATE_NON_REVENUE_ITEMS = (Enum)772;
    static constexpr Enum USE_FOR_JOB_COSTING = (Enum)773;
    static constexpr Enum SYMBOL = (Enum)774;
    static constexpr Enum FORMAL_NAME = (Enum)775;
    static constexpr Enum ISO_CURRENCY_CODE = (Enum)776;
    static constexpr Enum NUMBER_OF_DECIMAL_PLACES = (Enum)777;
    static constexpr Enum NUMBER_OF_DECIMAL_PLACES_FOR_AMOUNT_IN_WORDS = (Enum)778;
    static constexpr Enum DECIMAL_SYMBOL = (Enum)779;
    static constexpr Enum SHOW_AMOUNT_IN_MILLIONS = (Enum)780;
    static constexpr Enum SUFFIX_SYMBOL_TO_AMOUNT = (Enum)781;
    static constexpr Enum ADD_SPACE_BETWEEN_AMOUNT_AND_SYMBOL = (Enum)782;
    static constexpr Enum WORD_REPRESENTING_AMOUNT_AFTER_DECIMAL = (Enum)783;
    static constexpr Enum NARRATION = (Enum)784;
    static constexpr Enum DATE = (Enum)785;
    static constexpr Enum CURRENCY = (Enum)786;
    static constexpr Enum STANDARD_RATE = (Enum)787;
    static constexpr Enum SELLING_RATE = (Enum)788;
    static constexpr Enum BUYING_RATE = (Enum)789;
    static constexpr Enum FROM_DATE = (Enum)790;
    static constexpr Enum TO_DATE = (Enum)791;
    static constexpr Enum BUDGET_TYPE = (Enum)792;
    static constexpr Enum ACCOUNT_NAME = (Enum)793;
    static constexpr Enum COST_CENTRE = (Enum)794;
    static constexpr Enum CAN_QUANTIES_BE_ADDED = (Enum)795;
    static constexpr Enum ITEM_NAME = (Enum)677; //(Alias of: NAME)
    static constexpr Enum PART_NUMBER = (Enum)796;
    static constexpr Enum MANUFACTURER_PART_NUMBER = (Enum)797;
    static constexpr Enum MPN = (Enum)797; //(Alias of: MANUFACTURER_PART_NUMBER)
    static constexpr Enum NATO_STOCK_NUMBER = (Enum)798;
    static constexpr Enum NSN = (Enum)798; //(Alias of: NATO_STOCK_NUMBER)
    static constexpr Enum BARCODE = (Enum)799;
    static constexpr Enum STOCK_KEEPING_UNIT = (Enum)799; //(Alias of: BARCODE)
    static constexpr Enum SKU = (Enum)799; //(Alias of: BARCODE)
    static constexpr Enum GLOBAL_TRADE_ITEM_NUMBER = (Enum)800;
    static constexpr Enum GTIN12 = (Enum)801;
    static constexpr Enum GTIN13 = (Enum)802;
    static constexpr Enum GTIN14 = (Enum)803;
    static constexpr Enum GTIN8 = (Enum)804;
    static constexpr Enum EAN = (Enum)804; //(Alias of: GTIN8)
    static constexpr Enum USER_DESCRIPTION = (Enum)805;
    static constexpr Enum ITEM_DESCRIPTION = (Enum)712; //(Alias of: DESCRIPTION)
    static constexpr Enum CATEGORY = (Enum)806;
    static constexpr Enum BRAND = (Enum)807;
    static constexpr Enum COLOUR = (Enum)808;
    static constexpr Enum COLOR = (Enum)809;
    static constexpr Enum MODEL = (Enum)810;
    static constexpr Enum UNITS_OF_MEASUREMENT = (Enum)811;
    static constexpr Enum ALTERNATE_UNITS = (Enum)812;
    static constexpr Enum CONVERSION_FACTOR = (Enum)813;
    static constexpr Enum BATCH_NUMBER = (Enum)814;
    static constexpr Enum LOT_NUMBER = (Enum)815;
    static constexpr Enum MFG_DATE = (Enum)816;
    static constexpr Enum MANUFACTURING_DATE = (Enum)816; //(Alias of: MFG_DATE)
    static constexpr Enum EXPIRY_DATE = (Enum)817;
    static constexpr Enum ACTUAL_QUANTITY = (Enum)818;
    static constexpr Enum BILLED_QUANTITY = (Enum)819;
    static constexpr Enum DISCOUNT = (Enum)820;
    static constexpr Enum TRACK_MFG_DATE = (Enum)821;
    static constexpr Enum EXPIRY_DATE_ON = (Enum)822;
    static constexpr Enum COSTING_METHOD = (Enum)823;
    static constexpr Enum MRP = (Enum)824;
    static constexpr Enum EXCISE_MRP_RATE = (Enum)825;
    static constexpr Enum EXCISE_MRP_ABATEMENT = (Enum)826;
    static constexpr Enum PRICE_DISCOUNT = (Enum)827;
    static constexpr Enum EFFECTIVE_DATE = (Enum)828;
    static constexpr Enum SERIAL_NUMBER = (Enum)829;
    static constexpr Enum ADDITIONAL_PROPERTY = (Enum)830;
    static constexpr Enum AGGREGATE_RATING = (Enum)831;
    static constexpr Enum AUDIENCE = (Enum)832;
    static constexpr Enum AWARD = (Enum)833;
    static constexpr Enum DEPTH = (Enum)834;
    static constexpr Enum ENERGY_CONSUMPTION_DETAILS = (Enum)835;
    static constexpr Enum HAS_MERCHANT_RETURN_POLICY = (Enum)836;
    static constexpr Enum HEIGHT = (Enum)837;
    static constexpr Enum ACCESSORY_FOR = (Enum)838;
    static constexpr Enum SPARE_PART_FOR = (Enum)839;
    static constexpr Enum CONSUMABLE_FOR = (Enum)840;
    static constexpr Enum RELATED_TO = (Enum)841;
    static constexpr Enum SIMILAR_TO = (Enum)842;
    static constexpr Enum IS_VARIANT_OF = (Enum)843;
    static constexpr Enum ITEM_CONDITION = (Enum)844;
    static constexpr Enum LOGO = (Enum)845;
    static constexpr Enum MANUFACTURER = (Enum)846;
    static constexpr Enum MATERIAL = (Enum)847;
    static constexpr Enum OFFERS = (Enum)848;
    static constexpr Enum PATTERN = (Enum)849;
    static constexpr Enum PRODUCTION_DATE = (Enum)850;
    static constexpr Enum PURCHASE_DATE = (Enum)851;
    static constexpr Enum RELEASE_DATE = (Enum)852;
    static constexpr Enum SLOGAN = (Enum)853;
    static constexpr Enum WEIGHT = (Enum)854;
    static constexpr Enum WIDTH = (Enum)855;
    static constexpr Enum ADDITIONAL_TYPE = (Enum)856;
    static constexpr Enum ALTERNATE_NAME = (Enum)857;
    static constexpr Enum IMAGE = (Enum)858;
    static constexpr Enum URL = (Enum)859;
    static constexpr Enum INVENTORY_LEVEL = (Enum)860;
    static constexpr Enum GTIN = (Enum)861;
    static constexpr Enum HAS_ENERGY_CONSUMPTION_DETAILS = (Enum)862;
    static constexpr Enum PRODUCT_GROUP = (Enum)863;
    static constexpr Enum IDENTIFIER = (Enum)864;
    static constexpr Enum SUB_BRAND = (Enum)865;
    static constexpr Enum VARIANT = (Enum)866;
    static constexpr Enum COMPANY = (Enum)867;
    static constexpr Enum PRODUCT_CATEGORY = (Enum)868;
    static constexpr Enum SEGMENT = (Enum)869;
    static constexpr Enum NET_WEIGHT = (Enum)870;
    static constexpr Enum CAPACITY_COMPOSITE = (Enum)871;
    static constexpr Enum TRADABLE_UNIT = (Enum)872;
    static constexpr Enum PACK_TYPE = (Enum)873;
    static constexpr Enum PACK_SIZE = (Enum)874;
    static constexpr Enum SUITABLE_FOR = (Enum)875;
    static constexpr Enum SIZE_SIMPLE = (Enum)876;
    static constexpr Enum MODEL_NUMBER = (Enum)877;
    static constexpr Enum COVER_MATERIAL = (Enum)878;
    static constexpr Enum SHAPE = (Enum)879;
    static constexpr Enum PATTERN_DESIGN = (Enum)880;
    static constexpr Enum FINISHING = (Enum)881;
    static constexpr Enum GRADE = (Enum)882;
    static constexpr Enum DIAMETER = (Enum)883;
    static constexpr Enum DIAMETRE = (Enum)883; //(Alias of: DIAMETER)
    static constexpr Enum ADDITIONAL_INFORMATION = (Enum)884;
    static constexpr Enum PRODUCT_DIMENSIONS = (Enum)885;
    static constexpr Enum COUNTRY_OF_ORIGIN = (Enum)886;
    static constexpr Enum BOOK_VOLUME = (Enum)887;
    static constexpr Enum PAPER_THICKNESS = (Enum)888;
    static constexpr Enum BINDING_TYPE = (Enum)889;
    static constexpr Enum NUMBER_OF_PAGES = (Enum)890;
    static constexpr Enum ISBN_10 = (Enum)891;
    static constexpr Enum ISBN_13 = (Enum)892;
    static constexpr Enum PUBLISHER = (Enum)893;
    static constexpr Enum EDITION = (Enum)894;
    static constexpr Enum GENRE = (Enum)895;
    static constexpr Enum SERIES = (Enum)896;
    static constexpr Enum AUTHOR = (Enum)897;
    static constexpr Enum LANGUAGE = (Enum)898;
    static constexpr Enum GENERIC_NAME = (Enum)899;
    static constexpr Enum SUB_VARIANT = (Enum)900;
    static constexpr Enum FORM = (Enum)901;
    static constexpr Enum FLAVOUR = (Enum)902;
    static constexpr Enum FRAGRANCE = (Enum)903;
    static constexpr Enum VOLUME = (Enum)904;
    static constexpr Enum MEDICAL_PRACTICE = (Enum)905;
    static constexpr Enum PRESCRIPTION_DRUG_CLASS = (Enum)906;
    static constexpr Enum CERTIFICATIONS = (Enum)907;
    static constexpr Enum INGREDIENTS = (Enum)908;
    static constexpr Enum COMPOSITION = (Enum)909;
    static constexpr Enum CONCENTRATION = (Enum)910;
    static constexpr Enum USED_FOR = (Enum)911;
    static constexpr Enum COMPATIBLE_WITH = (Enum)912;
    static constexpr Enum FEATURES = (Enum)913;
    static constexpr Enum BENEFITS = (Enum)914;
    static constexpr Enum DOSAGE = (Enum)915;
    static constexpr Enum STORAGE_INFORMATION = (Enum)916;
    static constexpr Enum WARNINGS = (Enum)917;
    static constexpr Enum SIDE_EFFECTS = (Enum)918;
    static constexpr Enum PACKAGE_DIMENSIONS = (Enum)919;
    static constexpr Enum PACKAGE_CONTENT = (Enum)920;
    static constexpr Enum CAPACITY = (Enum)921;
    static constexpr Enum CAPACITY_SIMPLE = (Enum)922;
    static constexpr Enum POWER_SOURCE = (Enum)923;
    static constexpr Enum VOLTAGE_ = (Enum)924;
    static constexpr Enum FREQUENCY = (Enum)925;
    static constexpr Enum PHASE = (Enum)926;
    static constexpr Enum POWER = (Enum)927;
    static constexpr Enum BATTERY_TYPE = (Enum)928;
    static constexpr Enum ENERGY_RATING = (Enum)929;
    static constexpr Enum CHARGE_TIME = (Enum)930;
    static constexpr Enum CONNECTIVTY = (Enum)931;
    static constexpr Enum APERTURE = (Enum)932;
    static constexpr Enum FIELD_OF_VIEW = (Enum)933;
    static constexpr Enum FOCAL_LENGTH = (Enum)934;
    static constexpr Enum CLOSE_FOCUS_LIMIT = (Enum)935;
    static constexpr Enum MAGNIFICATION = (Enum)936;
    static constexpr Enum FOCAL_RATIO = (Enum)937;
    static constexpr Enum WORKING_PRINCIPLE = (Enum)938;
    static constexpr Enum TEMPERATURE_RANGE = (Enum)939;
    static constexpr Enum INSTALLATION_TYPE = (Enum)940;
    static constexpr Enum COMPUTER_MEMORY_TYPE = (Enum)941;
    static constexpr Enum DISPLAY_TECHNOLOGY = (Enum)942;
    static constexpr Enum HARD_DISK_TECHNOLOGY = (Enum)943;
    static constexpr Enum STORAGE_SIZE = (Enum)944;
    static constexpr Enum DISPLAY_RESOLUTION = (Enum)945;
    static constexpr Enum OPERATING_SYSTEM = (Enum)946;
    static constexpr Enum PROCESSOR_SPEED = (Enum)947;
    static constexpr Enum PROCESSOR_TYPE = (Enum)948;
    static constexpr Enum RAM = (Enum)949;
    static constexpr Enum SCREEN_SIZE = (Enum)950;
    static constexpr Enum CPU_ARCHITECTURE = (Enum)951;
    static constexpr Enum AVERAGE_LIFE = (Enum)952;
    static constexpr Enum TECHNICAL_SPECIFICATIONS = (Enum)953;
    static constexpr Enum WARRANTY = (Enum)954;
    static constexpr Enum GUARANTEE = (Enum)955;
    static constexpr Enum SIZE_COMPOSITE = (Enum)956;
    static constexpr Enum DIMENSIONS = (Enum)885; //(Alias of: PRODUCT_DIMENSIONS)
    static constexpr Enum MATERIAL_THICKNESS = (Enum)957;
    static constexpr Enum PACAKAGE_CONTENT = (Enum)958;
    static constexpr Enum SHELF_LIFE = (Enum)959;
    static constexpr Enum PURITY = (Enum)960;
    static constexpr Enum COMPOSITION_INFORMATION = (Enum)961;
    static constexpr Enum PARTICLE_SIZE = (Enum)962;
    static constexpr Enum FINENESS = (Enum)963;
    static constexpr Enum AGGREGATE_STRENGTH = (Enum)964;
    static constexpr Enum COMPRESSIVE_STRENGTH = (Enum)965;
    static constexpr Enum TENSILE_STRENGTH = (Enum)966;
    static constexpr Enum YIELD_STRENGTH = (Enum)967;
    static constexpr Enum HARDNESS_ = (Enum)968;
    static constexpr Enum CORROSION_RESISTANCE = (Enum)969;
    static constexpr Enum FIRE_RESISTANCE_DURABLITY = (Enum)970;
    static constexpr Enum SPECIFIC_GRAVITY = (Enum)971;
    static constexpr Enum BULK_DENSITY = (Enum)972;
    static constexpr Enum DENSITY = (Enum)973;
    static constexpr Enum SETTING_TIME = (Enum)974;
    static constexpr Enum DRYING_TIME = (Enum)975;
    static constexpr Enum DEGREE_OF_WHITENESS = (Enum)976;
    static constexpr Enum MOISTURE_CONTENT = (Enum)977;
    static constexpr Enum WATER_ABSORPTION = (Enum)978;
    static constexpr Enum WARRANTY_INFORMATION = (Enum)979;
    static constexpr Enum NON_GST_GOODS = (Enum)980;
    static constexpr Enum INELIGIBLE_FOR_INPUT_CREDIT = (Enum)981;
    static constexpr Enum ADDITIOAL_TAX = (Enum)982;
    static constexpr Enum BUSINESS_NATURE = (Enum)983;
    static constexpr Enum CESS_ON_VAT = (Enum)984;
    static constexpr Enum GOODS_NATURE = (Enum)985;
    static constexpr Enum GOODS_TYPE = (Enum)986;
    static constexpr Enum CALCULATED_ON_ACTUAL_QUANTITY = (Enum)987;
    static constexpr Enum LOCAL_ATTITIONAL_TAX_RATE = (Enum)988;
    static constexpr Enum LOCAL_CESS_ON_VAT = (Enum)989;
    static constexpr Enum PARTY_ORGANISATION_TYPE = (Enum)990;
    static constexpr Enum PARTY_ORGANIZATION_TYPE = (Enum)990; //(Alias of: PARTY_ORGANISATION_TYPE)
    static constexpr Enum RATE_OF_VAT = (Enum)991;
    static constexpr Enum VAT_COMMODITY_CODE = (Enum)992;
    static constexpr Enum VAT_COMMODITY_NAME = (Enum)993;
    static constexpr Enum UNIT_QUANTITY_CODE = (Enum)994;
    static constexpr Enum FIRST_UNIT = (Enum)995;
    static constexpr Enum SECOND_UNIT = (Enum)996;
    static constexpr Enum IS_STORAGE_ALLOWED = (Enum)997;
    static constexpr Enum PROJECT_FOR_COSTING = (Enum)998;
    static constexpr Enum USED_FOR_STOCKS_WITH_THIRD_PARTY = (Enum)999;
    static constexpr Enum USED_FOR_THIRD_PARTY_STOCKS_WITH_US = (Enum)1000;
    static constexpr Enum IS_Excise_Tax_Unit = (Enum)1001;
    static constexpr Enum DISPLAY_NAME = (Enum)1002;
    static constexpr Enum DATE_OF_JOINING = (Enum)1003;
    static constexpr Enum EMPLOYEE_NUMBER = (Enum)1004;
    static constexpr Enum DESIGNATION = (Enum)1005;
    static constexpr Enum FUNCTION = (Enum)1006;
    static constexpr Enum GENDER = (Enum)1007;
    static constexpr Enum DATE_OF_BIRTH = (Enum)1008;
    static constexpr Enum BLOOD_GROUP = (Enum)1009;
    static constexpr Enum FATHER_NAME = (Enum)1010;
    static constexpr Enum MOTHER_NAME = (Enum)1011;
    static constexpr Enum SPOUSE_NAME = (Enum)1012;
    static constexpr Enum TRANSACTION_TYPE = (Enum)1013;
    static constexpr Enum APPLICABLE_TAX_REGIME = (Enum)1014;
    static constexpr Enum AADHAAR_NUMBER = (Enum)1015;
    static constexpr Enum UNIVERSAL_ACCOUNT_NUMBER = (Enum)1016;
    static constexpr Enum PF_ACCOUNT_NUMBER = (Enum)1017;
    static constexpr Enum EPS_ACCOUNT_NUMBER = (Enum)1018;
    static constexpr Enum DATE_OF_JOINING_FOR_PF = (Enum)1019;
    static constexpr Enum PRAN = (Enum)1020;
    static constexpr Enum PR_ACCOUNT_NUMBER = (Enum)1020; //(Alias of: PRAN)
    static constexpr Enum ESI_NUMBER = (Enum)1021;
    static constexpr Enum ESI_DISPENSARY_NAME = (Enum)1022;
    static constexpr Enum PASSPORT_NUMBER = (Enum)1023;
    static constexpr Enum COUNTRY_OF_ISSUE = (Enum)1024;
    static constexpr Enum PASSPORT_EXPIRY_DATE = (Enum)1025;
    static constexpr Enum VISA_NUMBER = (Enum)1026;
    static constexpr Enum VISA_EXPIRY_DATE = (Enum)1027;
    static constexpr Enum WORK_PERMIT_NUMBER = (Enum)1028;
    static constexpr Enum CONTRACT_START_DATE = (Enum)1029;
    static constexpr Enum CONTRACT_EXPIRY_DATE = (Enum)1030;
    static constexpr Enum ACCOUNT_NO = (Enum)1031;
    static constexpr Enum CROSS_CHEQUES_USING = (Enum)1032;
    static constexpr Enum CROSS_CHECKS_USING = (Enum)1032; //(Alias of: CROSS_CHEQUES_USING)
    static constexpr Enum EFFECTIVE_FROM = (Enum)1033;
    static constexpr Enum PAY_HEAD_NAME = (Enum)1034;
    static constexpr Enum PAY_HEAD_TYPE = (Enum)1035;
    static constexpr Enum INCOME_TYPE = (Enum)1036;
    static constexpr Enum AFFECT_NET_SALARY = (Enum)1037;
    static constexpr Enum NAME_TO_BE_DISPLAYED_IN_PAY_SLIP = (Enum)1038;
    static constexpr Enum USE_FOR_CALCULATION_OF_GRATUITY = (Enum)1039;
    static constexpr Enum INCOME_TAX_COMPONENT = (Enum)1040;
    static constexpr Enum TAX_CALCULATION_BASIS = (Enum)1041;
    static constexpr Enum DEDUCT_TDS_ACROSS_PERIOD = (Enum)1042;
    static constexpr Enum GST_APPLICABLE_FROM = (Enum)1043;
    static constexpr Enum PERIODICITY_OF_GSTR1 = (Enum)1044;
    static constexpr Enum NATURE_OF_GOODS = (Enum)1045;
    static constexpr Enum TAX_DEDUCTED_AND_COLLECTION_ACCOUNT_NUMBER = (Enum)1046;
    static constexpr Enum TAN = (Enum)1046; //(Alias of: TAX_DEDUCTED_AND_COLLECTION_ACCOUNT_NUMBER)
    static constexpr Enum TAN_REGISTRATION_NUMBER = (Enum)1047;
    static constexpr Enum INCOME_TAX_CIRCLE = (Enum)1048;
    static constexpr Enum INCOME_TAX_WARD = (Enum)1049;
    static constexpr Enum DEDUCTOR_TYPE = (Enum)1050;
    static constexpr Enum DEDUCTOR_BRANCH = (Enum)1051;
    static constexpr Enum DEDUCTOR_DIVISION = (Enum)1052;
    static constexpr Enum NAME_OF_PERSON_RESPONSIBLE = (Enum)1053;
    static constexpr Enum DAUGHTER_OF = (Enum)1054;
    static constexpr Enum VERSION_NUMBER = (Enum)1055;
    static constexpr Enum INVOICE_REFERENCE_NUMBER = (Enum)1056;
    static constexpr Enum BUSINESS_PROCESS_TYPE = (Enum)1057;
    static constexpr Enum INVOICE_NUMBER = (Enum)1058;
    static constexpr Enum INVOICE_ISSUE_DATE = (Enum)1059;
    static constexpr Enum PAYMENT_DUE_DATE = (Enum)1060;
    static constexpr Enum INVOICE_TYPE_CODE = (Enum)1061;
    static constexpr Enum INVOICE_NOTE = (Enum)1062;
    static constexpr Enum VALUE_ADDED_TAX_POINT_DATE = (Enum)1063;
    static constexpr Enum INVOICE_CURRENCY_CODE = (Enum)1064;
    static constexpr Enum VAT_ACCOUNTING_CURRENCY_CODE = (Enum)1065;
    static constexpr Enum BUYER_ACCOUNTING_REFERENCE = (Enum)1066;
    static constexpr Enum BUYER_REFERENCE = (Enum)1067;
    static constexpr Enum DELIVERY_PERIOD = (Enum)1068;
    static constexpr Enum INVOICE_PERIOD = (Enum)1069;
    static constexpr Enum INVOICING_PERIOD_START_DATE = (Enum)1070;
    static constexpr Enum INVOICING_PERIOD_END_DATE = (Enum)1071;
    static constexpr Enum VALUE_ADDED_TAX_POINT_DATE_CODE = (Enum)1072;
    static constexpr Enum PURCHASE_ORDER_REFERENCE = (Enum)1073;
    static constexpr Enum SALES_ORDER_REFERENCE = (Enum)1074;
    static constexpr Enum PRECEDING_INVOICE_REFERENCE = (Enum)1075;
    static constexpr Enum INVOICE_DOCUMENT_REFERENCE = (Enum)1076;
    static constexpr Enum PRECEDING_INVOICE_NUMBER = (Enum)1077;
    static constexpr Enum PRECEDING_INVOICE_ISSUE_DATE = (Enum)1078;
    static constexpr Enum DESPATCH_ADVICE_REFERENCE = (Enum)1079;
    static constexpr Enum RECEIVING_ADVICE_REFERENCE = (Enum)1080;
    static constexpr Enum CONTRACT_REFERENCE = (Enum)1081;
    static constexpr Enum PARTY_NAME = (Enum)677; //(Alias of: NAME)
    static constexpr Enum SELLER_NAME = (Enum)677; //(Alias of: NAME)
    static constexpr Enum TRADING_NAME = (Enum)1082;
    static constexpr Enum LEGAL_NAME = (Enum)1082; //(Alias of: TRADING_NAME)
    static constexpr Enum ELECTRONIC_ADDRESS = (Enum)1083;
    static constexpr Enum ELECTRONIC_ADDRESS_IDENTIFICATION_SCHEME_IDENTIFIER = (Enum)1084;
    static constexpr Enum BANK_ASSIGNED_CREDITOR_IDENTIFIER = (Enum)1085;
    static constexpr Enum BANK_ASSIGNED_CREDITOR_IDENTIFIER_IDENTIFICATION_SCHEME_IDENTIFIER = (Enum)1086;
    static constexpr Enum VAT_IDENTIFIER = (Enum)1087;
    static constexpr Enum TAX_REGISTRATION_IDENTIFIER = (Enum)1088;
    static constexpr Enum LEGAL_REGISTRATION_IDENTIFIER = (Enum)1089;
    static constexpr Enum LEGAL_REGISTRATION_IDENTIFIER_IDENTIFICATION_SCHEME_IDENTIFIER = (Enum)1090;
    static constexpr Enum ADDITIONAL_LEGAL_INFORMATION = (Enum)1091;
    static constexpr Enum CONTACT_POINT = (Enum)1092;
    static constexpr Enum IDENTIFIER_IDENTIFICATION_SCHEME_IDENTIFIER = (Enum)1093;
    static constexpr Enum PAYEE_IDENTIFIER_OR_BANK_ASSIGNED_CREDITOR_IDENTIFIER = (Enum)1094;
    static constexpr Enum PAYEE_OR_BANK_ASSIGNED_CREDITOR_IDENTIFIER_IDENTIFICATION_SCHEME_IDENTIFIER = (Enum)1095;
    static constexpr Enum PAYEE_NAME = (Enum)1096;
    static constexpr Enum PAYEE_LEGAL_REGISTRATION_IDENTIFIER = (Enum)1097;
    static constexpr Enum PAYEE_LEGAL_REGISTRATION_IDENTIFIER_IDENTIFICATION_SCHEME_IDENTIFIER = (Enum)1098;
    static constexpr Enum DELIVER_TO_PARTY_NAME = (Enum)677; //(Alias of: PARTY_NAME)
    static constexpr Enum ACTUAL_DELIVERY_DATE = (Enum)1099;
    static constexpr Enum BATCH_NAME = (Enum)1100;
    static constexpr Enum BATCH_RATE = (Enum)1101;
    static constexpr Enum BATCH_MRP = (Enum)1102;
    static constexpr Enum ESCALATION_RATE = (Enum)1103;
    static constexpr Enum BATCH_DISCOUNT = (Enum)1104;
    static constexpr Enum MANUFACTURED_DATE = (Enum)1105;
    static constexpr Enum EXPIRY_PERIOD = (Enum)1106;
    static constexpr Enum GODOWN_NAME = (Enum)1107;
    static constexpr Enum SOURCE_GODOWN_NAME = (Enum)1108;
    static constexpr Enum DESTINATION_GODOWN_NAME = (Enum)1109;
    static constexpr Enum ADDITIONALL_AMOUNT = (Enum)1110;
    static constexpr Enum ADDITIONAL_EXPENSE_AMOUNT = (Enum)1111;
    static constexpr Enum INDENT_NUMBER = (Enum)1112;
    static constexpr Enum ORDER_NUMBER = (Enum)1113;
    static constexpr Enum ORDER_PRE_CLOSURE_DATE = (Enum)1114;
    static constexpr Enum ORDER_PRE_CLOSURE_QUANTITY = (Enum)1115;
    static constexpr Enum ORDER_PRE_CLOSURE_REASON = (Enum)1116;
    static constexpr Enum ORDER_TYPE = (Enum)1117;
    static constexpr Enum TRACKING_NUMBER = (Enum)1118;
    static constexpr Enum BENEFICIARY_BANK_CHARGES = (Enum)1119;
    static constexpr Enum IMB_CODE = (Enum)1120;
    static constexpr Enum TRANSACTION_ID = (Enum)1121;
    static constexpr Enum UNIQUE_REFERENCE_NUMBER = (Enum)1122;
    static constexpr Enum CARD_NUMBER = (Enum)1123;
    static constexpr Enum APPROVAL_CODE = (Enum)1124;
    static constexpr Enum MERCHANT_ID = (Enum)1125;
    static constexpr Enum TERMINAL_ID = (Enum)1126;
    static constexpr Enum TIP_AMOUNT = (Enum)1127;
    static constexpr Enum TIP_REMARKS = (Enum)1128;
    static constexpr Enum BANK_EMPLOYEE_NAME = (Enum)1129;
    static constexpr Enum BANK_PARTY_NAME = (Enum)1130;
    static constexpr Enum BANK_CODE = (Enum)1131;
    static constexpr Enum BANKERS_DATE = (Enum)1132;
    static constexpr Enum BANKERS_REMARKS = (Enum)1133;
    static constexpr Enum BANK_REFERENCE = (Enum)1134;
    static constexpr Enum CASH_DENOMINATION = (Enum)1135;
    static constexpr Enum CHEQUE_PRINTED = (Enum)1136;
    static constexpr Enum CHECK_PRINTED = (Enum)1136; //(Alias of: CHEQUE_PRINTED)
    static constexpr Enum CHEQUE_RANGE = (Enum)1137;
    static constexpr Enum CHECK_RANGE = (Enum)1137; //(Alias of: CHEQUE_RANGE)
    static constexpr Enum CHEQUE_NUMBER = (Enum)1138;
    static constexpr Enum CHECK_NUMBER = (Enum)1138; //(Alias of: CHEQUE_NUMBER)
    static constexpr Enum CLEARING_BANK_CODE = (Enum)1139;
    static constexpr Enum INSTRUMENT_DATE = (Enum)1140;
    static constexpr Enum INSTRUMENT_NUMBER = (Enum)1141;
    static constexpr Enum INSTRUMENT_RETURN_DATE = (Enum)1142;
    static constexpr Enum LOCAL_BANK_CHARGES = (Enum)1143;
    static constexpr Enum PDC_ACTUAL_DATE = (Enum)1144;
    static constexpr Enum PDC_REMARKS = (Enum)1145;
    static constexpr Enum DRAWEE_BANK_CODE = (Enum)1146;
    static constexpr Enum PAYABLE_LOCATION_CODE = (Enum)1147;
    static constexpr Enum PAYMENT_MODE = (Enum)1148;
    static constexpr Enum PAYMENT_GATEWAY = (Enum)1149;
    static constexpr Enum PRINT_LOCATION_CODE = (Enum)1150;
    static constexpr Enum PAYMENT_ADVICE_STATUS = (Enum)1151;
    static constexpr Enum RESERVATION_STATUS = (Enum)1152;
    static constexpr Enum SETTLE_AMOUNT = (Enum)1153;
    static constexpr Enum STATUS = (Enum)1154;
    static constexpr Enum TRANSACTION_NAME = (Enum)1155;
    static constexpr Enum VOID_AMOUNT = (Enum)1156;
    static constexpr Enum SUB_TRANSACTION_TYPE = (Enum)1157;
    static constexpr Enum TRANSASCTION_CATEGORY = (Enum)1158;
    static constexpr Enum ECOMMERCE_GSTIN = (Enum)1159;
    static constexpr Enum DOCUMENT_TYPE = (Enum)1160;
    static constexpr Enum DOCUMENT_NUMBER = (Enum)1161;
    static constexpr Enum DOCUMENT_DATE = (Enum)1162;
    static constexpr Enum EXPORT_CATEGORY = (Enum)1163;
    static constexpr Enum SHIPPING_BILL_NO = (Enum)1164;
    static constexpr Enum SHIPPING_BILL_DATE = (Enum)1165;
    static constexpr Enum PORT_CODE = (Enum)1166;
    static constexpr Enum INVOICE_VALUE_IN_CURRENCY = (Enum)1167;
    static constexpr Enum SELLER_GSTIN = (Enum)1168;
    static constexpr Enum TRADE_NAME = (Enum)1082; //(Alias of: LEGAL_NAME)
    static constexpr Enum PINCODE = (Enum)1169;
    static constexpr Enum BUYER_GSTIN = (Enum)1170;
    static constexpr Enum ASSESSABLE_VALUE = (Enum)1171;
    static constexpr Enum IGST_VALUE = (Enum)1172;
    static constexpr Enum CGST_VALUE = (Enum)1173;
    static constexpr Enum SGST_VALUE = (Enum)1174;
    static constexpr Enum CESS_NON_ADVOL = (Enum)1175;
    static constexpr Enum CESS_VALUE = (Enum)1176;
    static constexpr Enum TOTAL_INVOICE_VALUE = (Enum)1177;
    static constexpr Enum UNIT_CODE = (Enum)1178;
    static constexpr Enum UNIT_PRICE = (Enum)1179;
    static constexpr Enum SELLING_PRICE = (Enum)1180;
    static constexpr Enum CESS_ADVOL_RATE = (Enum)1181;
    static constexpr Enum CESS_NON_ADVOL_RATE = (Enum)1182;
    static constexpr Enum TOTAL_PRICE = (Enum)1183;
    static constexpr Enum ACCOUNT_DETAILS = (Enum)1184;
    static constexpr Enum BALANCE_AMOUNT = (Enum)1185;
    static constexpr Enum PRODUCT_DESCRIPTION = (Enum)712; //(Alias of: DESCRIPTION)
    static constexpr Enum ADDITIONALTYPE = (Enum)1186;
    static constexpr Enum ALTERNATENAME = (Enum)1187;
    static constexpr Enum AGGREGATERATING = (Enum)1188;
    static constexpr Enum REVIEW = (Enum)1189;
    static constexpr Enum ENERGY_EFFICIENCY_SCALE_MAX = (Enum)1190;
    static constexpr Enum ENERGY_EFFICIENCY_SCALE_MIN = (Enum)1191;
    static constexpr Enum ENERGY_EFFICIENCY_CATEGORY = (Enum)1192;
    static constexpr Enum IN_STORE_RETURNS_OFFERED = (Enum)1193;
    static constexpr Enum MERCHANT_RETURN_DAYS = (Enum)1194;
    static constexpr Enum MERCHANT_RETURN_LINK = (Enum)1195;
    static constexpr Enum REFUND_TYPE = (Enum)1196;
    static constexpr Enum RETURN_FEES = (Enum)1197;
    static constexpr Enum RETURN_POLICY_CATEGORY = (Enum)1198;
    static constexpr Enum ACCELERATION_TIME = (Enum)1199;
    static constexpr Enum BODY_TYPE = (Enum)1200;
    static constexpr Enum CALL_SIGN = (Enum)1201;
    static constexpr Enum CARGO_VOLUME = (Enum)1202;
    static constexpr Enum DATE_VEHICLE_FIRST_REGISTERED = (Enum)1203;
    static constexpr Enum DRIVE_WHEEL_CONFIGURATION = (Enum)1204;
    static constexpr Enum EMISSIONS_CO2 = (Enum)1205;
    static constexpr Enum FUEL_CAPACITY = (Enum)1206;
    static constexpr Enum FUEL_CONSUMPTION = (Enum)1207;
    static constexpr Enum FUEL_EFFICIENCY = (Enum)1208;
    static constexpr Enum FUEL_TYPE = (Enum)1209;
    static constexpr Enum KNOWN_VEHICLE_DAMAGES = (Enum)1210;
    static constexpr Enum MEETS_EMISSION_STANDARD = (Enum)1211;
    static constexpr Enum MILEAGE_FROM_ODOMETER = (Enum)1212;
    static constexpr Enum MODEL_DATE = (Enum)1213;
    static constexpr Enum NUMBER_OF_AIR_BAGS = (Enum)1214;
    static constexpr Enum NUMBER_OF_AXLES = (Enum)1215;
    static constexpr Enum NUMBER_OF_DOORS = (Enum)1216;
    static constexpr Enum NUMBER_OF_FORWARD_GEARS = (Enum)1217;
    static constexpr Enum NUMBER_OF_PREVIOUS_OWNERS = (Enum)1218;
    static constexpr Enum PAY_LOAD = (Enum)1219;
    static constexpr Enum SEATING_CAPACITY = (Enum)1220;
    static constexpr Enum SPEED = (Enum)1221;
    static constexpr Enum STEERING_POSITION = (Enum)1222;
    static constexpr Enum TONGUE_WEIGHT = (Enum)1223;
    static constexpr Enum TRAILER_WEIGHT = (Enum)1224;
    static constexpr Enum VEHICLE_CONFIGURATION = (Enum)1225;
    static constexpr Enum VEHICLE_ENGINE = (Enum)1226;
    static constexpr Enum VEHICLE_IDENTIFICATION_NUMBER = (Enum)1227;
    static constexpr Enum VEHICLE_INTERIOR_COLOUR = (Enum)1228;
    static constexpr Enum VEHICLE_INTERIOR_COLOR = (Enum)1228; //(Alias of: VEHICLE_INTERIOR_COLOUR)
    static constexpr Enum VEHICLE_INTERIORTYPE = (Enum)1229;
    static constexpr Enum VEHICLE_MODEL_DATE = (Enum)1230;
    static constexpr Enum VEHICLE_SEATING_CAPACITY = (Enum)1231;
    static constexpr Enum VEHICLE_SPECIAL_USAGE = (Enum)1232;
    static constexpr Enum VEHICLE_TRANSMISSION = (Enum)1233;
    static constexpr Enum WEIGHT_TOTAL = (Enum)1234;
    static constexpr Enum WHEEL_BASE = (Enum)1235;
    static constexpr Enum ACQUIRED_FROM = (Enum)1236;
    static constexpr Enum OWNED_FROM = (Enum)1237;
    static constexpr Enum OWNED_THROUGH = (Enum)1238;
    static constexpr Enum TYPE_OF_GOOD = (Enum)1239;
    static constexpr Enum AREA_SERVED = (Enum)1240;
    static constexpr Enum AVAILABLE_CHANNEL = (Enum)1241;
    static constexpr Enum BROKER = (Enum)1242;
    static constexpr Enum HOURS_AVAILABLE = (Enum)1243;
    static constexpr Enum IS_RELATED_TO = (Enum)1244;
    static constexpr Enum IS_SIMILAR_TO = (Enum)1245;
    static constexpr Enum PROVIDER = (Enum)1246;
    static constexpr Enum PROVIDER_MOBILITY = (Enum)1247;
    static constexpr Enum SERVICE_OUTPUT = (Enum)1248;
    static constexpr Enum SERVICE_TYPE = (Enum)1249;
    static constexpr Enum TERMS_OF_SERVICE = (Enum)1250;
    static constexpr Enum ISSUEDTHROUGH = (Enum)1251;
    static constexpr Enum ITEMOFFERED = (Enum)1252;
    static constexpr Enum ISSUED_BY = (Enum)1253;
    static constexpr Enum ISSUED_THROUGH = (Enum)1254;
    static constexpr Enum PERMIT_AUDIENCE = (Enum)1255;
    static constexpr Enum VALID_FOR = (Enum)1256;
    static constexpr Enum VALID_FROM = (Enum)1257;
    static constexpr Enum VALID_IN = (Enum)1258;
    static constexpr Enum VALID_UNTIL = (Enum)1259;
    static constexpr Enum NUMBER_OF_BEDS = (Enum)1260;
    static constexpr Enum TYPE_OF_BED = (Enum)1261;
    static constexpr Enum LENGTH = (Enum)1262;
    static constexpr Enum THICKNESS = (Enum)1263;
    static constexpr Enum BREADTH = (Enum)1264;
    static constexpr Enum GROSS_WEIGHT = (Enum)1265;
    static constexpr Enum GIVEN_NAME = (Enum)1266;
    static constexpr Enum AFFILIATION = (Enum)1267;
    static constexpr Enum ALUMNI_OF = (Enum)1268;
    static constexpr Enum BIRTH_DATE = (Enum)1269;
    static constexpr Enum BIRTH_PLACE = (Enum)1270;
    static constexpr Enum CHILDREN = (Enum)1271;
    static constexpr Enum COLLEAGUE = (Enum)1272;
    static constexpr Enum DEATH_DATE = (Enum)1273;
    static constexpr Enum DEATH_PLACE = (Enum)1274;
    static constexpr Enum DUNS = (Enum)1275;
    static constexpr Enum FAMILY_NAME = (Enum)1276;
    static constexpr Enum FAX_NUMBER = (Enum)1277;
    static constexpr Enum FOLLOWS = (Enum)1278;
    static constexpr Enum FUNDER = (Enum)1279;
    static constexpr Enum GLOBAL_LOCATION_NUMBER = (Enum)1280;
    static constexpr Enum OCCUPATION = (Enum)1281;
    static constexpr Enum HOME_LOCATION = (Enum)1282;
    static constexpr Enum HONORIFIC_PREFIX = (Enum)1283;
    static constexpr Enum HONORIFIC_SUFFIX = (Enum)1284;
    static constexpr Enum ISICV4 = (Enum)1285;
    static constexpr Enum JOB_TITLE = (Enum)1286;
    static constexpr Enum KNOWS = (Enum)1287;
    static constexpr Enum KNOWS_ABOUT = (Enum)1288;
    static constexpr Enum KNOWS_LANGUAGE = (Enum)1289;
    static constexpr Enum MAKES_OFFER = (Enum)1290;
    static constexpr Enum MEMBER_OF = (Enum)1291;
    static constexpr Enum NAICS = (Enum)1292;
    static constexpr Enum NATIONALITY = (Enum)1293;
    static constexpr Enum NET_WORTH = (Enum)1294;
    static constexpr Enum OWNS = (Enum)1295;
    static constexpr Enum PERFORMER_IN = (Enum)1296;
    static constexpr Enum PUBLISHING_PRINCIPLES = (Enum)1297;
    static constexpr Enum SEEKS = (Enum)1298;
    static constexpr Enum SIBLING = (Enum)1299;
    static constexpr Enum SPONSOR = (Enum)1300;
    static constexpr Enum SPOUSE = (Enum)1301;
    static constexpr Enum TAXID = (Enum)1302;
    static constexpr Enum TELEPHONE = (Enum)1303;
    static constexpr Enum VATID = (Enum)1304;
    static constexpr Enum WORK_LOCATION = (Enum)1305;
    static constexpr Enum WORKS_FOR = (Enum)1306;
    static constexpr Enum EDUCATION_REQUIREMENTS = (Enum)1307;
    static constexpr Enum ESTIMATED_SALARY = (Enum)1308;
    static constexpr Enum EXPERIENCE_REQUIREMENTS = (Enum)1309;
    static constexpr Enum OCCUPATION_LOCATION = (Enum)1310;
    static constexpr Enum OCCUPATIONAL_CATEGORY = (Enum)1311;
    static constexpr Enum QUALIFICATIONS = (Enum)1312;
    static constexpr Enum RESPONSIBILITIES = (Enum)1313;
    static constexpr Enum SKILLS = (Enum)1314;
    static constexpr Enum VOUCHER_NARATION = (Enum)1315;
    static constexpr Enum SUPPLY_TYPE = (Enum)1316;
    static constexpr Enum TERMS_OF_PAYMENT = (Enum)1317;
    static constexpr Enum TERMS_OF_DELIVERY = (Enum)1318;
    static constexpr Enum MODE_OF_PAYMENT = (Enum)1319;
    static constexpr Enum OTHER_REFERENCES = (Enum)1320;
    static constexpr Enum ORIGINAL_INVOICE_BOOK_NAME = (Enum)1321;
    static constexpr Enum ORIGINAL_INVOICE_NUMBER = (Enum)1322;
    static constexpr Enum ORIGINAL_INVOICE_DATE = (Enum)1323;
    static constexpr Enum PLACE_OF_RECEIPT_BY_SHIPPER = (Enum)1324;
    static constexpr Enum VESSEL_NUMBER = (Enum)1325;
    static constexpr Enum FLIGHT_NUMBER = (Enum)1326;
    static constexpr Enum PORT_OF_LOADING = (Enum)1327;
    static constexpr Enum PORT_OF_DISCHARGE = (Enum)1328;
    static constexpr Enum COUNTRY_TO = (Enum)1329;
    static constexpr Enum SHIPPING_BILL_NUMBER = (Enum)1330;
    static constexpr Enum BILL_OF_ENTRY_NUMBER = (Enum)1331;
    static constexpr Enum BILL_OF_ENTRY_DATE = (Enum)1332;
    static constexpr Enum FOREIGN_CURRENCY_CODE = (Enum)1333;
    static constexpr Enum REFUND_CLAIM = (Enum)1334;
    static constexpr Enum EXPORT_DUTY = (Enum)1335;
    static constexpr Enum MARKS = (Enum)1336;
    static constexpr Enum NUMBER_OF_PACKAGES = (Enum)1337;
    static constexpr Enum SUB_SUPPLY_TYPE = (Enum)1338;
    static constexpr Enum SUB_SYPPLY_DESCRIPTION = (Enum)1339;
    static constexpr Enum STATE_OF_SUPPLY = (Enum)1340;
    static constexpr Enum TYPE_OF_TRANSACTION = (Enum)1341;
    static constexpr Enum EWAY_BILL_NUMBER = (Enum)1342;
    static constexpr Enum EWAY_BILL_DATE = (Enum)1343;
    static constexpr Enum EWAY_BILL_VALID_UPTO = (Enum)1344;
    static constexpr Enum EWAY_BILL_STATUS = (Enum)1345;
    static constexpr Enum EWAY_BILL_ALERT = (Enum)1346;
    static constexpr Enum EWAY_BILL_ERROR_CODE = (Enum)1347;
    static constexpr Enum EWAY_BILL_INFO = (Enum)1348;
    static constexpr Enum CONSOLIDATED_BILL_DATE = (Enum)1349;
    static constexpr Enum CONSOLIDATED_BILL_NUMBER = (Enum)1350;
    static constexpr Enum SHIPPED_FROM_STATE = (Enum)1351;
    static constexpr Enum SHIPPED_TO_DATE = (Enum)1352;
    static constexpr Enum GST_REGISTRATION_TYPE = (Enum)1353;
    static constexpr Enum PLACE_OF_SUPPLY = (Enum)1354;
    static constexpr Enum MODE_OF_TRANSPORTATION = (Enum)1355;
    static constexpr Enum TYPE_OF_VEHCILE = (Enum)1356;
    static constexpr Enum DISTANCE_OF_TRANSPORTATION = (Enum)1357;
    static constexpr Enum TRANSPORTER_ID = (Enum)1358;
    static constexpr Enum TRANSPORTER_NAME = (Enum)1359;
    static constexpr Enum TRANSPORTER_DOC_NUMBER = (Enum)1360;
    static constexpr Enum TRANSPORTER_DOC_DATE = (Enum)1361;
    static constexpr Enum VEHICLE_NUMBER = (Enum)1362;
    static constexpr Enum UQC = (Enum)1363;
    static constexpr Enum TOTAL_QTY = (Enum)1364;
    static constexpr Enum NAME_OF_THE_PRODUCT = (Enum)1365;
    static constexpr Enum DESCRIPTION_OF_THE_PRODUCT = (Enum)1366;
    static constexpr Enum HSN_CODE_OF_THE_PRODUCT = (Enum)1367;
    static constexpr Enum QUANTITY_OF_PRODUCT_IN_NUMBERS = (Enum)1368;
    static constexpr Enum UNIT_OF_THE_PRODUCT = (Enum)1369;
    static constexpr Enum TAXABLE_AMOUNT = (Enum)1370;
    static constexpr Enum CESS_NON_ADVOLERUM = (Enum)1371;
    static constexpr Enum OTHER_VALUE = (Enum)1372;
    static constexpr Enum TOTAL_VALUE = (Enum)1373;
    static constexpr Enum CGST_AMOUNT = (Enum)1374;
    static constexpr Enum SGST_AMOUNT = (Enum)1375;
    static constexpr Enum IGST_AMOUNT = (Enum)1376;
    static constexpr Enum CESS_AMOUNT = (Enum)1377;
    static constexpr Enum CESS_NON_ADVOL_AMOUNT = (Enum)1378;
    static constexpr Enum CHALLANS_NUMBER = (Enum)1379;
    static constexpr Enum DESPATCHED_THROUGH = (Enum)1380;
    static constexpr Enum DESTINATION = (Enum)1381;
    static constexpr Enum CARRIER_NAME = (Enum)1382;
    static constexpr Enum BILL_OF_LADING_NUMBER = (Enum)1383;
    static constexpr Enum LR_RR_NUMBER = (Enum)1384;
    static constexpr Enum BILL_OF_LADING_DATE = (Enum)1385;
    static constexpr Enum LR_RR_DATE = (Enum)1386;
    static constexpr Enum AGENT_NAME = (Enum)1387;
    static constexpr Enum DURATION_OF_PROCESS = (Enum)1388;
    static constexpr Enum NATURE_OF_PROCESSING = (Enum)1389;
    static constexpr Enum EMPLOYEE_NAME = (Enum)1390;
    static constexpr Enum ATTENDANCE_TYPE = (Enum)1391;
    static constexpr Enum PRODUCTION_TYPE = (Enum)1392;
    static constexpr Enum UNIT = (Enum)1393;
    static constexpr Enum REFERENCE_NUMBER = (Enum)1394;
    static constexpr Enum REFERENCE_DATE = (Enum)1395;
    static constexpr Enum TRANSPORT_MODE = (Enum)1396;
    static constexpr Enum VEHICLE_NAME = (Enum)1397;
    static constexpr Enum VEHICLE_TYPE = (Enum)1398;
    static constexpr Enum LADING_NUMBER = (Enum)1399;
    static constexpr Enum RR_NUMBER = (Enum)1400;
    static constexpr Enum AIRWAY_NUMBER = (Enum)1401;
    static constexpr Enum DISTANCE = (Enum)1402;
    static constexpr Enum PLACE_OF_CHANGE = (Enum)1403;
    static constexpr Enum REASON_FOR_CHANGE = (Enum)1404;
    static constexpr Enum STATE_OF_CHANGE = (Enum)1405;
    static constexpr Enum REMARKS = (Enum)1406;
    static constexpr Enum CONSIGNEE = (Enum)1407;
    static constexpr Enum ADDRESS_TYPE = (Enum)1408;
    static constexpr Enum PLACE = (Enum)1409;
    static constexpr Enum CONSIGNOR = (Enum)1410;
    static constexpr Enum DOC_NUMBER = (Enum)1411;
    static constexpr Enum TRACKING_NO = (Enum)1412;
    static constexpr Enum DESPATCH_DOC_NUMBER = (Enum)1413;
    static constexpr Enum DISPATCH_THROUGH = (Enum)1414;
    static constexpr Enum CARRIER_AGENT = (Enum)1415;
    static constexpr Enum BILL_OF_LADING = (Enum)1416;
    static constexpr Enum MOTOR_VEHICLE_NUMBER = (Enum)1417;
    static constexpr Enum INSPECTION_DOCUMENT_NUMBER = (Enum)1418;
    static constexpr Enum INSPECTION_DOCUMENT_DATE = (Enum)1419;
    static constexpr Enum TAX_UNIT = (Enum)1420;
    static constexpr Enum RULE_11_SERIAL_NO = (Enum)1421;
    static constexpr Enum SL_NUMBER_IN_PLA = (Enum)1422;
    static constexpr Enum SL_NUMBER_IN_RG_23 = (Enum)1423;
    static constexpr Enum DATE_AND_TIME_OF_INVOICE = (Enum)1424;
    static constexpr Enum DATE_AND_TIME_OF_REMOVAL = (Enum)1425;
    static constexpr Enum NATURAL_OF_REMOVAL = (Enum)1426;
    static constexpr Enum CERTIFICATE_TYPE = (Enum)1427;
    static constexpr Enum SEQUENCE_NUMBER = (Enum)1428;
    static constexpr Enum MARGINAL = (Enum)1429;
    static constexpr Enum BATCH = (Enum)1430;
    static constexpr Enum PRODUCT_SERIAL_NUMBER = (Enum)1431;
    static constexpr Enum LOT_NO = (Enum)1432;
    static constexpr Enum FREE_QUANTITY = (Enum)1433;
    static constexpr Enum DISCOUNT_PERCENTAGE = (Enum)1434;
    static constexpr Enum DISCOUNT_AMOUNT = (Enum)1435;
    static constexpr Enum ADDITIONAL_AMOUNT = (Enum)1436;
    static constexpr Enum SUPPLIER_INVOICE_NUMBER = (Enum)1437;
    static constexpr Enum SUPPLIER_INVOICE_DATE = (Enum)1438;
    static constexpr Enum GST_RATE = (Enum)1439;
    static constexpr Enum CESS_ADVOL_AMOUNT = (Enum)1440;
    static constexpr Enum STATE_CESS_AMOUNT = (Enum)1441;
    static constexpr Enum STATE_CESS_NON_ADVOL_RATE = (Enum)1442;
    static constexpr Enum STATE_CESS_NON_ADVOL_AMOUNT = (Enum)1443;
    static constexpr Enum E_SUGAM_DETAILS = (Enum)1444;
    static constexpr Enum INVOICE_NO = (Enum)1445;
    static constexpr Enum INVOICE_DATE = (Enum)1446;
    static constexpr Enum E_SUGAM_NUMBER = (Enum)1447;
    static constexpr Enum INVOICE_DELIVERY_DATE = (Enum)1448;
    static constexpr Enum FROM_PLACE = (Enum)1449;
    static constexpr Enum TO_PLACE = (Enum)1450;
    static constexpr Enum CATEGORY_OF_TRANSACTION = (Enum)1451;
    static constexpr Enum DESPATCH_THROUGH = (Enum)1452;
    static constexpr Enum QUANTITY_WITH_UNITS = (Enum)1453;
    static constexpr Enum TAX_CLASSIFICATION = (Enum)1454;
    static constexpr Enum REASON_FOR_ISSUING_NOTE = (Enum)1455;
    static constexpr Enum BUYER_DEBIT_NOTE_NO = (Enum)1456;
    static constexpr Enum BUYER_DEBIT_NOTE_DATE = (Enum)1457;
    static constexpr Enum LEDGER_NAME = (Enum)1458;
    static constexpr Enum ACCOUNT = (Enum)1458; //(Alias of: LEDGER_NAME)
    static constexpr Enum TYPE_OF_REFERENCE = (Enum)1459;
    static constexpr Enum DUE_DATE = (Enum)1460;
    static constexpr Enum CREDIT_DAYS = (Enum)1461;
    static constexpr Enum ACK_NUMBER = (Enum)1462;
    static constexpr Enum ACK_DATE = (Enum)1463;
    static constexpr Enum IRN = (Enum)1464;
    static constexpr Enum SIQNED_QR_CODE = (Enum)1465;
    static constexpr Enum FOR_STOCK_ITEM = (Enum)1466;
    static constexpr Enum FOR_ORDER_NUMBER = (Enum)1467;
    static constexpr Enum TRACK_COMPONENTS = (Enum)1468;
    static constexpr Enum STOCK_ITEM = (Enum)1469;
    static constexpr Enum PER = (Enum)1470;
    static constexpr Enum DUE_ON = (Enum)1471;
    static constexpr Enum BUYER_UIN = (Enum)1472;
    static constexpr Enum DENOMINATIONS_FOR = (Enum)1473;
    static constexpr Enum DENOMINATION = (Enum)1474;
    static constexpr Enum TOTAL_AMOUNT = (Enum)1475;
    static constexpr Enum DIFFERECE = (Enum)1476;
    static constexpr Enum POS_CARD_NUMBER = (Enum)1477;
    static constexpr Enum POS_CASH_RECEIVED = (Enum)1478;
    static constexpr Enum POS_CARD_LEDGER = (Enum)1479;
    static constexpr Enum POS_CASH_LEDGER = (Enum)1480;
    static constexpr Enum POS_GIFT_LEDGER = (Enum)1481;
    static constexpr Enum POS_CHEQUE_LEDGER = (Enum)1482;
    static constexpr Enum POS_CHECK_LEDGER = (Enum)1482; //(Alias of: POS_CHEQUE_LEDGER)
    static constexpr Enum POS_CHEQUE_NUMBER = (Enum)1483;
    static constexpr Enum POS_CHECK_NUMBER = (Enum)1483; //(Alias of: POS_CHEQUE_NUMBER)
    static constexpr Enum POS_CHEQUE_BANK_NAME = (Enum)1484;
    static constexpr Enum POS_CHECK_BANK_NAME = (Enum)1484; //(Alias of: POS_CHEQUE_BANK_NAME)
    static constexpr Enum TAX_CLASSIFICATION_NAME = (Enum)1485;
    static constexpr Enum RATE_OF_CESS_ON_VAT = (Enum)1486;
    static constexpr Enum RATE_OF_ADDL_VAT = (Enum)1487;
    static constexpr Enum VAT_TAX_RATE = (Enum)1488;
    static constexpr Enum VAT_CALCULATION_TYPE = (Enum)1489;
    static constexpr Enum ITEM_QTY = (Enum)1490;
    static constexpr Enum COMMODITY_NAME = (Enum)1491;
    static constexpr Enum WORKS_CONTRACT_COST_OF_LAND = (Enum)1492;
    static constexpr Enum WORKS_CONTRACT_TYPE = (Enum)1493;
    static constexpr Enum WORKS_CONTRACT_DED_LABOUR_CHARGES = (Enum)1494;
    static constexpr Enum WORKS_CONTRACT_DESCRIPTION = (Enum)1495;
    static constexpr Enum WORKS_CONTRACT_OTHER_DEDUCTION_AMT = (Enum)1496;
    static constexpr Enum WORKS_CONTRACT_VALUE_OF_TAX_FREE_GOODS = (Enum)1497;
    static constexpr Enum WORKS_CONTRACT_OTHER_CHARGES = (Enum)1498;
    static constexpr Enum WORKS_CONTRACT_SUB_CONTRACTOR_AMOUNT = (Enum)1499;
    static constexpr Enum COMMODITY_CODE = (Enum)1500;
    static constexpr Enum SCHEDULE = (Enum)1501;
    static constexpr Enum SCHEDULE_SERIAL_NUMBER = (Enum)1502;
    static constexpr Enum IS_ZR_BASIC_SERVICE = (Enum)1503;
    static constexpr Enum GST_TAX_RATE = (Enum)1504;
    static constexpr Enum IGST_LIABILITY = (Enum)1505;
    static constexpr Enum CGST_LIABILITY = (Enum)1506;
    static constexpr Enum SGST_LIABILITY = (Enum)1507;
    static constexpr Enum CESS_LIABILITY = (Enum)1508;
    static constexpr Enum OVERRRIDDEN_CLASSIFICATION = (Enum)1509;
    static constexpr Enum OVERRRIDDEN_NATURE = (Enum)1510;
    static constexpr Enum OVERRRIDDEN_ASSESSABLE_VALUE = (Enum)1511;
    static constexpr Enum ASSBL_VALUE = (Enum)1512;
    static constexpr Enum RATE_DETAILS = (Enum)1513;
    static constexpr Enum OVERRRIDDEN_INELIGIBLE_ITC = (Enum)1514;
    static constexpr Enum OVERRRIDDEN_IS_REV_CHARGE_APPL = (Enum)1515;
    static constexpr Enum OVERRRIDDEN_TAXABILITY = (Enum)1516;
    static constexpr Enum HSN_SAC_CODE = (Enum)1517;
    static constexpr Enum GST_DUTY_HEAD = (Enum)1518;
    static constexpr Enum BILL_CREDIT_PERIOD = (Enum)1519;
    static constexpr Enum INTEREST_COLLECTION = (Enum)1520;
    static constexpr Enum ACTUAL_QTY = (Enum)1521;
    static constexpr Enum BILLED_QTY = (Enum)1522;
    static constexpr Enum CATEGORY_NAME = (Enum)1523;
    static constexpr Enum TOTAL_ASSESSABLE_VALUE_OF_ALL_ITEMS = (Enum)1524;
    static constexpr Enum CGST_VALUE_OF_ALL_ITEMS = (Enum)1525;
    static constexpr Enum SGST_VALUE_OF_ALL_ITEMS = (Enum)1526;
    static constexpr Enum IGST_VALUE_OF_ALL_ITEMS = (Enum)1527;
    static constexpr Enum CESS_VALUE_OF_ALL_ITEMS = (Enum)1528;
    static constexpr Enum STATE_CESS_VALUE_OF_ALL_ITEMS = (Enum)1529;
    static constexpr Enum OTHER_CHARGES = (Enum)1530;
    static constexpr Enum ROUNDOFF_AMOUNT = (Enum)1531;
    static constexpr Enum FINAL_VOUCHER_VALUE = (Enum)1532;
    static constexpr Enum VOUCHER_VALUE_IN_FOREIGN_CURRENCY = (Enum)1533;
    static constexpr Enum COMPANY_NAME = (Enum)1534;
    static constexpr Enum FINANCIAL_YEAR_BEGINNING_FROM = (Enum)1535;
    static constexpr Enum BOOKS_BEGINNING_FROM = (Enum)1536;
    static constexpr Enum BASE_CURRENCY = (Enum)1537;
    static constexpr Enum REGULAR = (Enum)1538;
    static constexpr Enum COMPOSITE = (Enum)1539;
    static constexpr Enum PERIODICITY = (Enum)1540;
    static constexpr Enum TAX_RATE_FOR_TAXABLE_TURNOVER = (Enum)1541;
    static constexpr Enum BASIS_FOR_TAX_CALCULATION = (Enum)1542;
    static constexpr Enum INTEGRATED_TAX_RATE = (Enum)1543;
    static constexpr Enum CESS = (Enum)1544;
    static constexpr Enum TAXABILITY = (Enum)1545;
    static constexpr Enum LUT_BOND_NUMBER = (Enum)1546;
    static constexpr Enum LUT_BOND_APPLICABLE_FROM = (Enum)1547;
    static constexpr Enum LUT_BOND_APPLICABLE_TO = (Enum)1548;
    static constexpr Enum APPLICABILITY = (Enum)1549;
    static constexpr Enum AAPLICABLE_FROM = (Enum)1550;
    static constexpr Enum INCLUDE_INVOICE_VALUE = (Enum)1551;
    static constexpr Enum INCLUDE_TAXABLE_AND_EXEMPT_GOODS_VALUE = (Enum)1552;
    static constexpr Enum INCLUDE_GOODS_VALUE = (Enum)1553;
    static constexpr Enum APPLICABLE_FOR_INTRASTATE = (Enum)1554;
    static constexpr Enum BILL_FROM_PLACE = (Enum)1555;
    static constexpr Enum DEFAULT_PERIOD_FOR_THE_EINVOICE_REPORT = (Enum)1556;
    static constexpr Enum GST_REGISTRATION_NUMBER = (Enum)1557;
    static constexpr Enum COMPANY_REGISTRATION_NUMBER = (Enum)1558;
    static constexpr Enum IS_COMPANY_LTU = (Enum)1559;
    static constexpr Enum DEACTIVATE_FROM = (Enum)1560;
    static constexpr Enum PREFIX = (Enum)1561;
    static constexpr Enum SUFFIX = (Enum)1562;
    static constexpr Enum EXCISE_RATE = (Enum)1563;
    static constexpr Enum COMMISSIONERATE = (Enum)1564;
    static constexpr Enum CODE = (Enum)1565;
    static constexpr Enum INTERSTATE_SALES_TAX_NUMBER = (Enum)1566;
    static constexpr Enum TAX_RATE = (Enum)1567;
    static constexpr Enum LVO_VSO_CODE = (Enum)1568;
    static constexpr Enum AUTHORISED_PERSON = (Enum)1569;
    static constexpr Enum AUTHORIZED_PERSON = (Enum)1569; //(Alias of: AUTHORISED_PERSON)
    static constexpr Enum TRN = (Enum)1570;
    static constexpr Enum REGISTRATION_DATE = (Enum)1571;
    static constexpr Enum IGNORE_MISMATCH_UPTO = (Enum)1572;
    static constexpr Enum PRIMARY_MAILING_DETAILS = (Enum)1573;
    static constexpr Enum VAT_NUMBER = (Enum)1574;
    static constexpr Enum VAT_REGISTRATION_NUMBER = (Enum)1575;
    static constexpr Enum VAT_APPLICABLE_FROM = (Enum)1576;
    static constexpr Enum RDO_CODE = (Enum)1577;
    static constexpr Enum LINE_OF_BUSINESS = (Enum)1578;
    static constexpr Enum LOCAL_SALES_TAX_NUMBER = (Enum)1579;
    static constexpr Enum PAN_NUMBER = (Enum)1580;
    static constexpr Enum PIN = (Enum)1581;
    static constexpr Enum TYPES_OF_DEVICE = (Enum)1582;
    static constexpr Enum DEVICE_NUMBER = (Enum)1583;
    static constexpr Enum AUTHORISED_SIGNATORY = (Enum)1584;
    static constexpr Enum AUTHORIZED_SIGNATORY = (Enum)1584; //(Alias of: AUTHORISED_SIGNATORY)
    static constexpr Enum BUILDING = (Enum)1585;
    static constexpr Enum VAT_REGISTRATION_DATE = (Enum)1586;
    static constexpr Enum TAX_INVOICE_CODE = (Enum)1587;
    static constexpr Enum VAT_TIN_REGULAR = (Enum)1588;
    static constexpr Enum VAT_TIN_REGULAR_OLD = (Enum)1589;
    static constexpr Enum CURRENT_TAX_OFFICE = (Enum)1590;
    static constexpr Enum NAME_OF_GRA_OFFICE = (Enum)1591;
    static constexpr Enum ACTIVITY_CODE = (Enum)1592;
    static constexpr Enum AREA_CODE = (Enum)1593;
    static constexpr Enum EMIRATE = (Enum)1594;
    static constexpr Enum MAILING_ADDRESS = (Enum)1595;
    static constexpr Enum VATIN = (Enum)1596;
    static constexpr Enum COMPANY_CODE = (Enum)1597;
    static constexpr Enum COMPANY_ACCOUNT_GROUP_CODE = (Enum)1598;
    static constexpr Enum COMPANY_SECURITY_CODE = (Enum)1599;
    static constexpr Enum ESI_BRANCH_OFFICE = (Enum)1600;
    static constexpr Enum STANDARD_WORKING_DAYS_PER_MONTH = (Enum)1601;
    static constexpr Enum CORPORATE_REGISTRATION_NUMBER = (Enum)1602;
    static constexpr Enum CORPORATE_BRANCH_OFFICE_NUMBER = (Enum)1603;
    static constexpr Enum INCOME_TAX_CIRCLE_OR_WARD = (Enum)1604;
    static constexpr Enum IGNORE_IT_EXEMPTION_LIMIT_FOR_TDS_DEDUCTION = (Enum)1605;
    static constexpr Enum ACTIVATE_TDS_FOR_STOCK_ITEMS = (Enum)1606;
    static constexpr Enum TAX_DEDUCTION_AND_COLLECTION_ACCOUNT_NUMBER = (Enum)1046; //(Alias of: TAN)
    static constexpr Enum COLLECTOR_TYPE = (Enum)1607;
    static constexpr Enum COLLECTOR_BRANCH = (Enum)1608;
    static constexpr Enum COLLECTOR_DIVISION = (Enum)1609;
    static constexpr Enum E_MAIL = (Enum)1610;
    static constexpr Enum RESIDENTIAL_STATUS = (Enum)1611;
    static constexpr Enum COLLECTEE_STATUS = (Enum)1612;
    static constexpr Enum APPLICABLE_DATE = (Enum)1613;
    static constexpr Enum SURCHARGE_RATE = (Enum)1614;
    static constexpr Enum MOBILE_NUMBER = (Enum)1615;
    static constexpr Enum EMAIL_ID = (Enum)1616;
    static constexpr Enum DEDUCTEE_STATUS = (Enum)1617;
    static constexpr Enum PERMANENT_ACCOUNT_NUMBER = (Enum)1618;
    static constexpr Enum FINANCIAL_YEAR = (Enum)1619;
    static constexpr Enum QUARTER_ENDED = (Enum)1620;
    static constexpr Enum TOKEN_NUMBER = (Enum)1621;
    static constexpr Enum TYPE_OF_DEDUCTOR = (Enum)1622;
    static constexpr Enum NAME_OF_EMPLOYER = (Enum)1623;
    static constexpr Enum GOVERNMENT_NAME = (Enum)1624;
    static constexpr Enum AIN_CODE = (Enum)1625;
    static constexpr Enum GSTN = (Enum)1626;
    static constexpr Enum PAN_OF_PERSON_RESPONSIBLE = (Enum)1627;
    static constexpr Enum TAX = (Enum)1628;
    static constexpr Enum EDUCATION_CESS = (Enum)1629;
    static constexpr Enum FEE = (Enum)1630;
    static constexpr Enum PENALTY = (Enum)1631;
    static constexpr Enum TOTAL_AMOUNT_DEPOSITED = (Enum)1632;
    static constexpr Enum BSR_RECIEPT_NUMBER = (Enum)1633;
    static constexpr Enum CHALLAN_SERIAL_NUMBER = (Enum)1634;
    static constexpr Enum DATE_OF_CHALLAN_DEPOSITED = (Enum)1635;
    static constexpr Enum DATE_OF_TRANSFER_VOUCHER = (Enum)1636;
    static constexpr Enum MINOR_HEAD_OF_CHALLAN = (Enum)1637;
    static constexpr Enum AMOUNT_AS_PER_CHALLAN = (Enum)1638;
    static constexpr Enum TOTAL_TDS_ALLOCATED = (Enum)1639;
    static constexpr Enum TOTAL_INTEREST_ALLOCATED = (Enum)1640;
    static constexpr Enum EMPLOYEE_REFERENCE_NUMBER = (Enum)1641;
    static constexpr Enum PAN_OF_EMPLOYEE = (Enum)1642;
    static constexpr Enum NAME_OF_EMPLOYEE = (Enum)1643;
    static constexpr Enum SECTION_CODE = (Enum)1644;
    static constexpr Enum DATE_OF_PAYMENT = (Enum)1645;
    static constexpr Enum DATE_OF_DEDUCTION = (Enum)1646;
    static constexpr Enum AMOUNT_PAID = (Enum)1647;
    static constexpr Enum TOTAL_TDS = (Enum)1648;
    static constexpr Enum TOTAL_TDS_DEPOSITED = (Enum)1649;
    static constexpr Enum DATE_OF_DEPOSIT = (Enum)1650;
    static constexpr Enum REASON_FOR_DIFFERENCE_IN_DEPOSIT = (Enum)1651;
    static constexpr Enum NUMBER_OF_CERTIFICATE_ISSUED = (Enum)1652;
    static constexpr Enum RESIDENT_INDIVIDUAL_AGE_60_TO_80 = (Enum)1653;
    static constexpr Enum RESIDENT_INDIVIDUAL_AGE_80_OR_MORE = (Enum)1654;
    static constexpr Enum WOMEN_AGE_LESS_THAN_60 = (Enum)1655;
    static constexpr Enum OTHER_INDIVIDUALS = (Enum)1656;
    static constexpr Enum EMPLOYEMENT_DATE = (Enum)1657;
    static constexpr Enum TAXABLE_AMOUNT_ON_WHICH_PREVIOUS_EMPLOYER_DEDUCTED_TAX = (Enum)1658;
    static constexpr Enum TAXABLE_AMOUNT_ON_WHICH_CURRENT_EMPLOYER_DEDUCTED_TAX = (Enum)1659;
    static constexpr Enum TOTAL_SALARY = (Enum)1660;
    static constexpr Enum TOTAL_DEDUCTION_UNDER_SEC_16_SUBSEC_II = (Enum)1661;
    static constexpr Enum TOTAL_DEDUCTION_UNDER_SEC_16_SUBSEC_III = (Enum)1662;
    static constexpr Enum INCOME_CHARGEABLE_UNDER_SALARIES = (Enum)1663;
    static constexpr Enum INCOME_UNDER_OTHER_THAN_SALARY_OFFERED_TDS = (Enum)1664;
    static constexpr Enum GROSS_TOTAL_INCOME = (Enum)1665;
    static constexpr Enum AGRR_DEDUCTION_UNDER_80C_80CCD_80CCD1 = (Enum)1666;
    static constexpr Enum AMOUNT_DEDUCTIBLE_CHAPTER_VI = (Enum)1667;
    static constexpr Enum TOTAL_TAXABLE_INCOME = (Enum)1668;
    static constexpr Enum INCOME_TAX_ON_TOTAL_INCOME = (Enum)1669;
    static constexpr Enum INCOME_TAX_RELIEF_UNDER_SEC_89 = (Enum)1670;
    static constexpr Enum NET_TAX_PAYABLE = (Enum)1671;
    static constexpr Enum TOTAL_TDS_BY_CURRENT_EMPLOYER_FOR_WHOLE_YEAR = (Enum)1672;
    static constexpr Enum TOTAL_TDS_BY_PREVIOUS_EMPLOYER_FOR_WHOLE_YEAR = (Enum)1673;
    static constexpr Enum SHORTFALL_OR_EXCESS_IN_TAX_DEDUCTION = (Enum)1674;
    static constexpr Enum TAX_DEUCTED_AT_HIGHER_RATE_NON_FURNISHING_PAN = (Enum)1675;
    static constexpr Enum HOUSE_RENT_ALLOWANCE = (Enum)1676;
    static constexpr Enum PAN_OF_LANLORD1 = (Enum)1677;
    static constexpr Enum NAME_OF_LANDLORD1 = (Enum)1678;
    static constexpr Enum PAN_OF_LANLORD2 = (Enum)1679;
    static constexpr Enum NAME_OF_LANDLORD2 = (Enum)1680;
    static constexpr Enum INTEREST_PAID_FROM_INCOME_FROM_HOUSE = (Enum)1681;
    static constexpr Enum PAN_OF_LENDER1 = (Enum)1682;
    static constexpr Enum NAME_OF_LENDER1 = (Enum)1683;
    static constexpr Enum PAN_OF_LENDER2 = (Enum)1684;
    static constexpr Enum NAME_OF_LENDER2 = (Enum)1685;
    static constexpr Enum CONTRIBUTIONS_PAID_BY_THE_TRUSTEES_OF_AN_APPROVED_SUPERANNUATION_FUND = (Enum)1686;
    static constexpr Enum NAME_OF_SUPERANNUATION_FUND = (Enum)1687;
    static constexpr Enum FROM_DATE_OF_CONTRIBUTION = (Enum)1688;
    static constexpr Enum TO_DATE_OF_CONTRIBUTION = (Enum)1689;
    static constexpr Enum AMOUNT_OF_CONTRIBUTION_REPAID_ON_ACCOUNT_OF_PRINCIPAL_AND_INTEREST = (Enum)1690;
    static constexpr Enum AVERAGE_RATE_OF_DEDUCTION_OF_TAX_DURING_THE_PRECEDING_THREE_YEARS = (Enum)1691;
    static constexpr Enum AMOUNT_OF_TAX_DEDUCTED_ON_REPAYMENT = (Enum)1692;
    static constexpr Enum NAME_OF_DEDUCTOR = (Enum)1693;
    static constexpr Enum MODE_OF_DEPOSIT = (Enum)1694;
    static constexpr Enum TOTAL_TAX_ALLOCATED = (Enum)1695;
    static constexpr Enum DEDUCTEE_REFERENCE_NUMBER = (Enum)1696;
    static constexpr Enum DEDUCTEE_CODE = (Enum)1697;
    static constexpr Enum PAN_OF_DEDUCTEE = (Enum)1698;
    static constexpr Enum NAME_OF_DEDUCTEE = (Enum)1699;
    static constexpr Enum TOTAL_TAX_DEDUCTED = (Enum)1700;
    static constexpr Enum TOTAL_TAX_DEPOSITED = (Enum)1701;
    static constexpr Enum DATE_OF_DEDECTED = (Enum)1702;
    static constexpr Enum REASON_FOR_DIFFERENCE_IN_DEDUCTION = (Enum)1703;
    static constexpr Enum NAME_OF_DEDUCTER = (Enum)1704;
    static constexpr Enum SURCHARGE = (Enum)1705;
    static constexpr Enum INTEREST = (Enum)1706;
    static constexpr Enum RATE_AT_WHICH_DEDUCTED = (Enum)1707;
    static constexpr Enum UNIQUE_ACKNOWLEDGEMENT_15CA = (Enum)1708;
    static constexpr Enum REMMITANCE_MADE_TO_COUNTRY = (Enum)1709;
    static constexpr Enum E_MAIL_OF_DEDUCTEE = (Enum)1710;
    static constexpr Enum CONTACT_NUMBER_OF_DEDUCTEE = (Enum)1711;
    static constexpr Enum ADDRESS_OF_DEDUCTEE = (Enum)1712;
    static constexpr Enum TIN_OF_DEDUCTEE = (Enum)1713;
    static constexpr Enum UNIQUE_IDENTIFICATION_NUMBER_OF_DEDUCTEE = (Enum)1714;
    static constexpr Enum TYPE_OF_COLLECTOR = (Enum)1715;
    static constexpr Enum NAME_OF_COLLECTOR = (Enum)1716;
    static constexpr Enum TOTAL_TCS_ALLOCATED = (Enum)1717;
    static constexpr Enum PARTY_REFERENCE_NUMBER = (Enum)1718;
    static constexpr Enum PARTY_CODE = (Enum)1719;
    static constexpr Enum PAN_OF_PARTY = (Enum)1720;
    static constexpr Enum NAME_OF_PARTY = (Enum)1721;
    static constexpr Enum COLLECTION_CODE = (Enum)1722;
    static constexpr Enum TOTAL_TAX_COLLECTED = (Enum)1723;
    static constexpr Enum RATE_AT_WHICH_COLLECTED = (Enum)1724;
    static constexpr Enum DATE_OF_COLLECTED = (Enum)1725;
    static constexpr Enum REASON_FOR_DIFFERENCE_IN_COLLECTION = (Enum)1726;
    static constexpr Enum DEDUCTEE_NON_RESIDENT = (Enum)1727;
    static constexpr Enum DEDUCTEE_WITH_PERMANENT_ESTABLISHEMENT_IN_INDIA = (Enum)1728;
    static constexpr Enum ASSESSMENT_YEAR = (Enum)1729;
    static constexpr Enum PREVIOUS_RECEIPT_NUMBER = (Enum)1730;
    static constexpr Enum TOTAL_ANNEXURES_ENCLOSED = (Enum)1731;
    static constexpr Enum OTHER_INFORMATION = (Enum)1732;
    static constexpr Enum NO_OF_RECORDS = (Enum)1733;
    static constexpr Enum TAX_COLLECTED = (Enum)1734;
    static constexpr Enum TAX_DEDUCTED = (Enum)1735;
    static constexpr Enum TAX_DEPOSITED = (Enum)1736;
    static constexpr Enum FACEVALUE = (Enum)1737;
    static constexpr Enum INVESTMENT_NAME = (Enum)1738;
    static constexpr Enum NATURE = (Enum)1739;
    static constexpr Enum NUMBER_OF_UNITS = (Enum)1740;
    static constexpr Enum PURCHASE_VALUE = (Enum)1741;
    static constexpr Enum SELLING_VALUE = (Enum)1742;
    static constexpr Enum UNITS_SOLD = (Enum)1743;
    static constexpr Enum AUDITOR_INFORMATION_ID = (Enum)1744;
    static constexpr Enum AUDITOR_INFORMATION = (Enum)1745;
    static constexpr Enum AUDITOR_INFORMATION_OPINION = (Enum)1746;
    static constexpr Enum BORROWER_ID = (Enum)1747;
    static constexpr Enum BORROWER_NOTE = (Enum)1748;
    static constexpr Enum BORROWER_DETAIL_ID = (Enum)1749;
    static constexpr Enum BORROWER_DETAILED_NOTE = (Enum)1750;
    static constexpr Enum BORROWER_DETAILED_ADDITIONAL_NOTE = (Enum)1751;
    static constexpr Enum BORROWER_DETAILED_NOTE_DATE = (Enum)1752;
    static constexpr Enum BORROWER_SECURED_VALUE = (Enum)1753;
    static constexpr Enum BORROWER_UNSECURED_VALUE = (Enum)1754;
    static constexpr Enum BORROWER_ST_SECURED_VALUE = (Enum)1755;
    static constexpr Enum BORROWER_ST_UNSECURED_VALUE = (Enum)1756;
    static constexpr Enum COMPONENT_NAME = (Enum)1757;
    static constexpr Enum IMPORTED_PERCENTAGE = (Enum)1758;
    static constexpr Enum IMPORTED_VALUE = (Enum)1759;
    static constexpr Enum INDIGENOUS_PERCENTAGE = (Enum)1760;
    static constexpr Enum INDIGENOUS_VALUE = (Enum)1761;
    static constexpr Enum DOMESTIC_VALUE = (Enum)1762;
    static constexpr Enum DOMESTIC_NOTE = (Enum)1763;
    static constexpr Enum FOREIGN_VALUE = (Enum)1764;
    static constexpr Enum FOREIGN_NOTE = (Enum)1765;
    static constexpr Enum MULTIPLE_EMPLOYEE_VALUE = (Enum)1766;
    static constexpr Enum MULTIPLE_EMPLOYEE_NOTE = (Enum)1767;
    static constexpr Enum NOTE = (Enum)1768;
    static constexpr Enum NUMBER = (Enum)1769;
    static constexpr Enum LA_CASH_GENERATING_UNIT = (Enum)1770;
    static constexpr Enum LA_CASH_GENERATING_UNIT_NOTE = (Enum)1771;
    static constexpr Enum LA_CASH_GENERATING_UNIT_VALUE = (Enum)1772;
    static constexpr Enum LA_INDIVIDUAL_VALUE = (Enum)1773;
    static constexpr Enum TA_CASH_GENERATING_UNIT = (Enum)1774;
    static constexpr Enum TA_CASH_GENERATING_UNIT_NOTE = (Enum)1775;
    static constexpr Enum TA_CASH_GENERATING_UNIT_VALUE = (Enum)1776;
    static constexpr Enum TA_INDIVIDUAL_VALUE = (Enum)1777;
    static constexpr Enum CLASSNAME = (Enum)1778;
    static constexpr Enum IMPAIRMENT_LOSS_VALUE = (Enum)1779;
    static constexpr Enum IMPAIRMENT_LOSS_REVERSAL_VALUE = (Enum)1780;
    static constexpr Enum LINE_ITEM_NOTE = (Enum)1781;
    static constexpr Enum REVERSAL_IMPAIRMENT_LOSS_VALUE = (Enum)1782;
    static constexpr Enum REVERSAL_IMPAIRMENT_LOSS_REVERSAL_VALUE = (Enum)1783;
    static constexpr Enum REVERSAL_LINE_ITEM_NOTE = (Enum)1784;
    static constexpr Enum CERTIFICATION_NUMBER = (Enum)1785;
    static constexpr Enum CERTIFICATE_INVENTORY_NUMBER = (Enum)1786;
    static constexpr Enum GOODS_IN_TRANSIT_VALUE = (Enum)1787;
    static constexpr Enum INVENTORY_VALUE = (Enum)1788;
    static constexpr Enum LOAN_ADVANCE_ID = (Enum)1789;
    static constexpr Enum LOAN_ADVANCE_NOTE = (Enum)1790;
    static constexpr Enum LOAN_ADVANCE_LT_DOUBTFUL_VALUE = (Enum)1791;
    static constexpr Enum LOAN_ADVANCE_LT_SECURED_VALUE = (Enum)1792;
    static constexpr Enum LOAN_ADVANCE_LT_UNSECURED_VALUE = (Enum)1793;
    static constexpr Enum LOAN_ADVANCE_ST_DOUBTFUL_VALUE = (Enum)1794;
    static constexpr Enum LOAN_ADVANCE_ST_SECURED_VALUE = (Enum)1795;
    static constexpr Enum LOAN_ADVANCE_ST_UNSECURED_VALUE = (Enum)1796;
    static constexpr Enum LEGAL_PROC_VALUE = (Enum)1797;
    static constexpr Enum MISC_VALUE = (Enum)1798;
    static constexpr Enum ONEROUS_VALUE = (Enum)1799;
    static constexpr Enum REFUND_VALUE = (Enum)1800;
    static constexpr Enum RESTORATION_VALUE = (Enum)1801;
    static constexpr Enum RESTRUCTURING_VALUE = (Enum)1802;
    static constexpr Enum WARRANTY_VALUE = (Enum)1803;
    static constexpr Enum DEPLETION_VALUE = (Enum)1804;
    static constexpr Enum OTHER_ADJUSTMENT_VALUE = (Enum)1805;
    static constexpr Enum PRE_PROD_PL_VALUE = (Enum)1806;
    static constexpr Enum PROD_PROP_VALUE = (Enum)1807;
    static constexpr Enum TOTAL_CHANGES_VALUE = (Enum)1808;
    static constexpr Enum TRANSFERRED_VALUE = (Enum)1809;
    static constexpr Enum DESCRIPTION_OF_CATEGORY = (Enum)1810;
    static constexpr Enum HIGHEST_TURNOVER = (Enum)1811;
    static constexpr Enum ITC = (Enum)1812;
    static constexpr Enum TURNOVER = (Enum)1813;
    static constexpr Enum UNIT_OF_MEASURE = (Enum)1814;
    static constexpr Enum UOM = (Enum)1814; //(Alias of: UNIT_OF_MEASURE)
    static constexpr Enum CONSUMED_AMOUNT = (Enum)1815;
    static constexpr Enum SALES_AMOUNT = (Enum)1816;
    static constexpr Enum STOCK_ITEM_NAME = (Enum)1817;
    static constexpr Enum INTER_SEGMENT = (Enum)1818;
    static constexpr Enum SEGMENT_ID = (Enum)1819;
    static constexpr Enum SEGMENT_NATURE = (Enum)1820;
    static constexpr Enum UNALLOCATED_SEGMENT = (Enum)1821;
    static constexpr Enum SHAREHOLDER_NAME = (Enum)1822;
    static constexpr Enum CIN = (Enum)1823;
    static constexpr Enum CLASS = (Enum)1824;
    static constexpr Enum PERCENTAGE = (Enum)1825;
    static constexpr Enum DISCLOSURE = (Enum)1826;
    static constexpr Enum NATURE_OF_BUSSINESS = (Enum)1827;
    static constexpr Enum METHOD_OF_ACC = (Enum)1828;
    static constexpr Enum STATUTE_SCHEMA = (Enum)1829;
    static constexpr Enum RESERVES_ACC_TREAT = (Enum)1830;
    static constexpr Enum RESERVES_ACC_TREAT_DEVIATION = (Enum)1831;
    static constexpr Enum RESERVES_ACC_TREAT_REASON = (Enum)1832;
    static constexpr Enum SHARES_DESCRIPTION = (Enum)1833;
    static constexpr Enum NO_OF_SHARES = (Enum)1834;
    static constexpr Enum PERCCMP_EQUITY_SHARES = (Enum)1835;
    static constexpr Enum CONSIDERATION_PAID = (Enum)1836;
    static constexpr Enum NOTE_HTML = (Enum)1837;
    static constexpr Enum ADDITIONAL_NOTE = (Enum)1838;
    static constexpr Enum ADDITIONAL_DATE = (Enum)1839;
    static constexpr Enum ADDITIONAL_NUMBER = (Enum)1840;
    static constexpr Enum AUDIT_FIRM_NAME = (Enum)1841;
    static constexpr Enum AUDITOR_NAME = (Enum)1842;
    static constexpr Enum MEMBERSHIP_NUMBER = (Enum)1843;
    static constexpr Enum SRN_NUMBER = (Enum)1844;
    static constexpr Enum AUDIT_REPORT_SIGN_DATE = (Enum)1845;
    static constexpr Enum BS_SIGN_DATE = (Enum)1846;
    static constexpr Enum BOOK_VALUE = (Enum)1847;
    static constexpr Enum DEBENTURE_NUMBER = (Enum)1848;
    static constexpr Enum DEBENTURE_RATE = (Enum)1849;
    static constexpr Enum DEBENTURE_VALUE = (Enum)1850;
    static constexpr Enum EARLIEST_DATE_OF_RED = (Enum)1851;
    static constexpr Enum NOMINAL_AMOUNT = (Enum)1852;
    static constexpr Enum NOMINAL_VALUE = (Enum)1853;
    static constexpr Enum TERMS_OF_RED_CONV = (Enum)1854;
    static constexpr Enum CLASS_OF_GOODS = (Enum)1855;
    static constexpr Enum PHYSICAL_QUANTITY_OF_STOCK_GOODS = (Enum)1856;
    static constexpr Enum PHYSICAL_VALUE_OF_STOCK_GOODS = (Enum)1857;
    static constexpr Enum QUANTITY_OF_GOODS_PURCHASED = (Enum)1858;
    static constexpr Enum QUANTITY_OF_GOODS_SOLD = (Enum)1859;
    static constexpr Enum QUANTITY_OF_STOCK_GOODS = (Enum)1860;
    static constexpr Enum Unit_of_Measure = (Enum)1814; //(Alias of: UOM)
    static constexpr Enum VALUE_OF_GOODS_PURCHASED = (Enum)1861;
    static constexpr Enum VALUE_OF_GOODS_SOLD = (Enum)1862;
    static constexpr Enum VALUE_OF_STOCK_GOODS = (Enum)1863;
    static constexpr Enum DISCLOSURE_HTML = (Enum)1864;
    static constexpr Enum ID_NUMBER = (Enum)1865;
    static constexpr Enum DOB = (Enum)1008; //(Alias of: DATE_OF_BIRTH)
    static constexpr Enum QUALIFICATION = (Enum)1866;
    static constexpr Enum SHARES_HELD = (Enum)1867;
    static constexpr Enum BASIC_PAY = (Enum)1868;
    static constexpr Enum ALLOWANCES = (Enum)1869;
    static constexpr Enum PERQUISITES = (Enum)1870;
    static constexpr Enum COMMISSION = (Enum)1871;
    static constexpr Enum SITTING_FEES = (Enum)1872;
    static constexpr Enum STOCK_COMPENSATION = (Enum)1873;
    static constexpr Enum POST_RETIREMENT_BENEFITS = (Enum)1874;
    static constexpr Enum OTHER_COMPENSATION = (Enum)1875;
    static constexpr Enum REMUNERATION = (Enum)1876;
    static constexpr Enum COUNTRY_NAME = (Enum)1877;
    static constexpr Enum MAXIMUM_BALANCE_AMOUNT = (Enum)1878;
    static constexpr Enum INVESTMENTS_IN_ASSOCIATES = (Enum)1879;
    static constexpr Enum PROPORTION_OF_OWNERSHIP = (Enum)1880;
    static constexpr Enum PROPORTION_OF_VOTING_POWER = (Enum)1881;
    static constexpr Enum ASSOCIATE_DESCRIPTION = (Enum)1882;
    static constexpr Enum ASSOCIATE_NAME_DIFF_REP_DATE = (Enum)1883;
    static constexpr Enum ASSOCIATE_CIN_DIFF_REP_DATE = (Enum)1884;
    static constexpr Enum REP_DATE_DIFFERENCE = (Enum)1885;
    static constexpr Enum NON_ADOP_OF_UNI_ACC_POL = (Enum)1886;
    static constexpr Enum DIFF_IN_ACC_POLICY_FOLL = (Enum)1887;
    static constexpr Enum SHARE_OF_COMM = (Enum)1888;
    static constexpr Enum SHARE_OF_CL = (Enum)1889;
    static constexpr Enum CONTINGENT_LIABILITIES = (Enum)1890;
    static constexpr Enum REASON_FOR_NOT_ACC_INVEST = (Enum)1891;
    static constexpr Enum PERCENTAGE_OF_OWNERSHIP_INTEREST = (Enum)1892;
    static constexpr Enum CIN_OF_JV_DIFF_REP_DATE = (Enum)1893;
    static constexpr Enum UNI_ACC_POLICY_NOT_FOLLOW = (Enum)1894;
    static constexpr Enum DIFF_ACC_POLICY_FOLL_ITEMS = (Enum)1895;
    static constexpr Enum CONTINGENT_LIABILITY_JV = (Enum)1896;
    static constexpr Enum SHARE_CONTINGENT_LIABILITY_OTH_VEN = (Enum)1897;
    static constexpr Enum SHARE_CONTILIAB_JV = (Enum)1898;
    static constexpr Enum CONTINGENT_LIABILITY_OTH_VENTUE = (Enum)1899;
    static constexpr Enum CAPITAL_COMMON_JV = (Enum)1900;
    static constexpr Enum SHARE_CAPITAL_COMMON_JV = (Enum)1901;
    static constexpr Enum OUTSTANDING_AMOUNT = (Enum)1902;
    static constexpr Enum MAX_OUTSTANDING_AMOUNT = (Enum)1903;
    static constexpr Enum OTHER_DISCLOSURES = (Enum)1904;
    static constexpr Enum DETAILS_OF_INVENTROTY = (Enum)1905;
    static constexpr Enum INVENTORY_MARKET_VALUE = (Enum)1906;
    static constexpr Enum RIGHT_OF_OWNERSHIP_NOTE = (Enum)1907;
    static constexpr Enum REALISABILITY_OF_INVENTORY_NOTE = (Enum)1908;
    static constexpr Enum INCOME_FROM_INVENTORY_NOTE = (Enum)1909;
    static constexpr Enum MORTGAGES_OF_LOAN_NOTE = (Enum)1910;
    static constexpr Enum MORTGAGES_OF_SECURED_LOANS_NOTE = (Enum)1911;
    static constexpr Enum MORTGAGES_OF_UNSECURED_LOAN_NOTE = (Enum)1912;
    static constexpr Enum OTHER_DISCLOSURES_HTML = (Enum)1913;
    static constexpr Enum INVESTMENT_TYPE = (Enum)1914;
    static constexpr Enum PURCHASE_QUANTITY = (Enum)1915;
    static constexpr Enum PURCHCHASE_FACE_VALUE = (Enum)1916;
    static constexpr Enum PURCHASE_RATE = (Enum)1917;
    static constexpr Enum SOLD_QUANTITY = (Enum)1918;
    static constexpr Enum SELLLING_PRICE = (Enum)1919;
    static constexpr Enum INVESTMENT_NATURE = (Enum)1920;
    static constexpr Enum EXT_CUST_REVENUE = (Enum)1921;
    static constexpr Enum OTH_OP_SEGMENT_REV = (Enum)1922;
    static constexpr Enum SEGMENT_REVENUE = (Enum)1923;
    static constexpr Enum SEGMENTINT_INCOME = (Enum)1924;
    static constexpr Enum OM_ITEM_INCOME = (Enum)1925;
    static constexpr Enum OM_NON_CASH_ITEM_INCOME = (Enum)1926;
    static constexpr Enum INTEREST_EXPENSE = (Enum)1927;
    static constexpr Enum DEP_AMOUNT = (Enum)1928;
    static constexpr Enum PL_EX_ORD_ITEMS_ATTR_SEGMENT = (Enum)1929;
    static constexpr Enum EX_ORD_ITEMS_ATTR_SEGMENT = (Enum)1930;
    static constexpr Enum PROV_FOR_TAX_ATTR_SEGMENT = (Enum)1931;
    static constexpr Enum PL_ATTR_SEGMENT = (Enum)1932;
    static constexpr Enum ASSETS_ITEMS_ATTR_SEGMENT = (Enum)1933;
    static constexpr Enum NON_CURR_ASSETS_ATTR_SEGMENT = (Enum)1934;
    static constexpr Enum LIABILITIES_ATTR_SEGMENT = (Enum)1935;
    static constexpr Enum UNIT_OF_MEASUREMENT = (Enum)1936;
    static constexpr Enum NATURE_OF_ISSUING_AUTH = (Enum)1937;
    static constexpr Enum NATURE_DESCRIPTION = (Enum)1938;
    static constexpr Enum OUTSTANDING_BALANCE = (Enum)1939;
    static constexpr Enum OUTSTANDING_BALANCE_TR_EXPL = (Enum)1940;
    static constexpr Enum GIVEN_RECE_OUTSTANDING_BALANCE = (Enum)1941;
    static constexpr Enum PROV_DOUBTFUL_DEBT_OUTSTANDING_BALANCE = (Enum)1942;
    static constexpr Enum EXP_BAD_DOUBTFUL_DEBT = (Enum)1943;
    static constexpr Enum TRANSACTION_DESCRIPTION = (Enum)1944;
    static constexpr Enum TRANSACTION_AMOUNT = (Enum)1945;
    static constexpr Enum REVENUE = (Enum)1946;
    static constexpr Enum ASSETS = (Enum)1947;
    static constexpr Enum ADD_AMOUNT = (Enum)1948;
    static constexpr Enum TYPE_CURRENT_YEAR = (Enum)1949;
    static constexpr Enum NATURE_CURRENT_YEAR = (Enum)1950;
    static constexpr Enum NOM_VALUE_AUTH_SHARE_CURRENT_YEAR = (Enum)1951;
    static constexpr Enum NUMBER_OF_AUTH_SHARE_CURRENT_YEAR = (Enum)1952;
    static constexpr Enum VALUE_OF_AUTH_SHARE_CURRENT_YEAR = (Enum)1953;
    static constexpr Enum NOM_VALUE_SUBS_SHARE_CURRENT_YEAR = (Enum)1954;
    static constexpr Enum NUMBER_OF_SUB_SHARE_CURRENT_YEAR = (Enum)1955;
    static constexpr Enum VALUE_OF_SUB_SHARE_CURRENT_YEAR = (Enum)1956;
    static constexpr Enum NOM_VALUE_PAID_UP_SHARE_CURRENT_YEAR = (Enum)1957;
    static constexpr Enum NUMBER_OF_PAID_UP_SHARE_CURRENT_YEAR = (Enum)1958;
    static constexpr Enum VALUE_OF_PAID_UP_SHARE_CURRENT_YEAR = (Enum)1959;
    static constexpr Enum NOM_VALUE_ISSUED_SHARE_CURRENT_YEAR = (Enum)1960;
    static constexpr Enum NUMBER_OF_ISSUED_SHARE_CURRENT_YEAR = (Enum)1961;
    static constexpr Enum VALUE_OF_ISSUED_SHARE_CURRENT_YEAR = (Enum)1962;
    static constexpr Enum NOM_VALUE_ISSUED_DURING_PERIOD = (Enum)1963;
    static constexpr Enum NUMBER_OF_SHARES_ISSUED_PUB_OFF = (Enum)1964;
    static constexpr Enum AMOUNT_PUBLIC_ISSUED_DURING_PERIOD = (Enum)1965;
    static constexpr Enum NUMBER_OF_BONUS_SHARES_ISSUED = (Enum)1966;
    static constexpr Enum AMOUNT_OF_BONUS_ISSUED_DURING_PERIOD = (Enum)1967;
    static constexpr Enum NUMBER_OF_RIGHT_SHARES_ISSUED = (Enum)1968;
    static constexpr Enum AMOUNT_OF_RIGHT_ISSUED_DURING_PERIOD = (Enum)1969;
    static constexpr Enum NUMBER_OF_SHARES_ISSUED_PVT_PMNT = (Enum)1970;
    static constexpr Enum AMOUNT_PRV_PLACE_DURING_PERIOD = (Enum)1971;
    static constexpr Enum NUMBER_OF_SHARES_PREF_ALLOT = (Enum)1972;
    static constexpr Enum AMOUNT_PREF_ALLOT_DURING_PERIOD = (Enum)1973;
    static constexpr Enum NUMBER_OF_SHARES_WITHOUT_PYMT = (Enum)1974;
    static constexpr Enum AMOUNT_WITHOUT_PYMT_DURING_PERIOD = (Enum)1975;
    static constexpr Enum NUMBER_OF_SHARES_ISSUED_AMG_SCH = (Enum)1976;
    static constexpr Enum AMOUNT_OF_ISSUE_AMG_SCH = (Enum)1977;
    static constexpr Enum NUMBER_OF_GLOBAL_DEPO_SHARES = (Enum)1978;
    static constexpr Enum AMOUNT_GLOBAL_DEP_DURING_PERIOD = (Enum)1979;
    static constexpr Enum NUMBER_OF_AMERICAN_DEP_SHARES = (Enum)1980;
    static constexpr Enum AMOUNT_AMERICAN_DEP_DURING_PERIOD = (Enum)1981;
    static constexpr Enum NUMBER_OF_OTHER_SHARES = (Enum)1982;
    static constexpr Enum AMOUNT_OTH_SHARES_DURING_PERIOD = (Enum)1983;
    static constexpr Enum NUMBER_OF_SHARES_CONV_SEC = (Enum)1984;
    static constexpr Enum AMOUNT_SHARES_CONV_SEC_DURING_PERIOD = (Enum)1985;
    static constexpr Enum NUMBER_OF_SHARES_ISSUED_DURING_PERIOD = (Enum)1986;
    static constexpr Enum AGGR_AMOUNT_DURING_PERIOD = (Enum)1987;
    static constexpr Enum FIRST_NAME = (Enum)1988;
    static constexpr Enum MIDDLE_NAME = (Enum)1989;
    static constexpr Enum LAST_NAME = (Enum)1990;
    static constexpr Enum SIGN_DATE = (Enum)1991;
    static constexpr Enum SUBSIDIARY_INFO = (Enum)1992;
    static constexpr Enum SUBSIDIARY_COMPANY = (Enum)1993;
    static constexpr Enum DETAILS_STNT_SEC212 = (Enum)1994;
    static constexpr Enum SUBSIDIARY_INFO_HTML = (Enum)1995;
    static constexpr Enum IS_FILEDBS = (Enum)1996;
    static constexpr Enum SRN = (Enum)1997;
    static constexpr Enum REASON_FOR_NO_FILING = (Enum)1998;
    static constexpr Enum HOLDING_COMPANY = (Enum)1999;
    static constexpr Enum BEC_SUB_DATE = (Enum)2000;
    static constexpr Enum CEASING_DATE = (Enum)2001;
    static constexpr Enum NO_OF_SHARES_HELD = (Enum)2002;
    static constexpr Enum FACE_VALUE_OF_SHARES = (Enum)2003;
    static constexpr Enum PAID_UP_VALUE_SHARES = (Enum)2004;
    static constexpr Enum PERCENTAGE_SHARES = (Enum)2005;
    static constexpr Enum VOTING_PROPORTION = (Enum)2006;
    static constexpr Enum SUBSIDIARY_CURRENCY = (Enum)2007;
    static constexpr Enum EXCHANGE_RATE = (Enum)2008;
    static constexpr Enum SHARE_CAPITAL = (Enum)2009;
    static constexpr Enum RESERVES_AND_SURPLUS = (Enum)2010;
    static constexpr Enum TOTAL_ASSETS = (Enum)2011;
    static constexpr Enum TOTAL_LIABILITIES = (Enum)2012;
    static constexpr Enum INVESTMENT = (Enum)2013;
    static constexpr Enum TOTAL_INCOME = (Enum)2014;
    static constexpr Enum PROFIT_BEFORE_TAX = (Enum)2015;
    static constexpr Enum PROVISION_FOR_TAX = (Enum)2016;
    static constexpr Enum PROFIT_AFTER_TAX = (Enum)2017;
    static constexpr Enum PROPOSED_DIVIDEND = (Enum)2018;
    static constexpr Enum AGGR_AMT_OF_PLPY = (Enum)2019;
    static constexpr Enum DET_AGGR_AMT_NOT_PAR_COMPANY = (Enum)2020;
    static constexpr Enum AGGR_AMT_NOT_ACC_CY = (Enum)2021;
    static constexpr Enum AGGR_AMT_NOT_ACC_PY = (Enum)2022;
    static constexpr Enum DET_AGGR_AMT_DEALT_PAR_COMPANY = (Enum)2023;
    static constexpr Enum AGGR_AMT_ACC_CY = (Enum)2024;
    static constexpr Enum AGGR_AMT_ACC_PY = (Enum)2025;
    static constexpr Enum ASSETS_LIABILITY_DETAILS = (Enum)2026;
    static constexpr Enum INTERESTS_DETAILS = (Enum)2027;
    static constexpr Enum NATURE_OF_RELATION = (Enum)2028;
    static constexpr Enum JOINTLY_CONTRO_ASSETS = (Enum)2029;
    static constexpr Enum BALANCE = (Enum)2030;
    static constexpr Enum SECURED_BY = (Enum)2031;
    static constexpr Enum PAYMENT_TERMS = (Enum)2032;
    static constexpr Enum DEFAULT_PERIOD = (Enum)2033;
    static constexpr Enum DEFAULT_AMOUNT = (Enum)2034;
    static constexpr Enum SHARE_CLASS = (Enum)2035;
    static constexpr Enum FACE_VALUE = (Enum)2036;
    static constexpr Enum REDEMPTION_VALUE = (Enum)2037;
    static constexpr Enum MATURITY_DATE = (Enum)2038;
    static constexpr Enum AGGREGATE_AMOUNT = (Enum)2039;
    static constexpr Enum ELEMENT_NAME = (Enum)2040;
    static constexpr Enum ADDITIONS = (Enum)2041;
    static constexpr Enum DEDUCTIONS = (Enum)2042;
    static constexpr Enum OTHERS_ADJUSTMENT = (Enum)2043;
    static constexpr Enum DEPRECIATION = (Enum)2044;
    static constexpr Enum REVALUATION = (Enum)2045;
    static constexpr Enum REVERSALS = (Enum)2046;
    static constexpr Enum IMPAIRMENT_LOSS = (Enum)2047;
    static constexpr Enum ACQUIRED = (Enum)2048;
    static constexpr Enum REVALUATION_DATE = (Enum)2049;
    static constexpr Enum YEAR = (Enum)2050;
    static constexpr Enum QUOTED_AMOUNT = (Enum)2051;
    static constexpr Enum QUOTED_MARKET_VALUE = (Enum)2052;
    static constexpr Enum UNQUOTED_AMOUNT = (Enum)2053;
    static constexpr Enum SHARE_NUMBER = (Enum)2054;
    static constexpr Enum CORPORATE_BODY_NAME = (Enum)2055;
    static constexpr Enum SUBSIDIARY = (Enum)2056;
    static constexpr Enum EXTENT_OF_HOLDING = (Enum)2057;
    static constexpr Enum QUOTED_INFO = (Enum)2058;
    static constexpr Enum PAID_INFO = (Enum)2059;
    static constexpr Enum IS_STATED_AT_COST = (Enum)2060;
    static constexpr Enum VALUATION_BASIC = (Enum)2061;
    static constexpr Enum FIRM_NAME = (Enum)2062;
    static constexpr Enum TOTAL_CAPITAL = (Enum)2063;
    static constexpr Enum PARTNER_NAME = (Enum)2064;
    static constexpr Enum PROFIT_SHARE = (Enum)2065;
    static constexpr Enum DUE_BY_DIRECTORS = (Enum)2066;
    static constexpr Enum DUE_BY_OFFICERS = (Enum)2067;
    static constexpr Enum SHARE_CAPITAL_NOTE = (Enum)2068;
    static constexpr Enum SHARE_NAME = (Enum)2069;
    static constexpr Enum SHARE_TYPE = (Enum)2070;
    static constexpr Enum SHARES_ISSUED = (Enum)2071;
    static constexpr Enum SHARES_BOUGHT = (Enum)2072;
    static constexpr Enum PAID_UP_AMOUNT = (Enum)2073;
    static constexpr Enum NET_VALUE = (Enum)2074;
    static constexpr Enum COMPANY_TYPE = (Enum)2075;
    static constexpr Enum SHARE_AMOUNT = (Enum)2076;
    static constexpr Enum PAID_SHARES = (Enum)2077;
    static constexpr Enum BONUS_SHARES = (Enum)2078;
    static constexpr Enum BUY_BACK_SHARES = (Enum)2079;
    static constexpr Enum UNI_SCHEMA = (Enum)2080;
    static constexpr Enum MAX_ID = (Enum)2081;
    static constexpr Enum UNI_SCHEMA_ENUM = (Enum)2082;
    static constexpr Enum IS_DEFUNCT = (Enum)2083;
    static constexpr Enum CATEGORY_ENUM_USID = (Enum)2084;
    static constexpr Enum DEVSTAGE_ONLY = (Enum)2085;
    static constexpr Enum UNI_SCHEMA_CONSTANT = (Enum)2086;
    static constexpr Enum MERGE_MAP = (Enum)2087;
    static constexpr Enum CATEGORY_CONST_USID = (Enum)2088;
    static constexpr Enum UNI_CONTENT_SCHEMA_PROPERTIES = (Enum)2089;
    static constexpr Enum IS_APISCHEMA = (Enum)2090;
    static constexpr Enum TWSchemaType = (Enum)2091;
    static constexpr Enum HASHSECTION_CONTENT_ID = (Enum)2092;
    static constexpr Enum DCSCHEMA_CONTENT_ID = (Enum)2093;
    static constexpr Enum IS_RESERVED = (Enum)2094;
    static constexpr Enum UNI_CONTAINER_CONTENT = (Enum)2095;
    static constexpr Enum UNI_CONTENT_SCHEMA = (Enum)2096;
    static constexpr Enum APP_SCHEMA_METADATA = (Enum)2097;
    static constexpr Enum START_TICK = (Enum)2098;
    static constexpr Enum RESPONSIVENESS_PTR = (Enum)2099;
    static constexpr Enum WINDOW = (Enum)2100;
    static constexpr Enum PAGE = (Enum)2101;
    static constexpr Enum LABEL = (Enum)2102;
    static constexpr Enum BUTTON = (Enum)2103;
    static constexpr Enum TEXTEDIT = (Enum)2104;
    static constexpr Enum LIST = (Enum)2105;
    static constexpr Enum MENU = (Enum)2106;
    static constexpr Enum LINE = (Enum)2107;
    static constexpr Enum UIFIELD = (Enum)2108;
    static constexpr Enum UIFORM = (Enum)2109;
    static constexpr Enum UIREPORT = (Enum)2110;
    static constexpr Enum WIDGET_TYPE = (Enum)2111;
    static constexpr Enum EV_CALLBACK_PAYLOAD = (Enum)2112;
    static constexpr Enum EV_CALLBACK_APIS = (Enum)2113;
    static constexpr Enum EV_CALLBACK_WINDOW = (Enum)2114;
    static constexpr Enum EV_CALLBACK_ELEMENT = (Enum)2115;
    static constexpr Enum EV_CALLBACK_DATA = (Enum)2116;
    static constexpr Enum EV_CALLBACK_EVENT_TYPE = (Enum)2117;
    static constexpr Enum EV_CALLBACK_KEY_PRESS = (Enum)2118;
    static constexpr Enum MULTILINE = (Enum)2119;
    static constexpr Enum TEXT_WRAP = (Enum)2120;
    static constexpr Enum ANCHOR = (Enum)2121;
    static constexpr Enum MARGIN = (Enum)2122;
    static constexpr Enum FONT_SIZE = (Enum)2123;
    static constexpr Enum CHANGE_EXISTING_UI = (Enum)2124;
    static constexpr Enum WIDTH_TYPE = (Enum)2125;
    static constexpr Enum HEIGHT_TYPE = (Enum)2126;
    static constexpr Enum WIDTH_RELATIVE_TO = (Enum)2127;
    static constexpr Enum HEIGHT_RELATIVE_TO = (Enum)2128;
    static constexpr Enum IS_PASSWORD = (Enum)2129;
    static constexpr Enum CHANGE_UI_PROPERTY = (Enum)2130;
    static constexpr Enum UI_PROPERTY = (Enum)2131;
    static constexpr Enum UI_PROPERTY_VALUE = (Enum)2132;
    static constexpr Enum EVENT_STRING = (Enum)2133;
    static constexpr Enum FOCUS_ALLOWED = (Enum)2134;
    static constexpr Enum NEXT_FOCUS_ELEM = (Enum)2135;
    static constexpr Enum CONTEXT_ID = (Enum)2136;
    static constexpr Enum EV_VALIDATE_TEXT = (Enum)2137;
    static constexpr Enum EV_ACCEPT_TEXT = (Enum)2138;
    static constexpr Enum BORDER_COLOR = (Enum)2139;
    static constexpr Enum IS_EDITABLE = (Enum)2140;
    static constexpr Enum LABEL_TYPE = (Enum)2141;
    static constexpr Enum LIST_DATA = (Enum)2142;
    static constexpr Enum DEFAULT_TEXT = (Enum)2143;
    static constexpr Enum SCHEMA_FIELD_NAME = (Enum)2144;
    static constexpr Enum MENU_ENTRY = (Enum)2145;
    static constexpr Enum MENU_API = (Enum)2146;
    static constexpr Enum MENU_API_ID = (Enum)2147;
    static constexpr Enum MENU_PAYLOAD = (Enum)2148;
    static constexpr Enum REPORT_ROW = (Enum)2149;
    static constexpr Enum VIEW_TEMPLATE_ID = (Enum)2150;
    static constexpr Enum VIEW_DATA = (Enum)2151;
    static constexpr Enum VIEW_SOURCE_API = (Enum)2152;
    static constexpr Enum WELCOME_MESSAGE = (Enum)2153;
    static constexpr Enum PAGE_BACK = (Enum)2154;
    static constexpr Enum PDCID = (Enum)2155;
    static constexpr Enum IDCID = (Enum)2156;
    static constexpr Enum VDCID = (Enum)2157;
    static constexpr Enum SCREEN_ID = (Enum)2158;
    static constexpr Enum WINDOW_PARMS = (Enum)2159;
    static constexpr Enum IS_EXIT_MSG_COMM = (Enum)2160;
    static constexpr Enum IS_EXIT_MSG_CONF = (Enum)2161;
    static constexpr Enum ADDITIONAL_BUTTONS = (Enum)2162;
    static constexpr Enum REPORT_ID = (Enum)2163;
    static constexpr Enum WELCOME_PAGE = (Enum)2164;
    static constexpr Enum MESSAGE_PAGE = (Enum)2165;
    static constexpr Enum MENU_LIST = (Enum)2166;
    static constexpr Enum REPORT_VIEW = (Enum)2167;
    static constexpr Enum COMPOUND_VIEW = (Enum)2168;
    static constexpr Enum HEADER = (Enum)2169;
    static constexpr Enum TITLE = (Enum)2170;
    static constexpr Enum SUB_TITLE = (Enum)2171;
    static constexpr Enum NORMAL = (Enum)2172;
    static constexpr Enum MENU_ITEM = (Enum)2173;
    static constexpr Enum LEFT = (Enum)2174;
    static constexpr Enum RIGHT = (Enum)2175;
    static constexpr Enum TOP = (Enum)2176;
    static constexpr Enum BOTTOM = (Enum)2177;
    static constexpr Enum CENTER = (Enum)2178;
    static constexpr Enum HORIZONTAL_CENTER = (Enum)2179;
    static constexpr Enum VERTICAL_CENTER = (Enum)2180;
    static constexpr Enum EV_SINGLE_CLICK = (Enum)2181;
    static constexpr Enum EV_DOUBLE_CLICK = (Enum)2182;
    static constexpr Enum EV_RIGHT_CLICK = (Enum)2183;
    static constexpr Enum LONG_PRESS = (Enum)2184;
    static constexpr Enum VALUE_SELECT = (Enum)2185;
    static constexpr Enum VALUE_CHANGE = (Enum)2186;
    static constexpr Enum WINDOW_WIDTH_CHANGE = (Enum)2187;
    static constexpr Enum WINDOW_HEIGHT_CHANGE = (Enum)2188;
    static constexpr Enum WINDOW_XPOS_CHANGE = (Enum)2189;
    static constexpr Enum WINDOW_YPOS_CHANGE = (Enum)2190;
    static constexpr Enum WINDOW_STATE_CHANGE = (Enum)2191;
    static constexpr Enum WINDOW_TITLE_CHANGE = (Enum)2192;
    static constexpr Enum WINDOW_VISIBILITY_CHANGE = (Enum)2193;
    static constexpr Enum TEXT_CHANGE = (Enum)2194;
    static constexpr Enum TAB_PRESS = (Enum)2195;
    static constexpr Enum ENTER_PRESS = (Enum)2196;
    static constexpr Enum ESC_PRESS = (Enum)2197;
    static constexpr Enum KEY_PRESS = (Enum)2198;
    static constexpr Enum KEY_RELEASED = (Enum)2199;
    static constexpr Enum ON_FOCUS_OUT = (Enum)2200;
    static constexpr Enum STOP_APP_EVENT = (Enum)2201;
    static constexpr Enum EXIT_WINDOW_EVENT = (Enum)2202;
    static constexpr Enum RELOAD_LAYOUT_EVENT = (Enum)2203;
    static constexpr Enum CREATE_WINDOW_EVENT = (Enum)2204;
    static constexpr Enum INVOKE_BACK_PAGE_EVENT = (Enum)2205;
    static constexpr Enum PROCESSING_ERROR_EVENT = (Enum)2206;
    static constexpr Enum FIELD_VALIDATION_EVENT = (Enum)2207;
    static constexpr Enum MENU_NAVIGATION_EVENT = (Enum)2208;
    static constexpr Enum FORM_SUBMIT_EVENT = (Enum)2209;
    static constexpr Enum INTERNAL_DATA_ENTRY_SUCCESS_EVENT = (Enum)2210;
    static constexpr Enum UI_EVENT_ID = (Enum)2211;
    static constexpr Enum WIDGET_ID = (Enum)2212;
    static constexpr Enum CONSOLE_RUNTIME_ELEM_ID = (Enum)2213;
    static constexpr Enum WINDOW_ID = (Enum)2214;
    static constexpr Enum IS_VALIDATION_SUCCESS = (Enum)2215;
    static constexpr Enum WIDGET_DATA = (Enum)2216;
    static constexpr Enum PAYLOAD_DATA = (Enum)2217;
    static constexpr Enum FORM_ENTRY_PAYLOAD = (Enum)2218;
    static constexpr Enum ABSOLUTE_POS = (Enum)2219;
    static constexpr Enum RELATIVE_POS = (Enum)2220;
    static constexpr Enum SOLID = (Enum)2221;
    static constexpr Enum DOTTED = (Enum)2222;
    static constexpr Enum DASHED = (Enum)2223;
    static constexpr Enum ROBOTO = (Enum)2224;
    static constexpr Enum ARIAL = (Enum)2225;
    static constexpr Enum CALIBRI = (Enum)2226;
    static constexpr Enum PORTRAIT = (Enum)2227;
    static constexpr Enum LANDSCAPE = (Enum)2228;
    static constexpr Enum COMMAND_ID = (Enum)2229;
    static constexpr Enum COMMAND_EXPRESSION = (Enum)2230;
    static constexpr Enum INPUT = (Enum)2231;
    static constexpr Enum OUTPUT = (Enum)2232;
    static constexpr Enum PAGE_ID = (Enum)2233;
    static constexpr Enum REPORT_DEFINITION = (Enum)2234;
    static constexpr Enum FROM = (Enum)2235;
    static constexpr Enum TO = (Enum)2236;
    static constexpr Enum API_ID = (Enum)2237;
    static constexpr Enum API_PAYLOAD = (Enum)2238;
    static constexpr Enum API_DESTINATION = (Enum)2239;
    static constexpr Enum CLIENTPF_COMMAND_OPENPAGE = (Enum)2240;
    static constexpr Enum CLIENTPF_COMMAND_REFRESHPAGE = (Enum)2241;
    static constexpr Enum CLIENTPF_COMMAND_COMPUTE = (Enum)2242;
    static constexpr Enum CLIENTPF_COMMAND_EXECUTEREPORT = (Enum)2243;
    static constexpr Enum CLIENTPF_COMMAND_EXECUTEAPI = (Enum)2244;
    static constexpr Enum CLIENTPF_COMMAND_BACK = (Enum)2245;
    static constexpr Enum CLIENTPF_COMMAND_COPY = (Enum)2246;
    static constexpr Enum CLIENTPF_COMMAND_LOADSCHEMA = (Enum)2247;
    static constexpr Enum COMMANDS = (Enum)2248;
    static constexpr Enum PAGE_DEFINITION_FIELD = (Enum)2249;
    static constexpr Enum ACTION_DEFINITION_FIELD = (Enum)2250;
    static constexpr Enum DATA_SCHEMA = (Enum)2251;
    static constexpr Enum CLIENT_SCHEMA = (Enum)2252;
    static constexpr Enum ACTION_ID = (Enum)2253;
    static constexpr Enum PANIC_OBJECT = (Enum)2254;
    static constexpr Enum ERROR_STRING = (Enum)2255;
    static constexpr Enum FORMAT_PARMS = (Enum)2256;
    static constexpr Enum UI_POSITION = (Enum)2257;
    static constexpr Enum X_POS = (Enum)2258;
    static constexpr Enum Y_POS = (Enum)2259;
    static constexpr Enum UI_DIMENSION = (Enum)2260;
    static constexpr Enum CALC_HEIGHT = (Enum)2261;
    static constexpr Enum CALC_WIDTH = (Enum)2262;
    static constexpr Enum DIMENSION_UNIT = (Enum)2263;
    static constexpr Enum DIM_REFERENCE = (Enum)2264;
    static constexpr Enum UI_PADDING = (Enum)2265;
    static constexpr Enum LEFT_PAD = (Enum)2266;
    static constexpr Enum RIGHT_PAD = (Enum)2267;
    static constexpr Enum TOP_PAD = (Enum)2268;
    static constexpr Enum BOTTOM_PAD = (Enum)2269;
    static constexpr Enum UI_BORDER = (Enum)2270;
    static constexpr Enum STYLE = (Enum)2271;
    static constexpr Enum ALIGNMENT = (Enum)2272;
    static constexpr Enum H_ALIGNMENT = (Enum)2273;
    static constexpr Enum V_ALIGNMENT = (Enum)2274;
    static constexpr Enum UI_FONT = (Enum)2275;
    static constexpr Enum FAMILY = (Enum)2276;
    static constexpr Enum IS_BOLD = (Enum)2277;
    static constexpr Enum IS_ITALIC = (Enum)2278;
    static constexpr Enum IS_UNDERLINED = (Enum)2279;
    static constexpr Enum STRINGIFIED_ID = (Enum)2280;
    static constexpr Enum VDC_SCREEN_ID = (Enum)2281;
    static constexpr Enum BACKGROUND_COLOR = (Enum)2282;
    static constexpr Enum IS_MINIZABLE = (Enum)2283;
    static constexpr Enum IS_CLOSABLE = (Enum)2284;
    static constexpr Enum IS_RESIZABLE = (Enum)2285;
    static constexpr Enum IS_VISIBLE = (Enum)2286;
    static constexpr Enum LABEL_API = (Enum)2287;
    static constexpr Enum DATA_API = (Enum)2288;
    static constexpr Enum PHYSICAL_WINDOW = (Enum)2289;
    static constexpr Enum CHILD_ID = (Enum)2290;
    static constexpr Enum PARENT_ID = (Enum)2291;
    static constexpr Enum PAGE_LABEL_API_ID = (Enum)2292;
    static constexpr Enum PAGE_DATA_API_ID = (Enum)2293;
    static constexpr Enum BACK_PAGE_ID = (Enum)2294;
    static constexpr Enum PANE = (Enum)2295;
    static constexpr Enum PART = (Enum)2296;
    static constexpr Enum FULL_WIDTH = (Enum)2297;
    static constexpr Enum FULL_HEIGHT = (Enum)2298;
    static constexpr Enum TEXT = (Enum)2299;
    static constexpr Enum IS_CLICKABLE = (Enum)2300;
    static constexpr Enum ON_CLICK_API = (Enum)2301;
    static constexpr Enum ON_CLICK_PAGE_ID = (Enum)2302;
    static constexpr Enum IS_ENABLED = (Enum)2303;
    static constexpr Enum IS_SUBMIT_BUTTON = (Enum)2304;
    static constexpr Enum ON_SUCCESS = (Enum)2305;
    static constexpr Enum ON_FAILURE = (Enum)2306;
    static constexpr Enum HINT_TEXT = (Enum)2307;
    static constexpr Enum IS_MANDATORY = (Enum)2308;
    static constexpr Enum DATATYPE = (Enum)2309;
    static constexpr Enum VALIDATION_API_ID = (Enum)2310;
    static constexpr Enum DATASET_URL = (Enum)2311;
    static constexpr Enum DATA_URL = (Enum)2312;
    static constexpr Enum UI_TEMPLATE_WELCOME_MESSAGE = (Enum)2313;
    static constexpr Enum TEMPLATE_ID = (Enum)2314;
    static constexpr Enum ON_SUBMIT = (Enum)2315;
    static constexpr Enum UI_TEMPLATE_MENU_LIST = (Enum)2316;
    static constexpr Enum MENU_TITLE = (Enum)2317;
    static constexpr Enum UI_TEMPLATE_REPORT_VIEW = (Enum)2318;
    static constexpr Enum REPORT_HEADER = (Enum)2319;
    static constexpr Enum DATA_SOURCE_API_ID = (Enum)2320;
    static constexpr Enum REPORT_COLUMN = (Enum)2321;
    static constexpr Enum DATA_SCHEMA_FIELD_ID = (Enum)2322;
    static constexpr Enum UI_TEMPLATE_FORM = (Enum)2323;
    static constexpr Enum FORM_ENTRY = (Enum)2324;
    static constexpr Enum FIELD_VALIDATE_PARMS = (Enum)2325;
    static constexpr Enum VALIDATION_API_SCHEMA_ID = (Enum)2326;
    static constexpr Enum UI_TEMPLATE_COMPOUND_VIEW = (Enum)2327;
    static constexpr Enum CHILD = (Enum)2328;
    static constexpr Enum SCREEN = (Enum)2329;
    static constexpr Enum DEVICE_PIXEL_RATIO = (Enum)2330;
    static constexpr Enum LOGICAL_PPI = (Enum)2331;
    static constexpr Enum PHYSICAL_PPI = (Enum)2332;
    static constexpr Enum ORIENTATION = (Enum)2333;
    static constexpr Enum SCREEN_LIST = (Enum)2334;
    static constexpr Enum DC_LIST = (Enum)2335;
    static constexpr Enum ZONE = (Enum)2336;
    static constexpr Enum LOGICAL_UNIT_REF = (Enum)2337;
    static constexpr Enum PLATFORM_OBJ_REF = (Enum)2338;
    static constexpr Enum ROW = (Enum)2339;
    static constexpr Enum CELL = (Enum)2340;
    static constexpr Enum CONSOLE_COMM_PARMS = (Enum)2341;
    static constexpr Enum COMMAND_TYPE = (Enum)2342;
    static constexpr Enum CONSOLE_PAYLOAD = (Enum)2343;
    static constexpr Enum APPLICATION_GATEWAY_OF_TALLY_OBJ = (Enum)2344;
    static constexpr Enum GATEWAY_REPORTS = (Enum)2345;
    static constexpr Enum APPLICATION_STATE = (Enum)2346;
    static constexpr Enum REPORT = (Enum)2347;
    static constexpr Enum IDC_ADDITIONAL_INFO = (Enum)2348;
    static constexpr Enum VDC_ID = (Enum)2349;
    static constexpr Enum DRIVERDC_ID = (Enum)2350;
    static constexpr Enum DRIVERDC_TYPE = (Enum)2351;
    static constexpr Enum FRAME_PAGE_OBJECT = (Enum)2352;
    static constexpr Enum FRAME_PAGE_ID = (Enum)2353;
    static constexpr Enum PANE_OBJECT_ID = (Enum)2354;
    static constexpr Enum PANE_ID = (Enum)2355;
    static constexpr Enum CONSOLE = (Enum)2356;
    static constexpr Enum PRESENTATION_RENDER_WINDOW_REQUEST_SCHEMA = (Enum)2357;
    static constexpr Enum PRESENTATION_PROCESS_LAYOUT_REQUEST_SCHEMA = (Enum)2358;
    static constexpr Enum PRESENTATION_LAUNCH_RUNTIME_WINDOW_REQUEST_SCHEMA = (Enum)2359;
    static constexpr Enum PRESENTATION_CREATE_STARTUP_WINDOW_REQUEST_SCHEMA = (Enum)2360;
    static constexpr Enum PRESENTATION_CLOSE_APP_WINDOW_REQUEST_SCHEMA = (Enum)2361;
    static constexpr Enum PRESENTATION_PROCESS_EVENTS_REQUEST_SCHEMA = (Enum)2362;
    static constexpr Enum PRESENTATION_INTERNAL_UI_EVENT_RESPONSE_SCHEMA = (Enum)2363;
    static constexpr Enum IS_COMPLETE = (Enum)2364;
    static constexpr Enum ITERATOR = (Enum)2365;
    static constexpr Enum PRAJAPATI_IP = (Enum)2366;
    static constexpr Enum LAN_IP = (Enum)2367;
    static constexpr Enum PASSWORD = (Enum)2368;
    static constexpr Enum TW_ADMINDC_LANG_OBJ = (Enum)2369;
    static constexpr Enum TW_ADMINDC_LANG_STR = (Enum)2370;
    static constexpr Enum TW_ADMINDC_QUERY_OBJ = (Enum)2371;
    static constexpr Enum TW_QUERY_RESULT_ID = (Enum)2372;
    static constexpr Enum TW_APP_PREFS_OBJECT = (Enum)2373;
    static constexpr Enum TW_APP_LANGUAGE_PREF = (Enum)2374;
    static constexpr Enum TW_APP_DATE_FORMAT_PREF = (Enum)2375;
    static constexpr Enum TW_APP_OS_LANG_PREF = (Enum)2376;
    static constexpr Enum TW_APP_PRAJAPATI_IP = (Enum)2377;
    static constexpr Enum TW_APP_LAN_IP = (Enum)2378;
    static constexpr Enum TW_APP_USER_ID = (Enum)2379;
    static constexpr Enum TW_YOGINI_BS_FILE_OBJECT = (Enum)2380;
    static constexpr Enum TW_APP_YOGINI_BS_FILE = (Enum)2381;
    static constexpr Enum TW_LANGUAGE_LIST = (Enum)2382;
    static constexpr Enum ITEM = (Enum)2383;
    static constexpr Enum TW_UNIVERSE_SUPERUSERS = (Enum)2384;
    static constexpr Enum TW_UNIVERSE_SUPERUSER = (Enum)2385;
    static constexpr Enum TW_SUPERUSER_ID = (Enum)2386;
    static constexpr Enum TW_SUPERUSER_EMAIL_ID = (Enum)2387;
    static constexpr Enum TW_APP_CURRENT_LANGUAGE_OBJ = (Enum)2388;
    static constexpr Enum TW_APP_CURRENT_LANG = (Enum)2389;
    static constexpr Enum SCHEMA_GET_LANGUAGES = (Enum)2390;
    static constexpr Enum CONDITION = (Enum)2391;
    static constexpr Enum LANGUAGE_OBJ = (Enum)2392;
    static constexpr Enum TW_QUERY_SCHEMA = (Enum)2393;
    static constexpr Enum TW_QUERY_ID = (Enum)2394;
    static constexpr Enum COMPANY_PATH = (Enum)2395;
    static constexpr Enum USER_OBJECT = (Enum)2396;
    static constexpr Enum TW_SERVERDC_QUERY_ID = (Enum)2397;
    static constexpr Enum LEDGER_OBJECT = (Enum)2398;
    static constexpr Enum AUTHENTICATED_USER_OBJECT = (Enum)2399;
    static constexpr Enum USER_IDENTIFIER = (Enum)2400;
    static constexpr Enum LEDGER_OBJECT_EXT = (Enum)2401;
    static constexpr Enum COMPANY_OBJECT = (Enum)2402;
    static constexpr Enum TRANSITION_CONFIG = (Enum)2403;
    static constexpr Enum OWNER_IDENTIFIER = (Enum)2404;
    static constexpr Enum OWNER_PASSWORD = (Enum)2405;
    static constexpr Enum PATH_OBJECT = (Enum)2406;
    static constexpr Enum DEF_CUST_PATH = (Enum)2407;
    static constexpr Enum DEF_APP_PATH = (Enum)2408;
    static constexpr Enum MESSAGE_OBJECT = (Enum)2409;
    static constexpr Enum MESSAGE_ID = (Enum)2410;
    static constexpr Enum MESSAGE_COMMAND = (Enum)2411;
    static constexpr Enum PRIMARY_OBJECT = (Enum)2412;
    static constexpr Enum OPEN_COMPANY_LIST_OBJ = (Enum)2413;
    static constexpr Enum ADMIN = (Enum)2414;
    static constexpr Enum MESSAGE = (Enum)2415;
    static constexpr Enum CDCID = (Enum)2416;
    static constexpr Enum DITOBJECT = (Enum)2417;
    static constexpr Enum DITVERSION = (Enum)2418;
    static constexpr Enum USEROBJECT = (Enum)2419;
    static constexpr Enum USERID = (Enum)2420;
    static constexpr Enum RESERVEOBJECT = (Enum)2421;
    static constexpr Enum RESERVEIPID = (Enum)2422;
    static constexpr Enum IPV4OBJECT = (Enum)2423;
    static constexpr Enum IPV4IPID = (Enum)2424;
    static constexpr Enum TW_CLIENT_QUERY_OBJ = (Enum)2425;
    static constexpr Enum BOOTSTRAPDATASECTION = (Enum)2426;
    static constexpr Enum PRAJAPTIDATASECTION = (Enum)2427;
    static constexpr Enum DOES_PAGE_EXIST = (Enum)2428;
    static constexpr Enum PRIMARY_HASH = (Enum)2429;
    static constexpr Enum TW_TS_CONFIG_API_SCHEMA = (Enum)2430;
    static constexpr Enum SELF_IPID = (Enum)2431;
    static constexpr Enum UNIVERSE_NAME = (Enum)2432;
    static constexpr Enum UNIVERSE_IPID = (Enum)2433;
    static constexpr Enum UNIVERSE_ID = (Enum)2434;
    static constexpr Enum UNIVERSE_OBJECT = (Enum)2435;
    static constexpr Enum TW_TS_CONFIG_RESP_API_SCHEMA = (Enum)2436;
    static constexpr Enum TW_RESPONSE_MESSAGE = (Enum)2437;
    static constexpr Enum PING_SCRATCHPAD_SCHEMA = (Enum)2438;
    static constexpr Enum DUMMY_FIELD_ID_1 = (Enum)2439;
    static constexpr Enum FILTER = (Enum)2440;
    static constexpr Enum STARTS_WITH = (Enum)2441;
    static constexpr Enum PREMISE_BOOTSTRAP_REQ_SCHEMA = (Enum)2442;
    static constexpr Enum IPID_AND_ITS_STATUS = (Enum)2443;
    static constexpr Enum IPID_MANUALLY_ENTERED = (Enum)2444;
    static constexpr Enum IPID_STATUS = (Enum)2445;
    static constexpr Enum PREMISE_FETCH_IPIDS_RESP_SCHEMA = (Enum)2446;
    static constexpr Enum LOGINHANDLER_REQ_SCHEMA = (Enum)2447;
    static constexpr Enum YOGINI_BOOTSTRAPHANDLER_REQ_SCHEMA = (Enum)2448;
    static constexpr Enum PREMISE_ADMINQUERY_REQ_SCHEMA = (Enum)2449;
    static constexpr Enum PREMISE_LANGUAGEHANDLER_REQ_SCHEMA = (Enum)2450;
    static constexpr Enum PREMISE_ADMINQUERY_CONTEXT_SCHEMA = (Enum)2451;
    static constexpr Enum TW_REQUEST_CONTEXT_OS_LANG = (Enum)2452;
    static constexpr Enum TW_REQUEST_LOGGED_IN_USERS = (Enum)2453;
    static constexpr Enum TW_REQUEST_ITERATOR_ID = (Enum)2454;
    static constexpr Enum PREMISE_LANGUAGEQUERY_RESP_SCHEMA = (Enum)2455;
    static constexpr Enum CONNECT_IPADDRESS = (Enum)2456;
    static constexpr Enum CONNECT_PORT = (Enum)2457;
    static constexpr Enum UNIVERSE_IPADDRESS = (Enum)2458;
    static constexpr Enum UNIVERSE_PORT = (Enum)2459;
    static constexpr Enum PRAJAPATI_FILE_PATH = (Enum)2460;
    static constexpr Enum TW_LIST_OF_PRAJAPATI_IPS = (Enum)2461;
    static constexpr Enum YOGINI_OPENPRAJAPATIDB_REQ_SCHEMA = (Enum)2462;
    static constexpr Enum YOGINI_ADDPRAJAPATIIP_REQ_SCHEMA = (Enum)2463;
    static constexpr Enum YOGINI_DELETEPRAJAPATIIP_REQ_SCHEMA = (Enum)2464;
    static constexpr Enum YOGINI_SHOWPRAJAPATIIPS_REQ_SCHEMA = (Enum)2465;
    static constexpr Enum YOGINI_SHOWPRAJAPATIIPS_RESP_SCHEMA = (Enum)2466;
    static constexpr Enum TW_SITE_CONFIG_API_SCHEMA = (Enum)2467;
    static constexpr Enum TW_SITE_CONFIG_RESP_API_SCHEMA = (Enum)2468;
    static constexpr Enum BOOTSTRAP_FILE_PATH = (Enum)2469;
    static constexpr Enum KSHETRAPAL_OPENFILE_REQ_SCHEMA = (Enum)2470;
    static constexpr Enum DIT_OBJECT = (Enum)2471;
    static constexpr Enum TW_LIST_OF_USER_IDS = (Enum)2472;
    static constexpr Enum REQ_USER_IDENTIFIER = (Enum)2473;
    static constexpr Enum OBJECT_ID = (Enum)2474;
    static constexpr Enum OTP = (Enum)2475;
    static constexpr Enum TW_OTP_MESSAGE = (Enum)2476;
    static constexpr Enum TW_OTP_COUNT = (Enum)2477;
    static constexpr Enum USER_URL = (Enum)2478;
    static constexpr Enum SOURCE = (Enum)2479;
    static constexpr Enum COLUMN = (Enum)2480;
    static constexpr Enum ITEM_ID = (Enum)2481;
    static constexpr Enum PATH = (Enum)2482;
    static constexpr Enum ELEMENT = (Enum)2483;
    static constexpr Enum FIELD = (Enum)2484;
    static constexpr Enum OBJECT = (Enum)2485;
    static constexpr Enum IS_REPEATED = (Enum)2486;
    static constexpr Enum PAGE_DEFINITION = (Enum)2487;
    static constexpr Enum IP = (Enum)2488;
    static constexpr Enum PORT = (Enum)2489;
    static constexpr Enum SERVER_OBJECT = (Enum)2490;
    static constexpr Enum PRE_COMPUTE_API = (Enum)2491;
    static constexpr Enum CDC_AUTHENTICATED_USER_OBJ = (Enum)2492;
    static constexpr Enum CDC_COMPANY_DETAILS_OBJ = (Enum)2493;
    static constexpr Enum OWNER = (Enum)2494;
    static constexpr Enum CDC_USER_OBJ = (Enum)2495;
    static constexpr Enum CDC_COMPANY_OBJ = (Enum)2496;
    static constexpr Enum USER_DEF_PATH_OBJ = (Enum)2497;
    static constexpr Enum CDC_UI_OBJ = (Enum)2498;
    static constexpr Enum DUMMY = (Enum)2499;
    static constexpr Enum CLIENT_CONNECTREQUEST_REQ_SCHEMA = (Enum)2500;
    static constexpr Enum CLIENT_CONNECTREQUEST_RESP_SCHEMA = (Enum)2501;
    static constexpr Enum CLIENT_DISCONNECTREQUEST_REQ_SCHEMA = (Enum)2502;
    static constexpr Enum SOURCE_UNI_SCHEMA = (Enum)2503;
    static constexpr Enum ENUM_LIST = (Enum)2504;
    static constexpr Enum SOURCE_UNI_SCHEMA_ENUM = (Enum)2505;
    static constexpr Enum CATEGORY_ENUM_OBJID = (Enum)2506;
    static constexpr Enum BASE_TYPE = (Enum)2507;
    static constexpr Enum DEVCONFIG_ENUM_OBJID = (Enum)2508;
    static constexpr Enum RESV_ENUM_TYPE = (Enum)2509;
    static constexpr Enum ALLOW_CHILDREN = (Enum)2510;
    static constexpr Enum IS_FINAL = (Enum)2511;
    static constexpr Enum CEILING_VALUE = (Enum)2512;
    static constexpr Enum LOCAL_SCOPE = (Enum)2513;
    static constexpr Enum IS_COMPILE_TIME = (Enum)2514;
    static constexpr Enum FOR_JAVA = (Enum)2515;
    static constexpr Enum INITIAL_ID = (Enum)2516;
    static constexpr Enum CONSTANT_LIST = (Enum)2517;
    static constexpr Enum SOURCE_UNI_SCHEMA_CONSTANT = (Enum)2518;
    static constexpr Enum PARENT_CONTENT_ID = (Enum)2519;
    static constexpr Enum CATEGORY_CONST_OBJID = (Enum)2520;
    static constexpr Enum IS_DS_RESOURCE_METRIC = (Enum)2521;
    static constexpr Enum IS_SCOPED = (Enum)2522;
    static constexpr Enum ORIG_CONST_OBJID = (Enum)2523;
    static constexpr Enum SOURCE_CONTENT_SCHEMA_PROPERTIES = (Enum)2524;
    static constexpr Enum HASHSECTION_OBJID = (Enum)2525;
    static constexpr Enum SOURCE_CONTAINER_CONTENT = (Enum)2526;
    static constexpr Enum SOURCE_CONTENT_SCHEMA = (Enum)2527;
    static constexpr Enum TWCMakePresetCacheVar = (Enum)2528;
    static constexpr Enum TWName = (Enum)2529;
    static constexpr Enum TWType = (Enum)2530;
    static constexpr Enum TWValue = (Enum)2531;
    static constexpr Enum TWCMakePresetEnvVar = (Enum)2532;
    static constexpr Enum TWCMakeVSSVendorVar = (Enum)2533;
    static constexpr Enum TWCMakeVSRSVendorVar = (Enum)2534;
    static constexpr Enum TWToolChainFlags = (Enum)2535;
    static constexpr Enum TWHostToolChainFlags = (Enum)2536;
    static constexpr Enum BUILDGEN_OS = (Enum)2537;
    static constexpr Enum TWVSName = (Enum)2538;
    static constexpr Enum TWCMakeName = (Enum)2539;
    static constexpr Enum TWBuildGeneratorName = (Enum)2540;
    static constexpr Enum TWKernel = (Enum)2541;
    static constexpr Enum TWIsBuildHost = (Enum)2542;
    static constexpr Enum TWHostOS = (Enum)2543;
    static constexpr Enum TWInactive = (Enum)2544;
    static constexpr Enum TWVSIntelliSenseMode = (Enum)2545;
    static constexpr Enum BUILDGEN_KERNEL = (Enum)2546;
    static constexpr Enum BUILDGEN_ARCH = (Enum)2547;
    static constexpr Enum BUILDGEN_PRESET = (Enum)2548;
    static constexpr Enum TWIsCustom = (Enum)2549;
    static constexpr Enum BUILDGEN_CMAKE_PRESET = (Enum)2550;
    static constexpr Enum VS_INTELLISENSE_MODE = (Enum)2551;
    static constexpr Enum IS_CONFIGURE_PRESET = (Enum)2552;
    static constexpr Enum IS_INDIVIDUAL = (Enum)2553;
    static constexpr Enum BUILD_ENTITY_TYPE = (Enum)2554;
    static constexpr Enum REFOBJ_ID = (Enum)2555;
    static constexpr Enum DEPENDS = (Enum)2556;
    static constexpr Enum CONFIF_DEPENDS = (Enum)2557;
    static constexpr Enum BUILDGEN_CONFIG = (Enum)2558;
    static constexpr Enum TWForPreset = (Enum)2559;
    static constexpr Enum BUILDGEN_STAGE = (Enum)2560;
    static constexpr Enum TWStageConfigs = (Enum)2561;
    static constexpr Enum BUILDGEN_TRUNK = (Enum)2562;
    static constexpr Enum TWTrunkStages = (Enum)2563;
    static constexpr Enum TWSCMTrunkName = (Enum)2564;
    static constexpr Enum BUILD_CONDITION_VALUE = (Enum)2565;
    static constexpr Enum COND_TYPE = (Enum)2566;
    static constexpr Enum COND_VALUE = (Enum)2567;
    static constexpr Enum COND_NEGATE = (Enum)2568;
    static constexpr Enum APP_CONDITION_VALUE = (Enum)2569;
    static constexpr Enum BUILDGEN_LAYER = (Enum)2570;
    static constexpr Enum SOURCES = (Enum)2571;
    static constexpr Enum PUBLIC_INCLUDES = (Enum)2572;
    static constexpr Enum PRIVATE_INCLUDES = (Enum)2573;
    static constexpr Enum TWMainIncludeFile = (Enum)2574;
    static constexpr Enum BUILDGEN_CMAKE_TARGET = (Enum)2575;
    static constexpr Enum SOURCE_NAME = (Enum)2576;
    static constexpr Enum BASE_LAYER = (Enum)2577;
    static constexpr Enum HAS_ADMIN_TIER = (Enum)2578;
    static constexpr Enum HAS_SERVER_TIER = (Enum)2579;
    static constexpr Enum HAS_CLIENT_TIER = (Enum)2580;
    static constexpr Enum HAS_PRESENTATION_TIER = (Enum)2581;
    static constexpr Enum TOOLKIT = (Enum)2582;
    static constexpr Enum APPGEN_GENFILE_ASYNC_PARMS = (Enum)2583;
    static constexpr Enum APPGEN_COMPUTE_PTR = (Enum)2584;
    static constexpr Enum TARGET_ID = (Enum)2585;
    static constexpr Enum GEN_FILE_TYPE = (Enum)2586;
    static constexpr Enum APPGEN_WORKSPACE = (Enum)2587;
    static constexpr Enum BUILDGEN_TWHOME = (Enum)2588;
    static constexpr Enum BUILDGEN_TWTOOLSHOME = (Enum)2589;
    static constexpr Enum BUILDGEN_TWBUILDHOME = (Enum)2590;
    static constexpr Enum BUILDGEN_TWWORKSPACEHOME = (Enum)2591;
    static constexpr Enum BUILDGEN_TWGENHOME = (Enum)2592;
    static constexpr Enum BUILDGEN_PREDEF_FOLDERS = (Enum)2593;
    static constexpr Enum APPGEN_LOADED_TWFILES = (Enum)2594;
    static constexpr Enum TWBuildLayer = (Enum)2595;
    static constexpr Enum TWSourceDir = (Enum)2596;
    static constexpr Enum TWTestDir = (Enum)2597;
    static constexpr Enum TWBaseLayer = (Enum)2598;
    static constexpr Enum TWCategory = (Enum)2599;
    static constexpr Enum APPGEN_USER_CONFIG = (Enum)2600;
    static constexpr Enum TWProductFilter = (Enum)2601;
    static constexpr Enum TWProductFilterOut = (Enum)2602;
    static constexpr Enum APPGEN_CONFIG = (Enum)2603;
    static constexpr Enum TWVerbose = (Enum)2604;
    static constexpr Enum TWCPPTopText = (Enum)2605;
    static constexpr Enum TWCPPBottomText = (Enum)2606;
    static constexpr Enum TWHPPTopText = (Enum)2607;
    static constexpr Enum TWHPPBottomText = (Enum)2608;
    static constexpr Enum TWHPPTWAppProductClassText = (Enum)2609;
    static constexpr Enum TWSchemaHPPTopText = (Enum)2610;
    static constexpr Enum TWSchemaHPPBottomText = (Enum)2611;
    static constexpr Enum TWJavaTopText = (Enum)2612;
    static constexpr Enum TWJavaBottomText = (Enum)2613;
    static constexpr Enum TWCMakeTopText = (Enum)2614;
    static constexpr Enum TWCMakeBottomText = (Enum)2615;
    static constexpr Enum TWAppCPPTopText = (Enum)2616;
    static constexpr Enum TWAppCPPBottomText = (Enum)2617;
    static constexpr Enum TWFloatingLayerName = (Enum)2618;
    static constexpr Enum TWAppUnitNotReadyExecFunc = (Enum)2619;
    static constexpr Enum TWAppUnitReadyExecFunc = (Enum)2620;
    static constexpr Enum TWAppUnitAPISupportLayer = (Enum)2621;
    static constexpr Enum TWAppGenPrimitiveStrClass = (Enum)2622;
    static constexpr Enum TWCMakeMainOutFile = (Enum)2623;
    static constexpr Enum TWBuildTargetsJsonFile = (Enum)2624;
    static constexpr Enum TWCMakePresetsOutFile = (Enum)2625;
    static constexpr Enum TWLaunchVSJsonFile = (Enum)2626;
    static constexpr Enum TWTaskVSJsonFile = (Enum)2627;
    static constexpr Enum TWWorkspaceFolderName = (Enum)2628;
    static constexpr Enum TWGenFolderName = (Enum)2629;
    static constexpr Enum TWToolsFolderName = (Enum)2630;
    static constexpr Enum TWBuildFolderName = (Enum)2631;
    static constexpr Enum TWIntFolderName = (Enum)2632;
    static constexpr Enum TWLibFolderName = (Enum)2633;
    static constexpr Enum TWBinFolderName = (Enum)2634;
    static constexpr Enum TWIgnoreFolders = (Enum)2635;
    static constexpr Enum TWLayerConfigPath = (Enum)2636;
    static constexpr Enum TWToolConfigPath = (Enum)2637;
    static constexpr Enum TWSchemaConfigPath = (Enum)2638;
    static constexpr Enum TWBuildConfigPath = (Enum)2639;
    static constexpr Enum TWUserConfigPath = (Enum)2640;
    static constexpr Enum TWCMakeBuildScript = (Enum)2641;
    static constexpr Enum TWPublicInclude = (Enum)2642;
    static constexpr Enum TWPrivateInclude = (Enum)2643;
    static constexpr Enum TWSourceExtensions = (Enum)2644;
    static constexpr Enum TWAppGenExtensions = (Enum)2645;
    static constexpr Enum TWAppGenFilesPaths = (Enum)2646;
    static constexpr Enum TWAppGenAppProdExtension = (Enum)2647;
    static constexpr Enum TWAppGenAppTestExtension = (Enum)2648;
    static constexpr Enum TWAppGenBuildFileExtension = (Enum)2649;
    static constexpr Enum TWOSArchInvalidValues = (Enum)2650;
    static constexpr Enum TWOSArchValidIntelliSenseModes = (Enum)2651;
    static constexpr Enum TWSchemaGenBaseDBPath = (Enum)2652;
    static constexpr Enum TWSchemaGenMasterDBPath = (Enum)2653;
    static constexpr Enum TWDefaultBuildTrunk = (Enum)2654;
    static constexpr Enum APPGEN_CMDLINE = (Enum)2655;
    static constexpr Enum APP_NAME = (Enum)2656;
    static constexpr Enum UNNAMED_PARM = (Enum)2657;
    static constexpr Enum build_trunk = (Enum)2658;
    static constexpr Enum help = (Enum)2659;
    static constexpr Enum version = (Enum)2660;
    static constexpr Enum clean = (Enum)2661;
    static constexpr Enum PRODUCT_APPUNIT_INFO = (Enum)2662;
    static constexpr Enum APPUNIT = (Enum)2663;
    static constexpr Enum IS_TEST = (Enum)2664;
    static constexpr Enum APPGEN_PRODUCT = (Enum)2665;
    static constexpr Enum LAYER = (Enum)2666;
    static constexpr Enum TEST_LAYER = (Enum)2667;
    static constexpr Enum BUILD_LAYER = (Enum)2668;
    static constexpr Enum IS_DISABLED = (Enum)2669;
    static constexpr Enum ADMIN_TIER = (Enum)2670;
    static constexpr Enum SERVER_TIER = (Enum)2671;
    static constexpr Enum CLIENT_TIER = (Enum)2672;
    static constexpr Enum PRESENTATION_TIER = (Enum)2673;
    static constexpr Enum IS_DIRECT_BUILD = (Enum)2674;
    static constexpr Enum INPUT_APPUNITS = (Enum)2675;
    static constexpr Enum IS_CMDLINE_TOOL = (Enum)2676;
    static constexpr Enum APPLICATION_TYPE = (Enum)2677;
    static constexpr Enum HAS_APISUPPORT_LAYER = (Enum)2678;
    static constexpr Enum HAS_NO_BOOT_SCHEMA = (Enum)2679;
    static constexpr Enum IS_INTERACTIVE_ONLY = (Enum)2680;
    static constexpr Enum IS_STANDALONE = (Enum)2681;
    static constexpr Enum IS_SINGLE_PHYSICAL_TIER = (Enum)2682;
    static constexpr Enum PRODUCT_SCHEMA = (Enum)2683;
    static constexpr Enum TWAppProductTierFilter = (Enum)2684;
    static constexpr Enum TWAppProductToolKitFilter = (Enum)2685;
    static constexpr Enum TWAppProductTargetFilter = (Enum)2686;
    static constexpr Enum APPGEN_API = (Enum)2687;
    static constexpr Enum API_HANDLER = (Enum)2688;
    static constexpr Enum IS_BOOTSTRAP = (Enum)2689;
    static constexpr Enum REQ_OBJECT_SCHEMA = (Enum)2690;
    static constexpr Enum RESP_OBJECT_SCHEMA = (Enum)2691;
    static constexpr Enum REQ_CONTEXT_OBJECT_SCHEMA = (Enum)2692;
    static constexpr Enum RESP_CONTEXT_OBJECT_SCHEMA = (Enum)2693;
    static constexpr Enum APPGEN_APPCODE = (Enum)2694;
    static constexpr Enum APPGEN_APPUNIT = (Enum)2695;
    static constexpr Enum TIER_TYPE = (Enum)2696;
    static constexpr Enum USES = (Enum)2697;
    static constexpr Enum APPSIGNAL_HANDLER = (Enum)2698;
    static constexpr Enum TESTED_APPUNIT = (Enum)2699;
    static constexpr Enum CONSUMES_API = (Enum)2700;
    static constexpr Enum CONSUMES_SCHEMA = (Enum)2701;
    static constexpr Enum QUALIFIED_VALUES = (Enum)2702;
    static constexpr Enum QUALIFIER = (Enum)2703;
    static constexpr Enum APPGEN_APP_CONSTANT = (Enum)2704;
    static constexpr Enum INDEX = (Enum)2705;
    static constexpr Enum IS_APPSTRING = (Enum)2706;
    static constexpr Enum APPGEN_APPCONSTANT_SCOPE = (Enum)2707;
    static constexpr Enum APPGEN_APP_OPTION = (Enum)2708;
    static constexpr Enum DISABLED_PRODUCTS = (Enum)2709;
    static constexpr Enum APPGEN_APPOPTION_SCOPE = (Enum)2710;
    static constexpr Enum DBA_INPUT_FILE_NAME = (Enum)2711;
    static constexpr Enum DBA_OUTPUT_FILE_NAME = (Enum)2712;
    static constexpr Enum FILE_PATH = (Enum)2713;
    static constexpr Enum FILE_TYPE = (Enum)2714;
    static constexpr Enum DB_OBJ = (Enum)2715;
    static constexpr Enum Employees = (Enum)2716;
    static constexpr Enum Employee = (Enum)2717;
    static constexpr Enum Name = (Enum)2718;
    static constexpr Enum Salary = (Enum)2719;
    static constexpr Enum Address = (Enum)2720;
    static constexpr Enum Nominee = (Enum)2721;
    static constexpr Enum Addresses = (Enum)2722;
    static constexpr Enum Details = (Enum)2723;
    static constexpr Enum HomeNum = (Enum)2724;
    static constexpr Enum OrgDetails = (Enum)2725;
    static constexpr Enum Skills = (Enum)2726;
    static constexpr Enum Contact = (Enum)2727;
    static constexpr Enum Contact_Number = (Enum)2728;
    static constexpr Enum Nominee_Name = (Enum)2729;
    static constexpr Enum Relationship = (Enum)2730;
    static constexpr Enum line = (Enum)2731;
    static constexpr Enum PhoneNo = (Enum)2732;
    static constexpr Enum HomeAddress = (Enum)2733;
    static constexpr Enum OfficeAddress = (Enum)2734;
    static constexpr Enum line1 = (Enum)2735;
    static constexpr Enum line2 = (Enum)2736;
    static constexpr Enum Manager = (Enum)2737;
    static constexpr Enum Department = (Enum)2738;
    static constexpr Enum PhoneNums = (Enum)2739;
    static constexpr Enum OfficeNum = (Enum)2740;
    static constexpr Enum CSharp = (Enum)2741;
    static constexpr Enum Ubuntu = (Enum)2742;
    static constexpr Enum INTEG_BILLING_OBJ = (Enum)2743;
    static constexpr Enum Vouchers = (Enum)2744;
    static constexpr Enum Voucher = (Enum)2745;
    static constexpr Enum RevChargeApplicable = (Enum)2746;
    static constexpr Enum EcommerceGstin = (Enum)2747;
    static constexpr Enum DocumentDetails = (Enum)2748;
    static constexpr Enum DocumentType = (Enum)2749;
    static constexpr Enum DocumentNumber = (Enum)2750;
    static constexpr Enum DocumentDate = (Enum)2751;
    static constexpr Enum SellerGstin = (Enum)2752;
    static constexpr Enum LegalKey = (Enum)2753;
    static constexpr Enum TradeKey = (Enum)2754;
    static constexpr Enum SellerEmail = (Enum)2755;
    static constexpr Enum BuyerGstin = (Enum)2756;
    static constexpr Enum BuyerLegalKey = (Enum)2757;
    static constexpr Enum BuyerTradeKey = (Enum)2758;
    static constexpr Enum BuyerEmail = (Enum)2759;
    static constexpr Enum VoucherNum = (Enum)2760;
    static constexpr Enum VoucherDt = (Enum)2761;
    static constexpr Enum Items = (Enum)2762;
    static constexpr Enum Item = (Enum)2763;
    static constexpr Enum SequenceNumber = (Enum)2764;
    static constexpr Enum ItemDescription = (Enum)2765;
    static constexpr Enum HsnCode = (Enum)2766;
    static constexpr Enum BilledQuantity = (Enum)2767;
    static constexpr Enum UnitPrice = (Enum)2768;
    static constexpr Enum Calculations = (Enum)2769;
    static constexpr Enum Calculation = (Enum)2770;
    static constexpr Enum MethodName = (Enum)2771;
    static constexpr Enum FieldToCalculate = (Enum)2772;
    static constexpr Enum ParentField = (Enum)2773;
    static constexpr Enum DependentFields = (Enum)2774;
    static constexpr Enum Price = (Enum)2775;
    static constexpr Enum Quantity = (Enum)2776;
    static constexpr Enum Percent = (Enum)2777;
    static constexpr Enum MAPPING_OBJ = (Enum)2778;
    static constexpr Enum MappingInfo = (Enum)2779;
    static constexpr Enum Key = (Enum)2780;
    static constexpr Enum Level = (Enum)2781;
    static constexpr Enum Type = (Enum)2782;
    static constexpr Enum Parent = (Enum)2783;
    static constexpr Enum NewFields = (Enum)2784;
    static constexpr Enum NewField = (Enum)2785;
    static constexpr Enum FieldPath = (Enum)2786;
    static constexpr Enum AncestorPath = (Enum)2787;
    static constexpr Enum DependentFieldPath = (Enum)2788;
    static constexpr Enum XPath = (Enum)2789;
    static constexpr Enum MapsTo = (Enum)2790;
    static constexpr Enum MapLevel = (Enum)2791;
    static constexpr Enum EnclosingTagName = (Enum)2792;
    static constexpr Enum EnclosingTagMapLevel = (Enum)2793;
    static constexpr Enum EnclosingTagBegin = (Enum)2794;
    static constexpr Enum IsRepeated = (Enum)2795;
    static constexpr Enum Mapping = (Enum)2796;
    static constexpr Enum SchemaDisplayObj = (Enum)2797;
    static constexpr Enum Field = (Enum)2798;
    static constexpr Enum Repeated = (Enum)2799;
    static constexpr Enum INTEG_PRIMARY_SECTION = (Enum)2800;
    static constexpr Enum TI_DATA_SUMMARY = (Enum)2801;
    static constexpr Enum TI_TOTAL_DATA = (Enum)2802;
    static constexpr Enum TI_NEW_DATA = (Enum)2803;
    static constexpr Enum TI_CURATED_DATA = (Enum)2804;
    static constexpr Enum TI_PUBLISHED_DATA = (Enum)2805;
    static constexpr Enum TI_CURATION_STATUS_TEXT = (Enum)2806;
    static constexpr Enum TRIANGULATION_ID = (Enum)2807;
    static constexpr Enum TRIANGULATION_DETAILS = (Enum)2808;
    static constexpr Enum TO_BE_PUBLISHED = (Enum)2809;
    static constexpr Enum IS_BROADCASTED = (Enum)2810;
    static constexpr Enum SKU_OBJECT = (Enum)2811;
    static constexpr Enum CATALOGUE_ID = (Enum)2812;
    static constexpr Enum ATTRIBUTES = (Enum)2813;
    static constexpr Enum DS_SUMMARY = (Enum)2814;
    static constexpr Enum TI_DATA = (Enum)2815;
    static constexpr Enum SKU_DATA = (Enum)2816;
    static constexpr Enum TRANSACTION_DATA = (Enum)2817;
    static constexpr Enum SENDER = (Enum)2818;
    static constexpr Enum RECEIVER = (Enum)2819;
    static constexpr Enum TO_BE_TRIANGULATED = (Enum)2820;
    static constexpr Enum FILE = (Enum)2821;
    static constexpr Enum SCHEMA_DATATYPE = (Enum)2822;
    static constexpr Enum DSMODULE1 = (Enum)2823;
    static constexpr Enum SKU_TITLE = (Enum)2824;
    static constexpr Enum TWDSCS_CLUSTR_ID = (Enum)2825;
    static constexpr Enum TWDSCS_CLUSTR_ID_GENERATION_TIME = (Enum)2826;
    static constexpr Enum XXX_CLUSTR_ID_PROCUREMENT_FLAG = (Enum)2827;
    static constexpr Enum TRANSACTION = (Enum)2828;
    static constexpr Enum SCHEMA_OBJ = (Enum)2829;
    static constexpr Enum SKU_OBJ = (Enum)2830;
    static constexpr Enum TRANSACTION_OBJ = (Enum)2831;
    static constexpr Enum TI_OBJ = (Enum)2832;
    static constexpr Enum OBJ_ID = (Enum)2833;
    static constexpr Enum CURATION_STATUS = (Enum)2834;
    static constexpr Enum XXX_TWDSCS_SKU = (Enum)2835;
    static constexpr Enum XXX_TWDSCS_CLUSTR_TEMP_ID = (Enum)2836;
    static constexpr Enum XXX_TWDSSC_EXTERNAL_SKU_ENTITY_OBJ = (Enum)2837;
    static constexpr Enum XXX_TWDSCS_SKU_DUID = (Enum)2838;
    static constexpr Enum XXX_TWDSCS_SKU_OBJID = (Enum)2839;
    static constexpr Enum XXX_TWDSCS_CLUSTR_ID_PROCUREMENT_FLAG = (Enum)2840;
    static constexpr Enum XXX_TRANSACTION_PROCESSED_STATE = (Enum)2841;
    static constexpr Enum XXX_TRANSACTION_DETAILS = (Enum)2842;
    static constexpr Enum XXX_TRANSACTION_DATE = (Enum)2843;
    static constexpr Enum XXX_TRANSACTION_ID = (Enum)2844;
    static constexpr Enum XXX_TWDSCS_TRANSACTIONS_OBJ_ORDER_DETAIL = (Enum)2845;
    static constexpr Enum XXX_TWDSCS_TRANSACTIONS_OBJ_QTY = (Enum)2846;
    static constexpr Enum XXX_TWDSCS_TRANSACTIONS_OBJ = (Enum)2847;
    static constexpr Enum XXX_TWDSCS_TRANSACTIONS = (Enum)2848;
    static constexpr Enum XXX_TWDSCS_MAPPED_SKU_WITH_STATUS = (Enum)2849;
    static constexpr Enum XXX_TWDSCS_SKU_OBJECT_ID = (Enum)2850;
    static constexpr Enum XXX_TWDSCS_SKU_MAPPING_STATUS = (Enum)2851;
    static constexpr Enum XXX_TWDSCS_MAPPED_EXTERNAL_SKUS = (Enum)2852;
    static constexpr Enum XXX_TWDSCS_EXTERNAL_SKU_DUID = (Enum)2853;
    static constexpr Enum XXX_TWDSCS_LOCAL_SKU_ENTITY_OBJ = (Enum)2854;
    static constexpr Enum XXX_TWDSCS_INCOMING_TRANSACTED_OBJ = (Enum)2855;
    static constexpr Enum XXX_TWDSCS_EXTERNAL_SKU_EXTERNALOBJID_LOCAlOBJID_PAIR = (Enum)2856;
    static constexpr Enum XXX_TWDSCS_EXTERNAL_SKU_EXTERNAL_OBJID = (Enum)2857;
    static constexpr Enum XXX_TWDSCS_EXTERNAL_SKU_LOCAl_OBJID = (Enum)2858;
    static constexpr Enum XXX_TWDSCS_EXTERNAL_SKU_MAPPED = (Enum)2859;
    static constexpr Enum XXX_TWDSCS_EXTERNAL_SKU_UNMAPPED = (Enum)2860;
    static constexpr Enum XXX_TWDSCS_EXTERNAL_DUID_OBJID_OBJ = (Enum)2861;
    static constexpr Enum XXX_TWDSCS_SENDER_MERCHANT_DUID = (Enum)2862;
    static constexpr Enum INVENTORY = (Enum)2863;
    static constexpr Enum INCOMING_TRANSACTED_MAPPED_SKU = (Enum)2864;
    static constexpr Enum EXTERNAL_DUID_OBJID_LIST = (Enum)2865;
    static constexpr Enum CURATOR_TI_OBJ = (Enum)2866;
    static constexpr Enum SKU_SURVIVOR_ID = (Enum)2867;
    static constexpr Enum SKU_ALIASES = (Enum)2868;
    static constexpr Enum CURATOR_TI_OBJ2 = (Enum)2869;
    static constexpr Enum FULLNAME_COREOBJECT_TEST_OBJ = (Enum)2870;
    static constexpr Enum FIRSTNAME = (Enum)2871;
    static constexpr Enum LASTNAME = (Enum)2872;
    static constexpr Enum TEST_EMBEDDED_OBJ = (Enum)2873;
    static constexpr Enum TEST_ADDRESS = (Enum)2874;
    static constexpr Enum TEST_LINE1 = (Enum)2875;
    static constexpr Enum TEST_LINE2 = (Enum)2876;
    static constexpr Enum TEST_CITY = (Enum)2877;
    static constexpr Enum TEST_PIN = (Enum)2878;
    static constexpr Enum TEST_COMPANY_DETAILS = (Enum)2879;
    static constexpr Enum TEST_NAME = (Enum)2880;
    static constexpr Enum TEST_CONTACT = (Enum)2881;
    static constexpr Enum TEST_EMPLOYEES = (Enum)2882;
    static constexpr Enum TEST_DESIGNATION = (Enum)2883;
    static constexpr Enum TEST_DESCRIBE_OBJECT = (Enum)2884;
    static constexpr Enum TEST_TODAY_DATE = (Enum)2885;
    static constexpr Enum CONTAINER_ID = (Enum)2886;
    static constexpr Enum REPEATED_INTEGER_ID = (Enum)2887;
    static constexpr Enum TEST_DESCRIBE_OBJECT_ALL_TYPES = (Enum)2888;
    static constexpr Enum BOOLEAN_ID = (Enum)2889;
    static constexpr Enum TRIVAL_ID = (Enum)2890;
    static constexpr Enum UNIVERSALID_ID = (Enum)2891;
    static constexpr Enum UNIVERSALAPPID_ID = (Enum)2892;
    static constexpr Enum INTEGER_ID = (Enum)2893;
    static constexpr Enum UINTEGER_ID = (Enum)2894;
    static constexpr Enum NUMBER64_ID = (Enum)2895;
    static constexpr Enum NUMBER128_ID = (Enum)2896;
    static constexpr Enum QNUMBER_ID = (Enum)2897;
    static constexpr Enum DATE_ID = (Enum)2898;
    static constexpr Enum TIME_ID = (Enum)2899;
    static constexpr Enum TIMEOFDAY_ID = (Enum)2900;
    static constexpr Enum TIMEOFDAYEX_ID = (Enum)2901;
    static constexpr Enum OBJID_ID = (Enum)2902;
    static constexpr Enum CONTENTURL_ID = (Enum)2903;
    static constexpr Enum STRING_ID = (Enum)2904;
    static constexpr Enum COREOBJECT_TEST_OBJ1 = (Enum)2905;
    static constexpr Enum COTEST_FILED_11 = (Enum)2906;
    static constexpr Enum COTEST_FILED_12 = (Enum)2907;
    static constexpr Enum COTEST_FILED_13 = (Enum)2908;
    static constexpr Enum COTEST_FILED_14 = (Enum)2909;
    static constexpr Enum COTEST_FILED_15 = (Enum)2910;
    static constexpr Enum COREOBJECT_TEST_OBJ2 = (Enum)2911;
    static constexpr Enum COTEST_FILED_21 = (Enum)2912;
    static constexpr Enum COTEST_FILED_22 = (Enum)2913;
    static constexpr Enum COTEST_FILED_23 = (Enum)2914;
    static constexpr Enum COTEST_FILED_24 = (Enum)2915;
    static constexpr Enum COTEST_FILED_25 = (Enum)2916;
    static constexpr Enum COREOBJECT_TEST_OBJ3 = (Enum)2917;
    static constexpr Enum COTEST_FILED_31 = (Enum)2918;
    static constexpr Enum COTEST_FILED_32 = (Enum)2919;
    static constexpr Enum COTEST_FILED_33 = (Enum)2920;
    static constexpr Enum COTEST_FILED_34 = (Enum)2921;
    static constexpr Enum COTEST_FILED_35 = (Enum)2922;
    static constexpr Enum COREOBJECT_TEST_OBJ4 = (Enum)2923;
    static constexpr Enum COTEST_FILED_41 = (Enum)2924;
    static constexpr Enum COTEST_FILED_42 = (Enum)2925;
    static constexpr Enum COTEST_FILED_43 = (Enum)2926;
    static constexpr Enum COTEST_FILED_44 = (Enum)2927;
    static constexpr Enum COTEST_FILED_45 = (Enum)2928;
    static constexpr Enum COREOBJECT_TEST_EMB = (Enum)2929;
    static constexpr Enum COTEST_FILED1 = (Enum)2930;
    static constexpr Enum TEST_DEPENDENT = (Enum)2931;
    static constexpr Enum TEST_RELATION = (Enum)2932;
    static constexpr Enum TEST_EMPLOYEEADDRESS = (Enum)2933;
    static constexpr Enum TEST_LINE = (Enum)2934;
    static constexpr Enum TEST_EMPLOYEE = (Enum)2935;
    static constexpr Enum TEST_EMPLOYEEID = (Enum)2936;
    static constexpr Enum TEST_MOBILENUM = (Enum)2937;
    static constexpr Enum STUDENTSCHEMA = (Enum)2938;
    static constexpr Enum TEST_OBJ = (Enum)2939;
    static constexpr Enum BOOLID = (Enum)2940;
    static constexpr Enum STUDENTSCHEMAMETA = (Enum)2941;
    static constexpr Enum STUDENT_DETAILS = (Enum)2942;
    static constexpr Enum TW_CORE_PROCESSMGR_TEST_API_SCHEMA = (Enum)2943;
    static constexpr Enum TEST_INP_STRING = (Enum)2944;
    static constexpr Enum GET_STUDENT_PERCENTAGE_REQUEST_SCHEMA = (Enum)2945;
    static constexpr Enum STUDENT_ID = (Enum)2946;
    static constexpr Enum GET_STUDENT_PERCENTAGE_RESPONSE_SCHEMA = (Enum)2947;
    static constexpr Enum STUDENT_PERCENTAGE = (Enum)2948;
    static constexpr Enum GET_STUDENT_PERCNTAGE_QUERY_SCHEMA = (Enum)2949;
    static constexpr Enum SOME_QUERY_RELATED_ID_1 = (Enum)2950;
    static constexpr Enum GET_STUDENT_PERCENTAGE_SCRATCHPAD_SCHEMA = (Enum)2951;
    static constexpr Enum SOME_SCRATCHPAD_RELATED_ID_2 = (Enum)2952;
    static constexpr Enum DONE = (Enum)2953;
    static constexpr Enum GET_STUDENT_DETAIL_REQUEST_SCHEMA = (Enum)2954;
    static constexpr Enum GET_STUDENT_DETAIL_RESPONSE_SCHEMA = (Enum)2955;
    static constexpr Enum STUDENT_NAME = (Enum)2956;
    static constexpr Enum STUDENT_AGE = (Enum)2957;
    static constexpr Enum STUDENT_SUBJECT_ID = (Enum)2958;
    static constexpr Enum GET_STUDENT_DETAIL_QUERY_SCHEMA = (Enum)2959;
    static constexpr Enum SOME_QUERY_RELATED_ID_3 = (Enum)2960;
    static constexpr Enum GET_STUDENT_DETAIL_SCRATCHPAD_SCHEMA = (Enum)2961;
    static constexpr Enum SOME_SCRATCHPAD_RELATED_ID_4 = (Enum)2962;
    static constexpr Enum SOMAPI_REQCONTEXT = (Enum)2963;
    static constexpr Enum FIELD1 = (Enum)2964;
    static constexpr Enum SOMAPI_INPUT = (Enum)2965;
    static constexpr Enum SOMAPI_OUTPUT = (Enum)2966;
    static constexpr Enum MYSCRATCHPAD = (Enum)2967;
    static constexpr Enum SOMEAPI_SCRATCHPAD = (Enum)2968;
    static constexpr Enum GREETAPI_SCRATCHPAD_SCHEMA = (Enum)2969;
    static constexpr Enum GREETMESSAGE = (Enum)2970;
    static constexpr Enum FACTAPI_SCRATCHPAD_SCHEMA = (Enum)2971;
    static constexpr Enum VAL = (Enum)2972;
    static constexpr Enum MULTITASKAPI_SCRATCHPAD_SCHEMA = (Enum)2973;
    static constexpr Enum DATA = (Enum)2974;
    static constexpr Enum MULTIACTIVITYAPI_SCRATCHPAD_SCHEMA = (Enum)2975;
    static constexpr Enum CREATESTAGE = (Enum)2976;
    static constexpr Enum Scenario1ReadDB_SCHEMA = (Enum)2977;
    static constexpr Enum DATA_KEY = (Enum)2978;
    static constexpr Enum DATA_DBID = (Enum)2979;
    static constexpr Enum DATA_OBJ = (Enum)2980;
    static constexpr Enum DATA_OBJS = (Enum)2981;
    static constexpr Enum TW_CORE_COMMMGR_TEST_API_SCHEMA = (Enum)2982;
    static constexpr Enum TEST_STR_FIELD = (Enum)2983;
    static constexpr Enum TEST_BOOL_FIELD = (Enum)2984;
    static constexpr Enum DB_TEST_OBJ = (Enum)2985;
    static constexpr Enum DBSCHEMA1 = (Enum)2986;
    static constexpr Enum DBSCHEMA2 = (Enum)2987;
    static constexpr Enum STUDENT_OBJ = (Enum)2988;
    static constexpr Enum MY_COMPANY_OBJ = (Enum)2989;
    static constexpr Enum DBTEST_EMBEDDED_OBJ = (Enum)2990;
    static constexpr Enum FULLNAME = (Enum)2991;
    static constexpr Enum DATA_DC_TEST_OBJ = (Enum)2992;
    static constexpr Enum TWAPPFIELD1STRID = (Enum)2993;
    static constexpr Enum TWAPPFIELD2VERID = (Enum)2994;
    static constexpr Enum TWAPPFIELD3ISACTIVE = (Enum)2995;
    static constexpr Enum TWAPPFIELD4STRREPEATED = (Enum)2996;
    static constexpr Enum TWAPPFIELD5 = (Enum)2997;
    static constexpr Enum PRIMARY1 = (Enum)2998;
    static constexpr Enum PRIMARY2 = (Enum)2999;
    static constexpr Enum PRIMARY3 = (Enum)3000;
    static constexpr Enum PRIMARY4 = (Enum)3001;
    static constexpr Enum PRIMARY5 = (Enum)3002;
    static constexpr Enum HASH_SECTION1 = (Enum)3003;
    static constexpr Enum HASH_SECTION2 = (Enum)3004;
    static constexpr Enum TW_ADMIN_TEST_1 = (Enum)3005;
    static constexpr Enum TW_ADMIN_TEST_OBJ_1 = (Enum)3006;
    static constexpr Enum TW_ADMIN_TEST_2 = (Enum)3007;
    static constexpr Enum TW_ADMIN_TEST_OBJ_2 = (Enum)3008;
    static constexpr Enum TW_ADMIN_TEST_3 = (Enum)3009;
    static constexpr Enum TW_ADMIN_TEST_OBJ_3 = (Enum)3010;
    static constexpr Enum TW_NAME = (Enum)3011;
    static constexpr Enum TW_ADDRESS = (Enum)3012;
    static constexpr Enum TW_STREET = (Enum)3013;
    static constexpr Enum TEST_NFW_SCP = (Enum)3014;
    static constexpr Enum TW_EVENT_COMPLETED = (Enum)3015;
    static constexpr Enum TW_PREMISE_START_FROM = (Enum)3016;
    static constexpr Enum TW_PREMISE_RESULT = (Enum)3017;
    static constexpr Enum TW_PREMISE_TEST_QUERY_ID = (Enum)3018;
    static constexpr Enum TW_SOME_STRING_DATA = (Enum)3019;
    static constexpr Enum TW_SOME_INT_DATA = (Enum)3020;
    static constexpr Enum TW_SOME_OBJ_DATA = (Enum)3021;
    static constexpr Enum TEST_ADMIN_SERVICES = (Enum)3022;
    static constexpr Enum TEST_ADMIN_TW_QUERY_ID = (Enum)3023;
    static constexpr Enum TEST_ADMIN_TW_LANGUAGE_LIST = (Enum)3024;
    static constexpr Enum MAX = (Enum)3025;
    */
/*
    class Int {

    public:

        static constexpr BaseType UNKNOWN = 0;
        static constexpr BaseType PRIMARY = 1;
        static constexpr BaseType SCHEMA = 2;
        static constexpr BaseType DERIVED_SCHEMA = 3;
        static constexpr BaseType VERSION = 4;
        static constexpr BaseType CONTENT_ID = 5;
        static constexpr BaseType SECTION_START_ID = 6;
        static constexpr BaseType SECTION_END_ID = 7;
        static constexpr BaseType DERIVED_SCHEMA_SECTION = 8;
        static constexpr BaseType START_ID = 9;
        static constexpr BaseType END_ID = 10;
        static constexpr BaseType DERIVED_SCHEMA_OBJECT = 11;
        static constexpr BaseType DERIVED_ID = 12;
        static constexpr BaseType HASH_SECTION_ID = 13;
        static constexpr BaseType DERIVED_SCHEMA_SEC_OBJECT = 14;
        static constexpr BaseType DERIVED_SCHEMA_OBJ_FIELD = 15;
        static constexpr BaseType OBJECT_LIST = 16;
        static constexpr BaseType VALUE = 17;
        static constexpr BaseType HASH_OBJECT = 18;
        static constexpr BaseType GET_INDEXDETAIL_ID = 19;
        static constexpr BaseType GET_OBJID_ID = 20;
        static constexpr BaseType INDEX_OBJECT = 21;
        static constexpr BaseType GET_INDEX_ID = 22;
        static constexpr BaseType AMOUNT = 23;
        static constexpr BaseType QUALIFIED_NUMS = 24;
        static constexpr BaseType EXCHG_RATES = 25;
        static constexpr BaseType QUANTITY = 26;
        static constexpr BaseType UOM_FACTOR = 27;
        static constexpr BaseType RATEX = 28;
        static constexpr BaseType ID_VAL_PAIR1 = 29;
        static constexpr BaseType ID_VAL_PAIR2 = 30;
        static constexpr BaseType INPUT_STRING = 31;
        static constexpr BaseType DATERANGE = 32;
        static constexpr BaseType START_DATE = 33;
        static constexpr BaseType END_DATE = 34;
        static constexpr BaseType DIFF_DAYS = 35;
        static constexpr BaseType PERIOD_STRING = 36;
        static constexpr BaseType TIMERANGE = 37;
        static constexpr BaseType START_TIME = 38;
        static constexpr BaseType END_TIME = 39;
        static constexpr BaseType DIFF_SECS = 40;
        static constexpr BaseType HASHKEY_EXTENDED = 41;
        static constexpr BaseType HASHKEY = 42;
        static constexpr BaseType HASHVALUE = 43;
        static constexpr BaseType HASHSUBOBJECT = 44;
        static constexpr BaseType OBJID = 45;
        static constexpr BaseType BASE_HASH_OBJECT = 46;
        static constexpr BaseType LRUTIMER_PROPERTIES = 47;
        static constexpr BaseType CACHETYPE = 48;
        static constexpr BaseType CACHE_POINTER = 49;
        static constexpr BaseType FAST_TIMER = 50;
        static constexpr BaseType MEDIUM_TIMER = 51;
        static constexpr BaseType SLOW_TIMER = 52;
        static constexpr BaseType LOW_PRIORITY = 53;
        static constexpr BaseType REGULAR_PRIORITY = 54;
        static constexpr BaseType HIGH_PRIORITY = 55;
        static constexpr BaseType ID_PROPERTIES = 56;
        static constexpr BaseType IDTYPE = 57;
        static constexpr BaseType QUARANTINE = 58;
        static constexpr BaseType IDMASK = 59;
        static constexpr BaseType RESERVED_IDS = 60;
        static constexpr BaseType IS_SUB_SHARDED = 61;
        static constexpr BaseType NUMBER_OF_SUB_SHARDS = 62;
        static constexpr BaseType SUB_SHARD_ALIVE_TIME = 63;
        static constexpr BaseType HASHID_PROPERTIES = 64;
        static constexpr BaseType HASHID_STORE_TYPE = 65;
        static constexpr BaseType HASHID_STORE_POINTER = 66;
        static constexpr BaseType HASHMASK = 67;
        static constexpr BaseType HASHINDEX_PROPERTIES = 68;
        static constexpr BaseType HASHINDEX_STORE_POINTER = 69;
        static constexpr BaseType INITIAL_PRIMARY_INDEX_RANGE = 70;
        static constexpr BaseType INDEX_CAPACITY_INCREASE_STEP = 71;
        static constexpr BaseType MAX_INDEX_ELEMS = 72;
        static constexpr BaseType SPLIT_FACTOR = 73;
        static constexpr BaseType DEFAULT_TIME_INDEX_BUCKET_TYPE = 74;
        static constexpr BaseType REFID_BUCKET_FACTOR = 75;
        static constexpr BaseType HASHSTRINGINDEX_PROPERTIES = 76;
        static constexpr BaseType HASHSTRINGINDEX_STORE_POINTER = 77;
        static constexpr BaseType HASHAGGR_PROPERTIES = 78;
        static constexpr BaseType HASHAGGR_STORE_POINTER = 79;
        static constexpr BaseType DATA_PROPERTIES = 80;
        static constexpr BaseType HASHKEY_TYPE = 81;
        static constexpr BaseType SCHEMA_ID = 82;
        static constexpr BaseType LOCAL_INDEX_FIELD = 83;
        static constexpr BaseType LOCAL_STRINGINDEX_FIELD = 84;
        static constexpr BaseType LOCAL_AGGR_FIELD = 85;
        static constexpr BaseType DS_PROPERTIES = 86;
        static constexpr BaseType STORE_TYPE = 87;
        static constexpr BaseType STOREID = 88;
        static constexpr BaseType SUBSTOREID = 89;
        static constexpr BaseType GENERATIONID = 90;
        static constexpr BaseType REPLICAID = 91;
        static constexpr BaseType HASHIDDS_DEFINITION = 92;
        static constexpr BaseType DC_PROPERTIES = 93;
        static constexpr BaseType DC_TYPE = 94;
        static constexpr BaseType DCID = 95;
        static constexpr BaseType DCMGR_PROPERTIES = 96;
        static constexpr BaseType TIERID = 97;
        static constexpr BaseType INDEX_VALUE = 98;
        static constexpr BaseType FIELDID = 99;
        static constexpr BaseType TIME_INDEX_VALUE = 100;
        static constexpr BaseType REFID_INDEX_VALUE = 101;
        static constexpr BaseType STRING_INDEX_VALUE = 102;
        static constexpr BaseType STRING_WORD = 103;
        static constexpr BaseType TIME_FILTER_DETAIL = 104;
        static constexpr BaseType FOR_TIME = 105;
        static constexpr BaseType FROM_TIME = 106;
        static constexpr BaseType TO_TIME = 107;
        static constexpr BaseType INDEX_ELEM_FILTER_DETAIL = 108;
        static constexpr BaseType USE_APPOBJTYPEFILTER = 109;
        static constexpr BaseType APPOBJTYPE_SCHEMAID = 110;
        static constexpr BaseType USE_STRINGFILTER = 111;
        static constexpr BaseType STRINGKEY = 112;
        static constexpr BaseType COMPARE_SCOPE = 113;
        static constexpr BaseType STRING_SCHEMAID = 114;
        static constexpr BaseType USE_TIMEFILTER = 115;
        static constexpr BaseType FROM_TME = 116;
        static constexpr BaseType TIME_SCHEMAID = 117;
        static constexpr BaseType USE_REFIDFILTER = 118;
        static constexpr BaseType REFID = 119;
        static constexpr BaseType REFID_SCHEMAID = 120;
        static constexpr BaseType INDEX_ELEM = 121;
        static constexpr BaseType OBJTYPE = 122;
        static constexpr BaseType INDEX_DATA = 123;
        static constexpr BaseType PARENT_INDEX_ID = 124;
        static constexpr BaseType ID_CAPACITY = 125;
        static constexpr BaseType ID_RANGE_END = 126;
        static constexpr BaseType ID_CURRENT_CAPACITY = 127;
        static constexpr BaseType SUB_INDEX_ID = 128;
        static constexpr BaseType TIME_BUCKET_TYPE = 129;
        static constexpr BaseType TIME_REFERENCE_INDEX = 130;
        static constexpr BaseType TIME_INDEX_ID = 131;
        static constexpr BaseType REFID_INDEX_ID = 132;
        static constexpr BaseType APPLICATION_SESSION_OBJ = 133;
        static constexpr BaseType APPLICATION_NAME = 134;
        static constexpr BaseType APPLICATION_BASENAME = 135;
        static constexpr BaseType BOOTSCHEMADB_INITIALSTATE = 136;
        static constexpr BaseType CORESCHEMADB_INITIALSTATE = 137;
        static constexpr BaseType CORECONFIGDB_INITIALSTATE = 138;
        static constexpr BaseType USERCONFIGDB_INITIALSTATE = 139;
        static constexpr BaseType CACHEDB_INITIALSTATE = 140;
        static constexpr BaseType NETWORK_NAME = 141;
        static constexpr BaseType MACHINE_NAME = 142;
        static constexpr BaseType DEVICE_NAME = 143;
        static constexpr BaseType OS_NAME = 144;
        static constexpr BaseType OS_VERSION = 145;
        static constexpr BaseType OS_LANGUAGE = 146;
        static constexpr BaseType APPLICATION_PATHS_OBJ = 147;
        static constexpr BaseType APPLICATION_PATH = 148;
        static constexpr BaseType APPLICATION_FILENAME = 149;
        static constexpr BaseType BOOTSCHEMA_PATH = 150;
        static constexpr BaseType APPDB_PATH = 151;
        static constexpr BaseType ADMIN_PATH = 152;
        static constexpr BaseType USERDATA_DEFAULT_PATH = 153;
        static constexpr BaseType USERDATA_DEFAULT_BACKUP_PATH = 154;
        static constexpr BaseType BASE_CURRENT_PATH = 155;
        static constexpr BaseType PROCESSIDDB_FILENAME = 156;
        static constexpr BaseType APPLICATION_PARMS_OBJ = 157;
        static constexpr BaseType APPLICATION_PARMS = 158;
        static constexpr BaseType COMPANY_FILENAME = 159;
        static constexpr BaseType MISSING_COMPANY_FILENAME = 160;
        static constexpr BaseType NOACCESS_COMPANY_FILENAME = 161;
        static constexpr BaseType CAPSULE_FILENAME = 162;
        static constexpr BaseType MISSING_CAPSULE_FILENAME = 163;
        static constexpr BaseType NOACCESS_CAPSULE_FILENAME = 164;
        static constexpr BaseType INVALID_FILENAME = 165;
        static constexpr BaseType TWIN_OS_PROCESSID = 166;
        static constexpr BaseType TWIN_RECV_TIME_TICKS = 167;
        static constexpr BaseType TWIN_TRANSFER_CONFIRMED = 168;
        static constexpr BaseType PARMS_HANDED_OVER = 169;
        static constexpr BaseType APPLICATION_TWIN_OBJ = 170;
        static constexpr BaseType START_WINDOW_REQDATA = 171;
        static constexpr BaseType HANDOVER_TWIN_REQDATA = 172;
        static constexpr BaseType COREDISKIO_OPERATION_REQ_PARMS = 173;
        static constexpr BaseType DISK_IO_OPERATION = 174;
        static constexpr BaseType IS_FOR_DISKFILE = 175;
        static constexpr BaseType ABSOLUTE_FILE_PATH = 176;
        static constexpr BaseType BLOCK_SIZE = 177;
        static constexpr BaseType IS_OPEN_FIRST = 178;
        static constexpr BaseType DISK_FILE_SIZE = 179;
        static constexpr BaseType IS_CREATED = 180;
        static constexpr BaseType IS_OVERWRITE = 181;
        static constexpr BaseType IS_WITH_TIME_CHANGE = 182;
        static constexpr BaseType IS_READ_ONLY = 183;
        static constexpr BaseType IS_HIDDEN = 184;
        static constexpr BaseType IS_DIRECT_MODE = 185;
        static constexpr BaseType IS_ASSET_FILE = 186;
        static constexpr BaseType DISK_FILE_POINTER = 187;
        static constexpr BaseType IS_READ_LOCK = 188;
        static constexpr BaseType OFFSET = 189;
        static constexpr BaseType BUFFER = 190;
        static constexpr BaseType SIZE = 191;
        static constexpr BaseType BLOCK_NUMBER = 192;
        static constexpr BaseType TIME_OUT = 193;
        static constexpr BaseType ABSOLUTE_PATH = 194;
        static constexpr BaseType DRIVE_PATH = 195;
        static constexpr BaseType SOURCE_FILE_PATH = 196;
        static constexpr BaseType DEST_FILE_PATH = 197;
        static constexpr BaseType SET_READ_ONLY = 198;
        static constexpr BaseType IS_INCLUDE_HIDDEN = 199;
        static constexpr BaseType COREDISKIO_OPERATION_RESP_PARMS = 200;
        static constexpr BaseType FAIL_PATH = 201;
        static constexpr BaseType FILE_LIST = 202;
        static constexpr BaseType DIR_LIST = 203;
        static constexpr BaseType TIME_STAMP = 204;
        static constexpr BaseType IS_ALREADY_EXISTING = 205;
        static constexpr BaseType IS_DRIVE_VALID = 206;
        static constexpr BaseType HANDLE_DISKIO_REQ_DATA = 207;
        static constexpr BaseType HANDLE_DISKIO_RESP_DATA = 208;
        static constexpr BaseType CONSUME_COMPLETE_HANDOVER_BY_TWIN_REQDATA = 209;
        static constexpr BaseType HASH_INDEX = 210;
        static constexpr BaseType DC_COMPANY_OBJ = 211;
        static constexpr BaseType DC_COMPANY_PATH = 212;
        static constexpr BaseType DC_COMPANY_NAME = 213;
        static constexpr BaseType EVENT_STAGE_REQUESTCONTEXT_SCHEMA = 214;
        static constexpr BaseType STAGE_SCHEMA_ID = 215;
        static constexpr BaseType USER_LANGUAGE = 216;
        static constexpr BaseType USER_ID = 217;
        static constexpr BaseType AUTHENTICATED_USER_ID = 218;
        static constexpr BaseType STAGE_STATUS = 219;
        static constexpr BaseType STAGE_POP = 220;
        static constexpr BaseType STAGE_OWNER = 221;
        static constexpr BaseType STAGE_FUNCTION_PTR = 222;
        static constexpr BaseType STAGE_CONTINUATION_FUNCTION_PTR = 223;
        static constexpr BaseType STAGE_CONTINUATION_CONDITION = 224;
        static constexpr BaseType STAGE_CONTINUATION_API = 225;
        static constexpr BaseType STAGE_CONTINUATION_DESTID = 226;
        static constexpr BaseType STAGE_CONTINUATION_DESTID_TYPE = 227;
        static constexpr BaseType STAGE_APIID = 228;
        static constexpr BaseType STAGE_APIOWNER = 229;
        static constexpr BaseType STAGE_TWAPISTATICFUNC = 230;
        static constexpr BaseType STAGE_APICLASSMEMBERFUNC = 231;
        static constexpr BaseType STAGE_DESTID = 232;
        static constexpr BaseType STAGE_DESTID_TYPE = 233;
        static constexpr BaseType COMMMGR_CALLBACK_FUNC = 234;
        static constexpr BaseType TASKMODE_WAIT_ON_TASK = 235;
        static constexpr BaseType TASKMODE_TASKCONSUMERFUNC = 236;
        static constexpr BaseType TASKMODE_TOTAL_TASKS = 237;
        static constexpr BaseType TASKMODE_SUCCESS_CONDITION = 238;
        static constexpr BaseType TASKMODE_TASKS_DONE = 239;
        static constexpr BaseType TASKMODE_TOTAL_SUCCESS = 240;
        static constexpr BaseType TWEVENT_OBJ = 241;
        static constexpr BaseType TWEVENT_ISEXECUTED = 242;
        static constexpr BaseType TWEVENT_EVENTID = 243;
        static constexpr BaseType TWEVENT_COMMID = 244;
        static constexpr BaseType TWEVENT_PARENTID = 245;
        static constexpr BaseType TWEVENT_TIMEDTASKID = 246;
        static constexpr BaseType TWEVENT_ISTIMEDEVENTPERIODIC = 247;
        static constexpr BaseType TWEvent_INTERESTEDEVENTS = 248;
        static constexpr BaseType EVENT_STAGE_REQUESTCONTEXT = 249;
        static constexpr BaseType EVENT_STAGE_INPUT = 250;
        static constexpr BaseType EVENT_STAGE_OUTPUT = 251;
        static constexpr BaseType EVENT_STAGE_SCRATCHPAD = 252;
        static constexpr BaseType INDIRECT_ROUTE_OBJ = 253;
        static constexpr BaseType NEXT_HOP_DESTID = 254;
        static constexpr BaseType DEST_DESTID_ON_NEXT_HOP = 255;
        static constexpr BaseType NUM_LEGS = 256;
        static constexpr BaseType MTU = 257;
        static constexpr BaseType LAST_STATE = 258;
        static constexpr BaseType LAST_STATE_TIME = 259;
        static constexpr BaseType WIP_STEP = 260;
        static constexpr BaseType PACKET_TYPE = 261;
        static constexpr BaseType NUM_RETRIES_AVAILABLE = 262;
        static constexpr BaseType SUCCEEDED = 263;
        static constexpr BaseType COMPLETION_ALERTABLE_WAIT = 264;
        static constexpr BaseType DIRECT_ROUTE_OBJ = 265;
        static constexpr BaseType IPADDRESS = 266;
        static constexpr BaseType IPID_SOURCE = 267;
        static constexpr BaseType IPID_FOUND_REACHABLE_ONCE = 268;
        static constexpr BaseType SRC_IPID_AS_SEEN_BY_DEST = 269;
        static constexpr BaseType LPTTELEM = 270;
        static constexpr BaseType STATE_CHANGE_ALERTABLE_WAIT = 271;
        static constexpr BaseType PINGING_ON_BASE_DIT_ALERTABLE_WAIT = 272;
        static constexpr BaseType REGISTERED_FOR_PING_ON_BASE_DIT_ALERTABLE_WAIT = 273;
        static constexpr BaseType REACHED_ON_SIMPLE_PORTS_ALERTABLE_WAIT = 274;
        static constexpr BaseType REGULAR_PORTS_REMEDY_SUCCEEDED_ALERTABLE_WAIT = 275;
        static constexpr BaseType REGULAR_PORTS_REMEDY_APPLIED_ALERTABLE_WAIT = 276;
        static constexpr BaseType CONTACTED_ON_SIMPLE_PORTS_ALERTABLE_WAIT = 277;
        static constexpr BaseType REGISTER_WITH_ME_RECEIVED = 278;
        static constexpr BaseType OTHER_DIRECT_IPIDS = 279;
        static constexpr BaseType DEST_OBJ = 280;
        static constexpr BaseType PUID = 281;
        static constexpr BaseType APP_TYPE = 282;
        static constexpr BaseType PRODUCT_ID = 283;
        static constexpr BaseType BUILD_VERSION = 284;
        static constexpr BaseType IS_BOOTSTRAPPED = 285;
        static constexpr BaseType UNIVERSAL_ID = 286;
        static constexpr BaseType DIT_VERSION = 287;
        static constexpr BaseType DIT_PORT = 288;
        static constexpr BaseType SIMPLE_PORT = 289;
        static constexpr BaseType MSG_IDS = 290;
        static constexpr BaseType SRC_DIT_SOCK_ID = 291;
        static constexpr BaseType SRC_DESTID_ON_DEST = 292;
        static constexpr BaseType DIRECT_ROUTE_LPTTOFFSET = 293;
        static constexpr BaseType IOROOT_OBJ = 294;
        static constexpr BaseType IOROOT_TYPE = 295;
        static constexpr BaseType IOROOT_NAME = 296;
        static constexpr BaseType IS_PROCESS_EXCLUSIVE = 297;
        static constexpr BaseType IS_NETWORKED_OR_REMOVABLE = 298;
        static constexpr BaseType IOBASEPATH_IDS = 299;
        static constexpr BaseType IOROOT_ALIASES = 300;
        static constexpr BaseType IOROOT_STATUS = 301;
        static constexpr BaseType PENDING_TASKS_QUEUE_PTR = 302;
        static constexpr BaseType TAF_FILE_INFO = 303;
        static constexpr BaseType IOBASEPATH_ID = 304;
        static constexpr BaseType ACTIVE_TAF_ID = 305;
        static constexpr BaseType DB_INFO = 306;
        static constexpr BaseType DUID = 307;
        static constexpr BaseType MODE = 308;
        static constexpr BaseType IOBASEPATH_OBJ = 309;
        static constexpr BaseType IOROOT_ID = 310;
        static constexpr BaseType IOBASEPATH_NAME = 311;
        static constexpr BaseType IOBASEPATH_STATE = 312;
        static constexpr BaseType FILE_INFO = 313;
        static constexpr BaseType DIR_INFO = 314;
        static constexpr BaseType IOBASEPATH_ALIASES = 315;
        static constexpr BaseType LEADER_PUID = 316;
        static constexpr BaseType ALTERNATE_LEADER_PUID = 317;
        static constexpr BaseType TAF_RUNNING_INFO = 318;
        static constexpr BaseType RUNNING_NUMBER = 319;
        static constexpr BaseType RUNNING_NUMBER_UTT = 320;
        static constexpr BaseType TAF_FILE_DATA = 321;
        static constexpr BaseType ONLINE_PUID = 322;
        static constexpr BaseType OFFLINE_PUID = 323;
        static constexpr BaseType APP_VERSION = 324;
        static constexpr BaseType PROCESS_TYPE = 325;
        static constexpr BaseType PROCESS_CLASS = 326;
        static constexpr BaseType TWDC_SECTION_METADATA_SCHEMA = 327;
        static constexpr BaseType DC_SECTION_CONTENT_LRUTIMER = 328;
        static constexpr BaseType DC_SECTION_MESSAGE_DRIVEN = 329;
        static constexpr BaseType TWDC_METADATA_SCHEMA = 330;
        static constexpr BaseType ID_MAX_BIT_SIZE = 331;
        static constexpr BaseType ID_REUSE = 332;
        static constexpr BaseType ID_QUARANTINE_TIME = 333;
        static constexpr BaseType DC_PURPOSE = 334;
        static constexpr BaseType DC_IS_PERSISTED = 335;
        static constexpr BaseType DC_CONTENT_OBJECT = 336;
        static constexpr BaseType DC_IS_MIRRORED = 337;
        static constexpr BaseType DC_NEED_VERSIONING = 338;
        static constexpr BaseType DC_PRESERVE_HISTORY = 339;
        static constexpr BaseType DC_OPEN_ONLY_IN_EXCLUSIVE_MODE = 340;
        static constexpr BaseType DC_ACCEPTABLE_OPEN_MODES = 341;
        static constexpr BaseType DC_MULTI_SECTION = 342;
        static constexpr BaseType DC_REPLICA_ID = 343;
        static constexpr BaseType DC_GENERATION_ID = 344;
        static constexpr BaseType DC_SHARDED_ACROSS_PROCESS = 345;
        static constexpr BaseType DC_CONTENT_SHARDED_WITHIN_DC = 346;
        static constexpr BaseType DC_SCHEMA_ID = 347;
        static constexpr BaseType DC_FILENAME = 348;
        static constexpr BaseType DC_CREATE_ALWAYS = 349;
        static constexpr BaseType DC_INITIAL_SIZE = 350;
        static constexpr BaseType DC_FILEPATH = 351;
        static constexpr BaseType DC_FILE_EXTENSION = 352;
        static constexpr BaseType DC_FAILED_PATH = 353;
        static constexpr BaseType DC_FILE_TYPE = 354;
        static constexpr BaseType DC_APP_BUILD_VERSION = 355;
        static constexpr BaseType DC_OPEN_MODE = 356;
        static constexpr BaseType DC_OPEN_FAIL_IF_MODE_ERROR = 357;
        static constexpr BaseType DC_OPEN_FAIL_IF_DOESNOTEXIST = 358;
        static constexpr BaseType DC_CREATE_FAIL_IF_EXIST = 359;
        static constexpr BaseType DC_OPEN_CREATE_IF_DOESNOTEXIST = 360;
        static constexpr BaseType DC_RESET_ON_OPEN = 361;
        static constexpr BaseType DC_VERIFY_ON_OPEN = 362;
        static constexpr BaseType DC_RESET_ON_VERIFY = 363;
        static constexpr BaseType DC_OPEN_VALIDATE_BUILD_VERSION = 364;
        static constexpr BaseType DC_APPLICATION_DATA = 365;
        static constexpr BaseType DC_DUID = 366;
        static constexpr BaseType VERSION_OBJECT = 367;
        static constexpr BaseType VERSION_TIME = 368;
        static constexpr BaseType VERSION_BLOCKNUM = 369;
        static constexpr BaseType VERSION_OBJID = 370;
        static constexpr BaseType VERSION_MGMT_BLOCKNUM = 371;
        static constexpr BaseType TWAPI_IS_DUPLICATE_DUID_REQ_OBJ_ID = 372;
        static constexpr BaseType TWAPI_DUID_FLD_ID = 373;
        static constexpr BaseType TWAPI_PUID_FLD_ID = 374;
        static constexpr BaseType TWAPI_RUNNING_NUMBER_FLD_ID = 375;
        static constexpr BaseType TWAPI_IS_DUPLICATE_DUID_RESP_OBJ_ID = 376;
        static constexpr BaseType OPEN_DB_REQUEST = 377;
        static constexpr BaseType DB_TYPE = 378;
        static constexpr BaseType OPEN_MODE = 379;
        static constexpr BaseType WRITE_MODE_IS_MANDATORY = 380;
        static constexpr BaseType OPEN_ACTION = 381;
        static constexpr BaseType QUALIFICATION_MODE = 382;
        static constexpr BaseType BASE_DIRECTORY_PATH = 383;
        static constexpr BaseType DB_SUB_DIRECTORY = 384;
        static constexpr BaseType DB_NAME = 385;
        static constexpr BaseType GENERATION_ID = 386;
        static constexpr BaseType REPLICA_ID = 387;
        static constexpr BaseType REQUEST_STATUS = 388;
        static constexpr BaseType DB_READ_ONLY_DUE_TO_PERMISSIONS = 389;
        static constexpr BaseType OPENDB_SCRATCHPAD = 390;
        static constexpr BaseType TAF_FILE_NAME = 391;
        static constexpr BaseType FILE_HANDLE = 392;
        static constexpr BaseType DISKIO_OP_STATUS = 393;
        static constexpr BaseType TAF_FILES = 394;
        static constexpr BaseType TAF_FILE_CREATED = 395;
        static constexpr BaseType IOBASEPATH_CREATED = 396;
        static constexpr BaseType IOROOT_CREATED = 397;
        static constexpr BaseType TAF_MODEL = 398;
        static constexpr BaseType TAF_FILE_IS_READ_ONLY = 399;
        static constexpr BaseType TAF_FILE_INFO_REPEAT_NDX = 400;
        static constexpr BaseType POTENTIAL_STALE_TAF_INFO = 401;
        static constexpr BaseType TAF_COORDINATION_REQUEST = 402;
        static constexpr BaseType ACTION = 403;
        static constexpr BaseType RUNNING_NUMBER_NDX = 404;
        static constexpr BaseType VERSIONED_DS_BASE_REQUEST = 405;
        static constexpr BaseType REQUESTED_VERSION = 406;
        static constexpr BaseType RESOLVED_VERSION = 407;
        static constexpr BaseType VERSIONED_DS_BASE_SCRATCHPAD = 408;
        static constexpr BaseType VERSION_PRIMARYOBJECT_DS_PTR = 409;
        static constexpr BaseType VERSION_OBJECT_DS_PTR = 410;
        static constexpr BaseType ITERATOR_OBJECT_DS_PTR = 411;
        static constexpr BaseType VERSIONDS_DATA_PTR = 412;
        static constexpr BaseType OBJECT_SUBSTORETYPE = 413;
        static constexpr BaseType ID_ACTION = 414;
        static constexpr BaseType OBJECT_ACTION = 415;
        static constexpr BaseType INDEX_ACTION = 416;
        static constexpr BaseType RESOLVED_OBJID_SCHEMAID = 417;
        static constexpr BaseType RESOLVED_OBJID_CREATED_SCHEMAID = 418;
        static constexpr BaseType VERSIONED_DS_VERSION_REQUEST = 419;
        static constexpr BaseType CREATED_OBJID = 420;
        static constexpr BaseType MODIFIED_OBJID = 421;
        static constexpr BaseType MAIN_DS_FINAL_LASTID = 422;
        static constexpr BaseType HASHID_DS_FINAL_LASTID = 423;
        static constexpr BaseType INDEX_DS_FINAL_LASTID = 424;
        static constexpr BaseType AGGREGATE_DS_FINAL_LASTID = 425;
        static constexpr BaseType VERSIONED_DS_VERSION_SCRATCHPAD = 426;
        static constexpr BaseType NEW_OBJECT = 427;
        static constexpr BaseType EXISTING_OBJECT = 428;
        static constexpr BaseType EDIT_SET = 429;
        static constexpr BaseType EDIT_GET = 430;
        static constexpr BaseType RESOLVED_HASHID = 431;
        static constexpr BaseType OBJECT_RESULT_PTR = 432;
        static constexpr BaseType OBJECT_SCHEMA_PTR = 433;
        static constexpr BaseType DB_BLOCK_PTR = 434;
        static constexpr BaseType DB_DISKOBJ_PTR = 435;
        static constexpr BaseType VERSIONED_DS_HASHID_REQUEST = 436;
        static constexpr BaseType REQUESTED_OBJID = 437;
        static constexpr BaseType REQUESTED_HASHKEY = 438;
        static constexpr BaseType RESOLVED_OBJID = 439;
        static constexpr BaseType RESOLVED_OBJID_CREATED = 440;
        static constexpr BaseType RESOLVED_HASHKEY = 441;
        static constexpr BaseType VERSIONED_DS_HASHID_SCRATCHPAD = 442;
        static constexpr BaseType VERSIONED_DS_OBJECT_REQUEST = 443;
        static constexpr BaseType REQUESTED_PRIORITY = 444;
        static constexpr BaseType RESOLVED_MAIN_VERSION_OBJID = 445;
        static constexpr BaseType VERSIONED_DS_OBJECT_SCRATCHPAD = 446;
        static constexpr BaseType PREPARE_FOR_EDIT = 447;
        static constexpr BaseType OBJECT_BLOCK_INFO = 448;
        static constexpr BaseType OBJECT_VERSION = 449;
        static constexpr BaseType OBJECT_VERSION_UTT = 450;
        static constexpr BaseType WIP_VERSION = 451;
        static constexpr BaseType WIP_VERSION_UTT = 452;
        static constexpr BaseType OBJECT_RESULT_IS_SET = 453;
        static constexpr BaseType OBJECT_RESULT_API_STATUS = 454;
        static constexpr BaseType OBJECT_RESULT_STATUS = 455;
        static constexpr BaseType VERSIONED_DS_INDEX_SCRATCHPAD = 456;
        static constexpr BaseType REQUESTED_INDEX_HASHKEY = 457;
        static constexpr BaseType RESOLVED_INDEX_OBJECT_OBJID = 458;
        static constexpr BaseType RESOLVED_INDEX_OBJECT_OBJID_CREATED = 459;
        static constexpr BaseType INDEX_CONTINUATION_FUNCTION_PTR = 460;
        static constexpr BaseType SUBINDEX_OBJECT_OBJID = 461;
        static constexpr BaseType IS_FRESH_SUBINDEX_OBJECT_OBJID = 462;
        static constexpr BaseType SUBINDEX_ID_CAPACITY = 463;
        static constexpr BaseType SUBINDEX_ID_RANGE_END = 464;
        static constexpr BaseType INDEX_ELEM_OBJTYPE = 465;
        static constexpr BaseType INDEX_ELEM_OBJID = 466;
        static constexpr BaseType IS_TIME_SENSITIVE = 467;
        static constexpr BaseType CURRENT_INDEX_VALUE = 468;
        static constexpr BaseType IS_TIME_BUCKET_CYCLE = 469;
        static constexpr BaseType STRING_INDEX_IS_NEW = 470;
        static constexpr BaseType VERSIONED_DS_ITERATOR_REQUEST = 471;
        static constexpr BaseType RESOLVED_ITERATOR_ID = 472;
        static constexpr BaseType RESOLVED_ITERATOR_UTT = 473;
        static constexpr BaseType RESOLVED_ITERATOR_RESULT_BEGIN_NDX = 474;
        static constexpr BaseType RESOLVED_ITERATOR_RESULT_END_NDX = 475;
        static constexpr BaseType REQUESTED_APPOBJTYPE = 476;
        static constexpr BaseType REQUESTED_REFID = 477;
        static constexpr BaseType REQUESTED_REFID_FIELDID = 478;
        static constexpr BaseType REQUESTED_STRING = 479;
        static constexpr BaseType REQUESTED_MATCH_STYLE = 480;
        static constexpr BaseType REQUESTED_STRING_FIELDID = 481;
        static constexpr BaseType REQUESTED_TIME_FILTER = 482;
        static constexpr BaseType REQUESTED_DIRECTION_IS_BACKWARD = 483;
        static constexpr BaseType REQUESTED_FROM_NDX = 484;
        static constexpr BaseType REQUESTED_NUMBER_OF_IDS = 485;
        static constexpr BaseType FILTERS_IGNORED_IN_RESULT = 486;
        static constexpr BaseType REQUESTED_STRING_WAS_MULTIWORD = 487;
        static constexpr BaseType RESULT_IDLIST = 488;
        static constexpr BaseType RESULT_NO_MORE_IDS = 489;
        static constexpr BaseType RESULT_TOTAL_IDS = 490;
        static constexpr BaseType RESULT_ID_FROM_NDX = 491;
        static constexpr BaseType RESULT_ID_TO_NDX = 492;
        static constexpr BaseType VERSIONED_DS_ITERATOR_SCRATCHPAD = 493;
        static constexpr BaseType CONTINUE_ITERATION = 494;
        static constexpr BaseType INDEX_LIST_PRIMARYINDEXOBJ_HASHKEY = 495;
        static constexpr BaseType INDEX_LIST_PRIMARYINDEXOBJ_OBJID = 496;
        static constexpr BaseType INDEX_LIST_CURRENT_PRIMARYOBJID_NDX = 497;
        static constexpr BaseType INDEX_LIST_SUBINDEXOBJ_OBJID = 498;
        static constexpr BaseType INDEX_LIST_CURRENT_SUBOBJID_NDX = 499;
        static constexpr BaseType INDEX_LIST_CURRENT_OBJID = 500;
        static constexpr BaseType INDEX_LIST_USE_STRINGFILTER = 501;
        static constexpr BaseType INDEX_LIST_STRINGKEY = 502;
        static constexpr BaseType INDEX_LIST_COMPARE_SCOPE = 503;
        static constexpr BaseType INDEX_LIST_STRING_SCHEMAID = 504;
        static constexpr BaseType INDEX_LIST_USE_APPOBJTYPEFILTER = 505;
        static constexpr BaseType INDEX_LIST_APPOBJTYPE_SCHEMAID = 506;
        static constexpr BaseType INDEX_LIST_USE_TIMEFILTER = 507;
        static constexpr BaseType INDEX_LIST_FROMTIME = 508;
        static constexpr BaseType INDEX_LIST_TOTIME = 509;
        static constexpr BaseType INDEX_LIST_TIME_SCHEMAID = 510;
        static constexpr BaseType INDEX_LIST_USE_REFIDFILTER = 511;
        static constexpr BaseType INDEX_LIST_REFID = 512;
        static constexpr BaseType INDEX_LIST_REFID_SCHEMAID = 513;
        static constexpr BaseType INDEX_LIST_NO_MORE_IDS = 514;
        static constexpr BaseType INDEX_LIST_REQUESTED_NUMIDS = 515;
        static constexpr BaseType INDEX_LIST_GATHERED_NUMIDS = 516;
        static constexpr BaseType DS_ITERATOR_OBJECT_KEY = 517;
        static constexpr BaseType ITERATOR_RESOLVED_VERSION = 518;
        static constexpr BaseType ITERATOR_PRIMARYINDEXOBJ_HASHKEY = 519;
        static constexpr BaseType ITERATOR_USE_STRINGFILTER = 520;
        static constexpr BaseType ITERATOR_STRINGKEY = 521;
        static constexpr BaseType ITERATOR_COMPARE_SCOPE = 522;
        static constexpr BaseType ITERATOR_USE_TIMEFILTER = 523;
        static constexpr BaseType ITERATOR_FROMTIME = 524;
        static constexpr BaseType ITERATOR_TOTIME = 525;
        static constexpr BaseType ITERATOR_TIME_SCHEMAID = 526;
        static constexpr BaseType ITERATOR_USE_REFIDFILTER = 527;
        static constexpr BaseType ITERATOR_REFID = 528;
        static constexpr BaseType ITERATOR_REFID_SCHEMAID = 529;
        static constexpr BaseType ITERATOR_OBJECT = 530;
        static constexpr BaseType ITERATOR_COMPLETE = 531;
        static constexpr BaseType RESULTS = 532;
        static constexpr BaseType IS_STRING_INDEX = 533;
        static constexpr BaseType STRING_KEY = 534;
        static constexpr BaseType STRING_PART = 535;
        static constexpr BaseType STRING_HASHID = 536;
        static constexpr BaseType STRING_PART_OBJID = 537;
        static constexpr BaseType STRING_KEY_OBJID = 538;
        static constexpr BaseType LAST_STRING_KEY_OBJID_DONE = 539;
        static constexpr BaseType INDEX_OBJTYPE = 540;
        static constexpr BaseType MAIN_INDEX_OBJID = 541;
        static constexpr BaseType REFID_BUCKET_OBJID = 542;
        static constexpr BaseType RESOLVED_TIME_FROM = 543;
        static constexpr BaseType RESOLVED_TIME_TO = 544;
        static constexpr BaseType RESOLVED_TIME_FIELDID = 545;
        static constexpr BaseType CURRENT_PRIMARY_INDEX_OBJID = 546;
        static constexpr BaseType TIME_BUCKETS_OBJID = 547;
        static constexpr BaseType RESULT_AVBL_FROM = 548;
        static constexpr BaseType RESULT_NUM_IDS = 549;
        static constexpr BaseType WIP_LIST = 550;
        static constexpr BaseType WIP_OBJID = 551;
        static constexpr BaseType WIP_MODIFIED_OBJID = 552;
        static constexpr BaseType MAIN_DS_INITIAL_LASTID = 553;
        static constexpr BaseType HASHID_DS_INITIAL_LASTID = 554;
        static constexpr BaseType INDEX_DS_INITIAL_LASTID = 555;
        static constexpr BaseType AGGREGATE_DS_INITIAL_LASTID = 556;
        static constexpr BaseType QUERY_SCRATCHPAD = 557;
        static constexpr BaseType QUERY_HASHKEY = 558;
        static constexpr BaseType QUERY_OBJID = 559;
        static constexpr BaseType QUERY_DETAILS = 560;
        static constexpr BaseType PARENT_QUERY_DETAILS = 561;
        static constexpr BaseType SOURCE_QUERY_DETAILS = 562;
        static constexpr BaseType QUERY_RANGE_DATA = 563;
        static constexpr BaseType RANGE_FROM = 564;
        static constexpr BaseType RANGE_TO = 565;
        static constexpr BaseType ACTIVE_EVENT_ID = 566;
        static constexpr BaseType ID = 567;
        static constexpr BaseType QUERY_OBJECT = 568;
        static constexpr BaseType QUERY_IS_COMPLETE = 569;
        static constexpr BaseType FORWARD_QUERY_RANGE_DATA = 570;
        static constexpr BaseType REVERSE_QUERY_RANGE_DATA = 571;
        static constexpr BaseType PRIMARY_QUERY_HASHKEY = 572;
        static constexpr BaseType RESOLVED_SOURCE_DCID = 573;
        static constexpr BaseType RESOLVED_APP_OBJTYPE = 574;
        static constexpr BaseType FILTER_QUERY_HASHKEY = 575;
        static constexpr BaseType RESOLVED_PARENT_QUERYID = 576;
        static constexpr BaseType RESOLVED_STRINGKEY = 577;
        static constexpr BaseType RESOLVED_COMPARE_SCOPE = 578;
        static constexpr BaseType RESOLVED_STRING_SCHEMAID = 579;
        static constexpr BaseType RESOLVED_REFID = 580;
        static constexpr BaseType RESOLVED_REFID_SCHEMAID = 581;
        static constexpr BaseType RESOLVED_FROMTIME = 582;
        static constexpr BaseType RESOLVED_TOTIME = 583;
        static constexpr BaseType RESOLVED_TIME_SCHEMAID = 584;
        static constexpr BaseType RIGHTS_QUERY_HASHKEY = 585;
        static constexpr BaseType SORTED_QUERY_HASHKEY = 586;
        static constexpr BaseType RESOLVED_SORT_DIRECTION = 587;
        static constexpr BaseType RESOLVED_SORT_SCHEMAID = 588;
        static constexpr BaseType PRIMARY_QUERY = 589;
        static constexpr BaseType PARENT_QUERY_HASHKEY = 590;
        static constexpr BaseType PARENT_QUERY_ID = 591;
        static constexpr BaseType REQUEST_SOURCEDC = 592;
        static constexpr BaseType REQUEST_APP_OBJTYPE = 593;
        static constexpr BaseType REQUEST_OBJID = 594;
        static constexpr BaseType REQUEST_VERSION = 595;
        static constexpr BaseType REQUEST_FROMTIME = 596;
        static constexpr BaseType REQUEST_TOTIME = 597;
        static constexpr BaseType REQUEST_TIME_SCHEMAID = 598;
        static constexpr BaseType FILTER_SUB_QUERY = 599;
        static constexpr BaseType REQUEST_STRINGKEY = 600;
        static constexpr BaseType REQUEST_COMPARE_SCOPE = 601;
        static constexpr BaseType REQUEST_STRING_SCHEMAID = 602;
        static constexpr BaseType REQUEST_REFID = 603;
        static constexpr BaseType REQUEST_REFID_SCHEMAID = 604;
        static constexpr BaseType RIGHTS_SUB_QUERY = 605;
        static constexpr BaseType REQUEST_AUTHENTICATED_USERID = 606;
        static constexpr BaseType SORTING_SUB_QUERY = 607;
        static constexpr BaseType SORTING_QUERY_HASHKEY = 608;
        static constexpr BaseType REQUEST_SORT_DIRECTION = 609;
        static constexpr BaseType REQUEST_SORT_SCHEMAID = 610;
        static constexpr BaseType INDIVIDUAL_QUERY = 611;
        static constexpr BaseType INDIVIDUAL_QUERY_HASHKEY = 612;
        static constexpr BaseType RANGE_DIRECTION = 613;
        static constexpr BaseType RANGE_NUMBER = 614;
        static constexpr BaseType COMPOUND_QUERY = 615;
        static constexpr BaseType COMPOUND_QUERY_HASHKEY = 616;
        static constexpr BaseType REQUEST = 617;
        static constexpr BaseType CONTACT_PERSON = 618;
        static constexpr BaseType MAILING_NAME = 619;
        static constexpr BaseType SON_OF = 620;
        static constexpr BaseType DAUTHTER_OF = 621;
        static constexpr BaseType ADDRESS = 622;
        static constexpr BaseType FLAT_NUMBER = 623;
        static constexpr BaseType FLOOR_NUMBER = 624;
        static constexpr BaseType BUILDING_NAME = 625;
        static constexpr BaseType NAME_OF_PREMISES_BUILDING = 625; //(Alias of: BUILDING_NAME)
        static constexpr BaseType BUILDING_NUMBER = 626;
        static constexpr BaseType ROAD = 627;
        static constexpr BaseType STREET = 628;
        static constexpr BaseType STREET_NAME = 628; //(Alias of: STREET)
        static constexpr BaseType LANE = 629;
        static constexpr BaseType AREA = 630;
        static constexpr BaseType LOCATION = 631;
        static constexpr BaseType DISTRICT = 632;
        static constexpr BaseType TALUK = 633;
        static constexpr BaseType CITY = 634;
        static constexpr BaseType TOWN = 635;
        static constexpr BaseType VILLAGE = 636;
        static constexpr BaseType STATE = 637;
        static constexpr BaseType COUNTRY = 638;
        static constexpr BaseType COUNTRY_CODE = 639;
        static constexpr BaseType COUNTRY_SUBDIVISION = 640;
        static constexpr BaseType PO_BOX_NUMBER = 641;
        static constexpr BaseType PIN_CODE = 642;
        static constexpr BaseType POST_CODE = 643;
        static constexpr BaseType STD_CODE = 644;
        static constexpr BaseType PHONE_NO = 645;
        static constexpr BaseType TELEPHONE_NO = 645; //(Alias of: PHONE_NO)
        static constexpr BaseType MOBILE_NO = 646;
        static constexpr BaseType FAX_NO = 647;
        static constexpr BaseType EMAIL = 648;
        static constexpr BaseType CC_EMAIL = 649;
        static constexpr BaseType WEBSITE = 650;
        static constexpr BaseType PLUS_CODE_ADDRESS = 651;
        static constexpr BaseType HSN_CODE = 652;
        static constexpr BaseType HSN = 652; //(Alias of: HSN_CODE)
        static constexpr BaseType HSN_DESCRIPTION = 653;
        static constexpr BaseType SAC = 654;
        static constexpr BaseType SAC_CODE = 654; //(Alias of: SAC)
        static constexpr BaseType SAC_DESCRIPTION = 655;
        static constexpr BaseType NATURE_OF_TRANSACTION = 656;
        static constexpr BaseType REVERSE_CHARGE_APPLICABLE = 657;
        static constexpr BaseType REVERSE_CHARGE_RATE = 658;
        static constexpr BaseType STATE_NAME = 659;
        static constexpr BaseType APPLICABLE_FROM = 660;
        static constexpr BaseType CALCULATION_TYPE = 661;
        static constexpr BaseType SLAB_RATE_APPLICABLE = 662;
        static constexpr BaseType UPTO_ITEM_RATE = 663;
        static constexpr BaseType TAX_TYPE = 664;
        static constexpr BaseType COMPUTED_ON = 665;
        static constexpr BaseType COMPUTE_BASED_ON_ITEM_RATE = 666;
        static constexpr BaseType IGST_RATE = 667;
        static constexpr BaseType CGST_RATE = 668;
        static constexpr BaseType SGST_RATE = 669;
        static constexpr BaseType CESS_RATE = 670;
        static constexpr BaseType STATE_CESS_RATE = 671;
        static constexpr BaseType VALUATION_TYPE = 672;
        static constexpr BaseType TYPE_OF_SUPPLY = 673;
        static constexpr BaseType NOTIFICATION_DATE = 674;
        static constexpr BaseType NOTIFICATION_NUMBER = 675;
        static constexpr BaseType REPORTING_UNIT_OF_MEASURE = 676;
        static constexpr BaseType NAME = 677;
        static constexpr BaseType PARENT = 678;
        static constexpr BaseType TYPE = 679;
        static constexpr BaseType IS_SUB_LEDGER = 680;
        static constexpr BaseType IS_REVENUE = 681;
        static constexpr BaseType ALLOCATION_METHOD = 682;
        static constexpr BaseType IS_NETT_BAL_FOR_REPORTING = 683;
        static constexpr BaseType METHOD_OF_ALLOCATION_IN_PURCHASE = 684;
        static constexpr BaseType TCS_APPLICABLE = 685;
        static constexpr BaseType TDS_APPLICABLE = 686;
        static constexpr BaseType MAINTAIN_BILLWISE = 687;
        static constexpr BaseType COST_CENTRE_ON = 688;
        static constexpr BaseType OPENING_BALANCE = 689;
        static constexpr BaseType CLOSING_BALANCE = 690;
        static constexpr BaseType COMPUTE_INTEREST_ON_BILLWISE = 691;
        static constexpr BaseType SECTION = 692;
        static constexpr BaseType PAYMENT_CODE = 693;
        static constexpr BaseType REMITTANCE_CODE = 694;
        static constexpr BaseType RATE_FOR_INDIVIDUALS_OR_HUF_WITH_PAN = 695;
        static constexpr BaseType RATE_FOR_OTHER_DEDUCTED_TYPES_WITH_PAN = 696;
        static constexpr BaseType IS_ZERO_RATED = 697;
        static constexpr BaseType THRESHOLD_LIMIT = 698;
        static constexpr BaseType EXEMPTION_LIMIT = 698; //(Alias of: THRESHOLD_LIMIT)
        static constexpr BaseType DEDUCTEE_REFERENCE = 699;
        static constexpr BaseType TAX_IDENTIFICATION_NUMBER = 700;
        static constexpr BaseType UNIQUE_IDENTIFICATION_NUMBER = 700; //(Alias of: TAX_IDENTIFICATION_NUMBER)
        static constexpr BaseType NAME_AS_ON_PAN = 701;
        static constexpr BaseType RATE_FOR_OTHER_COLLECTEE_TYPES_WITH_PAN = 702;
        static constexpr BaseType RATE_FOR_OTHER_COLLECTEE_TYPES_WITHOUT_PAN = 703;
        static constexpr BaseType TYPE_OF_SERVICE = 704;
        static constexpr BaseType SERVICE_TAX_RATE = 705;
        static constexpr BaseType EDUCATION_CESS_RATE = 706;
        static constexpr BaseType SECONDARY_EDUCATION_CESS_RATE = 707;
        static constexpr BaseType SWATCHH_BHARAT_CESS_RATE = 708;
        static constexpr BaseType KRISHI_KALYAN_CESS_RATE = 709;
        static constexpr BaseType TARIFF_NAME = 710;
        static constexpr BaseType RATE = 711;
        static constexpr BaseType DESCRIPTION = 712;
        static constexpr BaseType NOTES = 713;
        static constexpr BaseType TYPE_OF_LEDGER = 714;
        static constexpr BaseType PAN = 715;
        static constexpr BaseType INCOME_TAX_NUMBER = 715; //(Alias of: PAN)
        static constexpr BaseType IT_NUMBER = 715; //(Alias of: PAN)
        static constexpr BaseType PAN_STATUS = 716;
        static constexpr BaseType TIN = 717;
        static constexpr BaseType SALES_TAX_NUMBER = 717; //(Alias of: TIN)
        static constexpr BaseType CST_NUMBER = 718;
        static constexpr BaseType CENTRAL_TAX_NUMBER = 718; //(Alias of: CST_NUMBER)
        static constexpr BaseType ECC_NUMBER = 719;
        static constexpr BaseType IMPORTER_ECC_NUMBER = 720;
        static constexpr BaseType IEC_NUMBER = 721;
        static constexpr BaseType RANGE = 722;
        static constexpr BaseType DIVISION = 723;
        static constexpr BaseType COMMISSIONNERATE = 724;
        static constexpr BaseType JURISDICATION_APPLICABILITY_DETAILS = 725;
        static constexpr BaseType REGISTRATION_TYPE = 726;
        static constexpr BaseType ASSESSEE_OF_OTHER_TERRITORY = 727;
        static constexpr BaseType GSTIN = 728;
        static constexpr BaseType UIN = 728; //(Alias of: GSTIN)
        static constexpr BaseType E_COMMERCE_OPERATOR = 729;
        static constexpr BaseType CONSIDER_PARTY_AS_DEEMED_EXPORTER_FOR_PURCHASES = 730;
        static constexpr BaseType PARTY_TYPE = 731;
        static constexpr BaseType TRANSPORTER = 732;
        static constexpr BaseType SERVICE_TAX_REGISTRATION_NUMBER = 733;
        static constexpr BaseType IS_PARTY_AN_ASSOCIATED_ENTERPRISE = 734;
        static constexpr BaseType DOES_PARTY_BELONG_TO_TAXABLE_TERRITORY = 735;
        static constexpr BaseType ACCOUNT_HOLDERS_NAME = 736;
        static constexpr BaseType ACCOUNT_NUMBER = 737;
        static constexpr BaseType IFS_CODE = 738;
        static constexpr BaseType IFSC = 738; //(Alias of: IFS_CODE)
        static constexpr BaseType SWIFT_CODE = 739;
        static constexpr BaseType BANK_NAME = 740;
        static constexpr BaseType BRANCH = 741;
        static constexpr BaseType BSR_CODE = 742;
        static constexpr BaseType CLIENT_CODE = 743;
        static constexpr BaseType EFFECTIVE_DATE_FOR_RECONCILIATION = 744;
        static constexpr BaseType CHEQUE_BOOK = 745;
        static constexpr BaseType CHECK_BOOK = 745; //(Alias of: CHEQUE_BOOK)
        static constexpr BaseType FROM_NUMBER = 746;
        static constexpr BaseType TO_NUMBER = 747;
        static constexpr BaseType NUMBER_OF_CHEQUES = 748;
        static constexpr BaseType NUMBER_OF_CHECKS = 748; //(Alias of: NUMBER_OF_CHEQUES)
        static constexpr BaseType CHEQUE_BOOK_NAME = 749;
        static constexpr BaseType CHECK_BOOK_NAME = 749; //(Alias of: CHEQUE_BOOK_NAME)
        static constexpr BaseType CHEQUE_PRINTING = 750;
        static constexpr BaseType CHECK_PRINTING = 750; //(Alias of: CHEQUE_PRINTING)
        static constexpr BaseType USE_NOTIONAL_BANK_FOR_POST_DATED_VOUCHER = 751;
        static constexpr BaseType CALCULATED_INTEREST_BASED_ON = 752;
        static constexpr BaseType INCLUDE_TRANSACTION_DATE_FOR_INTEREST_CALCULATION_FOR_AMOUNTS_ADDED = 753;
        static constexpr BaseType INCLUDE_TRANSACTION_DATE_FOR_INTEREST_CALCULATION_FOR_AMOUNTS_DEDUCTED = 754;
        static constexpr BaseType INTEREST_STYLE = 755;
        static constexpr BaseType INTEREST_BALANCES = 756;
        static constexpr BaseType ACCOUNT_TYPE = 757;
        static constexpr BaseType BANK_LOCATION = 758;
        static constexpr BaseType BENEFICIARY_CODE = 759;
        static constexpr BaseType COMPANY_BANK = 760;
        static constexpr BaseType BRANCH_NAME = 761;
        static constexpr BaseType CHEQUE_CROSS_COMMENT = 762;
        static constexpr BaseType CHECK_CROSS_COMMENT = 762; //(Alias of: CHEQUE_CROSS_COMMENT)
        static constexpr BaseType DEFAULT_TRANSACTION_TYPE = 763;
        static constexpr BaseType DELIVERY_MODE = 764;
        static constexpr BaseType DELIVERY_TO = 765;
        static constexpr BaseType MICR_CODE = 766;
        static constexpr BaseType PAYABLE_LOCATION = 767;
        static constexpr BaseType PAYMENT_FAVOURING = 768;
        static constexpr BaseType PRINT_LOCATION = 769;
        static constexpr BaseType TRANSFER_MODE = 770;
        static constexpr BaseType ALLOCATE_REVENUE_ITEMS = 771;
        static constexpr BaseType ALLOCATE_NON_REVENUE_ITEMS = 772;
        static constexpr BaseType USE_FOR_JOB_COSTING = 773;
        static constexpr BaseType SYMBOL = 774;
        static constexpr BaseType FORMAL_NAME = 775;
        static constexpr BaseType ISO_CURRENCY_CODE = 776;
        static constexpr BaseType NUMBER_OF_DECIMAL_PLACES = 777;
        static constexpr BaseType NUMBER_OF_DECIMAL_PLACES_FOR_AMOUNT_IN_WORDS = 778;
        static constexpr BaseType DECIMAL_SYMBOL = 779;
        static constexpr BaseType SHOW_AMOUNT_IN_MILLIONS = 780;
        static constexpr BaseType SUFFIX_SYMBOL_TO_AMOUNT = 781;
        static constexpr BaseType ADD_SPACE_BETWEEN_AMOUNT_AND_SYMBOL = 782;
        static constexpr BaseType WORD_REPRESENTING_AMOUNT_AFTER_DECIMAL = 783;
        static constexpr BaseType NARRATION = 784;
        static constexpr BaseType DATE = 785;
        static constexpr BaseType CURRENCY = 786;
        static constexpr BaseType STANDARD_RATE = 787;
        static constexpr BaseType SELLING_RATE = 788;
        static constexpr BaseType BUYING_RATE = 789;
        static constexpr BaseType FROM_DATE = 790;
        static constexpr BaseType TO_DATE = 791;
        static constexpr BaseType BUDGET_TYPE = 792;
        static constexpr BaseType ACCOUNT_NAME = 793;
        static constexpr BaseType COST_CENTRE = 794;
        static constexpr BaseType CAN_QUANTIES_BE_ADDED = 795;
        static constexpr BaseType ITEM_NAME = 677; //(Alias of: NAME)
        static constexpr BaseType PART_NUMBER = 796;
        static constexpr BaseType MANUFACTURER_PART_NUMBER = 797;
        static constexpr BaseType MPN = 797; //(Alias of: MANUFACTURER_PART_NUMBER)
        static constexpr BaseType NATO_STOCK_NUMBER = 798;
        static constexpr BaseType NSN = 798; //(Alias of: NATO_STOCK_NUMBER)
        static constexpr BaseType BARCODE = 799;
        static constexpr BaseType STOCK_KEEPING_UNIT = 799; //(Alias of: BARCODE)
        static constexpr BaseType SKU = 799; //(Alias of: BARCODE)
        static constexpr BaseType GLOBAL_TRADE_ITEM_NUMBER = 800;
        static constexpr BaseType GTIN12 = 801;
        static constexpr BaseType GTIN13 = 802;
        static constexpr BaseType GTIN14 = 803;
        static constexpr BaseType GTIN8 = 804;
        static constexpr BaseType EAN = 804; //(Alias of: GTIN8)
        static constexpr BaseType USER_DESCRIPTION = 805;
        static constexpr BaseType ITEM_DESCRIPTION = 712; //(Alias of: DESCRIPTION)
        static constexpr BaseType CATEGORY = 806;
        static constexpr BaseType BRAND = 807;
        static constexpr BaseType COLOUR = 808;
        static constexpr BaseType COLOR = 809;
        static constexpr BaseType MODEL = 810;
        static constexpr BaseType UNITS_OF_MEASUREMENT = 811;
        static constexpr BaseType ALTERNATE_UNITS = 812;
        static constexpr BaseType CONVERSION_FACTOR = 813;
        static constexpr BaseType BATCH_NUMBER = 814;
        static constexpr BaseType LOT_NUMBER = 815;
        static constexpr BaseType MFG_DATE = 816;
        static constexpr BaseType MANUFACTURING_DATE = 816; //(Alias of: MFG_DATE)
        static constexpr BaseType EXPIRY_DATE = 817;
        static constexpr BaseType ACTUAL_QUANTITY = 818;
        static constexpr BaseType BILLED_QUANTITY = 819;
        static constexpr BaseType DISCOUNT = 820;
        static constexpr BaseType TRACK_MFG_DATE = 821;
        static constexpr BaseType EXPIRY_DATE_ON = 822;
        static constexpr BaseType COSTING_METHOD = 823;
        static constexpr BaseType MRP = 824;
        static constexpr BaseType EXCISE_MRP_RATE = 825;
        static constexpr BaseType EXCISE_MRP_ABATEMENT = 826;
        static constexpr BaseType PRICE_DISCOUNT = 827;
        static constexpr BaseType EFFECTIVE_DATE = 828;
        static constexpr BaseType SERIAL_NUMBER = 829;
        static constexpr BaseType ADDITIONAL_PROPERTY = 830;
        static constexpr BaseType AGGREGATE_RATING = 831;
        static constexpr BaseType AUDIENCE = 832;
        static constexpr BaseType AWARD = 833;
        static constexpr BaseType DEPTH = 834;
        static constexpr BaseType ENERGY_CONSUMPTION_DETAILS = 835;
        static constexpr BaseType HAS_MERCHANT_RETURN_POLICY = 836;
        static constexpr BaseType HEIGHT = 837;
        static constexpr BaseType ACCESSORY_FOR = 838;
        static constexpr BaseType SPARE_PART_FOR = 839;
        static constexpr BaseType CONSUMABLE_FOR = 840;
        static constexpr BaseType RELATED_TO = 841;
        static constexpr BaseType SIMILAR_TO = 842;
        static constexpr BaseType IS_VARIANT_OF = 843;
        static constexpr BaseType ITEM_CONDITION = 844;
        static constexpr BaseType LOGO = 845;
        static constexpr BaseType MANUFACTURER = 846;
        static constexpr BaseType MATERIAL = 847;
        static constexpr BaseType OFFERS = 848;
        static constexpr BaseType PATTERN = 849;
        static constexpr BaseType PRODUCTION_DATE = 850;
        static constexpr BaseType PURCHASE_DATE = 851;
        static constexpr BaseType RELEASE_DATE = 852;
        static constexpr BaseType SLOGAN = 853;
        static constexpr BaseType WEIGHT = 854;
        static constexpr BaseType WIDTH = 855;
        static constexpr BaseType ADDITIONAL_TYPE = 856;
        static constexpr BaseType ALTERNATE_NAME = 857;
        static constexpr BaseType IMAGE = 858;
        static constexpr BaseType URL = 859;
        static constexpr BaseType INVENTORY_LEVEL = 860;
        static constexpr BaseType GTIN = 861;
        static constexpr BaseType HAS_ENERGY_CONSUMPTION_DETAILS = 862;
        static constexpr BaseType PRODUCT_GROUP = 863;
        static constexpr BaseType IDENTIFIER = 864;
        static constexpr BaseType SUB_BRAND = 865;
        static constexpr BaseType VARIANT = 866;
        static constexpr BaseType COMPANY = 867;
        static constexpr BaseType PRODUCT_CATEGORY = 868;
        static constexpr BaseType SEGMENT = 869;
        static constexpr BaseType NET_WEIGHT = 870;
        static constexpr BaseType CAPACITY_COMPOSITE = 871;
        static constexpr BaseType TRADABLE_UNIT = 872;
        static constexpr BaseType PACK_TYPE = 873;
        static constexpr BaseType PACK_SIZE = 874;
        static constexpr BaseType SUITABLE_FOR = 875;
        static constexpr BaseType SIZE_SIMPLE = 876;
        static constexpr BaseType MODEL_NUMBER = 877;
        static constexpr BaseType COVER_MATERIAL = 878;
        static constexpr BaseType SHAPE = 879;
        static constexpr BaseType PATTERN_DESIGN = 880;
        static constexpr BaseType FINISHING = 881;
        static constexpr BaseType GRADE = 882;
        static constexpr BaseType DIAMETER = 883;
        static constexpr BaseType DIAMETRE = 883; //(Alias of: DIAMETER)
        static constexpr BaseType ADDITIONAL_INFORMATION = 884;
        static constexpr BaseType PRODUCT_DIMENSIONS = 885;
        static constexpr BaseType COUNTRY_OF_ORIGIN = 886;
        static constexpr BaseType BOOK_VOLUME = 887;
        static constexpr BaseType PAPER_THICKNESS = 888;
        static constexpr BaseType BINDING_TYPE = 889;
        static constexpr BaseType NUMBER_OF_PAGES = 890;
        static constexpr BaseType ISBN_10 = 891;
        static constexpr BaseType ISBN_13 = 892;
        static constexpr BaseType PUBLISHER = 893;
        static constexpr BaseType EDITION = 894;
        static constexpr BaseType GENRE = 895;
        static constexpr BaseType SERIES = 896;
        static constexpr BaseType AUTHOR = 897;
        static constexpr BaseType LANGUAGE = 898;
        static constexpr BaseType GENERIC_NAME = 899;
        static constexpr BaseType SUB_VARIANT = 900;
        static constexpr BaseType FORM = 901;
        static constexpr BaseType FLAVOUR = 902;
        static constexpr BaseType FRAGRANCE = 903;
        static constexpr BaseType VOLUME = 904;
        static constexpr BaseType MEDICAL_PRACTICE = 905;
        static constexpr BaseType PRESCRIPTION_DRUG_CLASS = 906;
        static constexpr BaseType CERTIFICATIONS = 907;
        static constexpr BaseType INGREDIENTS = 908;
        static constexpr BaseType COMPOSITION = 909;
        static constexpr BaseType CONCENTRATION = 910;
        static constexpr BaseType USED_FOR = 911;
        static constexpr BaseType COMPATIBLE_WITH = 912;
        static constexpr BaseType FEATURES = 913;
        static constexpr BaseType BENEFITS = 914;
        static constexpr BaseType DOSAGE = 915;
        static constexpr BaseType STORAGE_INFORMATION = 916;
        static constexpr BaseType WARNINGS = 917;
        static constexpr BaseType SIDE_EFFECTS = 918;
        static constexpr BaseType PACKAGE_DIMENSIONS = 919;
        static constexpr BaseType PACKAGE_CONTENT = 920;
        static constexpr BaseType CAPACITY = 921;
        static constexpr BaseType CAPACITY_SIMPLE = 922;
        static constexpr BaseType POWER_SOURCE = 923;
        static constexpr BaseType VOLTAGE_ = 924;
        static constexpr BaseType FREQUENCY = 925;
        static constexpr BaseType PHASE = 926;
        static constexpr BaseType POWER = 927;
        static constexpr BaseType BATTERY_TYPE = 928;
        static constexpr BaseType ENERGY_RATING = 929;
        static constexpr BaseType CHARGE_TIME = 930;
        static constexpr BaseType CONNECTIVTY = 931;
        static constexpr BaseType APERTURE = 932;
        static constexpr BaseType FIELD_OF_VIEW = 933;
        static constexpr BaseType FOCAL_LENGTH = 934;
        static constexpr BaseType CLOSE_FOCUS_LIMIT = 935;
        static constexpr BaseType MAGNIFICATION = 936;
        static constexpr BaseType FOCAL_RATIO = 937;
        static constexpr BaseType WORKING_PRINCIPLE = 938;
        static constexpr BaseType TEMPERATURE_RANGE = 939;
        static constexpr BaseType INSTALLATION_TYPE = 940;
        static constexpr BaseType COMPUTER_MEMORY_TYPE = 941;
        static constexpr BaseType DISPLAY_TECHNOLOGY = 942;
        static constexpr BaseType HARD_DISK_TECHNOLOGY = 943;
        static constexpr BaseType STORAGE_SIZE = 944;
        static constexpr BaseType DISPLAY_RESOLUTION = 945;
        static constexpr BaseType OPERATING_SYSTEM = 946;
        static constexpr BaseType PROCESSOR_SPEED = 947;
        static constexpr BaseType PROCESSOR_TYPE = 948;
        static constexpr BaseType RAM = 949;
        static constexpr BaseType SCREEN_SIZE = 950;
        static constexpr BaseType CPU_ARCHITECTURE = 951;
        static constexpr BaseType AVERAGE_LIFE = 952;
        static constexpr BaseType TECHNICAL_SPECIFICATIONS = 953;
        static constexpr BaseType WARRANTY = 954;
        static constexpr BaseType GUARANTEE = 955;
        static constexpr BaseType SIZE_COMPOSITE = 956;
        static constexpr BaseType DIMENSIONS = 885; //(Alias of: PRODUCT_DIMENSIONS)
        static constexpr BaseType MATERIAL_THICKNESS = 957;
        static constexpr BaseType PACAKAGE_CONTENT = 958;
        static constexpr BaseType SHELF_LIFE = 959;
        static constexpr BaseType PURITY = 960;
        static constexpr BaseType COMPOSITION_INFORMATION = 961;
        static constexpr BaseType PARTICLE_SIZE = 962;
        static constexpr BaseType FINENESS = 963;
        static constexpr BaseType AGGREGATE_STRENGTH = 964;
        static constexpr BaseType COMPRESSIVE_STRENGTH = 965;
        static constexpr BaseType TENSILE_STRENGTH = 966;
        static constexpr BaseType YIELD_STRENGTH = 967;
        static constexpr BaseType HARDNESS_ = 968;
        static constexpr BaseType CORROSION_RESISTANCE = 969;
        static constexpr BaseType FIRE_RESISTANCE_DURABLITY = 970;
        static constexpr BaseType SPECIFIC_GRAVITY = 971;
        static constexpr BaseType BULK_DENSITY = 972;
        static constexpr BaseType DENSITY = 973;
        static constexpr BaseType SETTING_TIME = 974;
        static constexpr BaseType DRYING_TIME = 975;
        static constexpr BaseType DEGREE_OF_WHITENESS = 976;
        static constexpr BaseType MOISTURE_CONTENT = 977;
        static constexpr BaseType WATER_ABSORPTION = 978;
        static constexpr BaseType WARRANTY_INFORMATION = 979;
        static constexpr BaseType NON_GST_GOODS = 980;
        static constexpr BaseType INELIGIBLE_FOR_INPUT_CREDIT = 981;
        static constexpr BaseType ADDITIOAL_TAX = 982;
        static constexpr BaseType BUSINESS_NATURE = 983;
        static constexpr BaseType CESS_ON_VAT = 984;
        static constexpr BaseType GOODS_NATURE = 985;
        static constexpr BaseType GOODS_TYPE = 986;
        static constexpr BaseType CALCULATED_ON_ACTUAL_QUANTITY = 987;
        static constexpr BaseType LOCAL_ATTITIONAL_TAX_RATE = 988;
        static constexpr BaseType LOCAL_CESS_ON_VAT = 989;
        static constexpr BaseType PARTY_ORGANISATION_TYPE = 990;
        static constexpr BaseType PARTY_ORGANIZATION_TYPE = 990; //(Alias of: PARTY_ORGANISATION_TYPE)
        static constexpr BaseType RATE_OF_VAT = 991;
        static constexpr BaseType VAT_COMMODITY_CODE = 992;
        static constexpr BaseType VAT_COMMODITY_NAME = 993;
        static constexpr BaseType UNIT_QUANTITY_CODE = 994;
        static constexpr BaseType FIRST_UNIT = 995;
        static constexpr BaseType SECOND_UNIT = 996;
        static constexpr BaseType IS_STORAGE_ALLOWED = 997;
        static constexpr BaseType PROJECT_FOR_COSTING = 998;
        static constexpr BaseType USED_FOR_STOCKS_WITH_THIRD_PARTY = 999;
        static constexpr BaseType USED_FOR_THIRD_PARTY_STOCKS_WITH_US = 1000;
        static constexpr BaseType IS_Excise_Tax_Unit = 1001;
        static constexpr BaseType DISPLAY_NAME = 1002;
        static constexpr BaseType DATE_OF_JOINING = 1003;
        static constexpr BaseType EMPLOYEE_NUMBER = 1004;
        static constexpr BaseType DESIGNATION = 1005;
        static constexpr BaseType FUNCTION = 1006;
        static constexpr BaseType GENDER = 1007;
        static constexpr BaseType DATE_OF_BIRTH = 1008;
        static constexpr BaseType BLOOD_GROUP = 1009;
        static constexpr BaseType FATHER_NAME = 1010;
        static constexpr BaseType MOTHER_NAME = 1011;
        static constexpr BaseType SPOUSE_NAME = 1012;
        static constexpr BaseType TRANSACTION_TYPE = 1013;
        static constexpr BaseType APPLICABLE_TAX_REGIME = 1014;
        static constexpr BaseType AADHAAR_NUMBER = 1015;
        static constexpr BaseType UNIVERSAL_ACCOUNT_NUMBER = 1016;
        static constexpr BaseType PF_ACCOUNT_NUMBER = 1017;
        static constexpr BaseType EPS_ACCOUNT_NUMBER = 1018;
        static constexpr BaseType DATE_OF_JOINING_FOR_PF = 1019;
        static constexpr BaseType PRAN = 1020;
        static constexpr BaseType PR_ACCOUNT_NUMBER = 1020; //(Alias of: PRAN)
        static constexpr BaseType ESI_NUMBER = 1021;
        static constexpr BaseType ESI_DISPENSARY_NAME = 1022;
        static constexpr BaseType PASSPORT_NUMBER = 1023;
        static constexpr BaseType COUNTRY_OF_ISSUE = 1024;
        static constexpr BaseType PASSPORT_EXPIRY_DATE = 1025;
        static constexpr BaseType VISA_NUMBER = 1026;
        static constexpr BaseType VISA_EXPIRY_DATE = 1027;
        static constexpr BaseType WORK_PERMIT_NUMBER = 1028;
        static constexpr BaseType CONTRACT_START_DATE = 1029;
        static constexpr BaseType CONTRACT_EXPIRY_DATE = 1030;
        static constexpr BaseType ACCOUNT_NO = 1031;
        static constexpr BaseType CROSS_CHEQUES_USING = 1032;
        static constexpr BaseType CROSS_CHECKS_USING = 1032; //(Alias of: CROSS_CHEQUES_USING)
        static constexpr BaseType EFFECTIVE_FROM = 1033;
        static constexpr BaseType PAY_HEAD_NAME = 1034;
        static constexpr BaseType PAY_HEAD_TYPE = 1035;
        static constexpr BaseType INCOME_TYPE = 1036;
        static constexpr BaseType AFFECT_NET_SALARY = 1037;
        static constexpr BaseType NAME_TO_BE_DISPLAYED_IN_PAY_SLIP = 1038;
        static constexpr BaseType USE_FOR_CALCULATION_OF_GRATUITY = 1039;
        static constexpr BaseType INCOME_TAX_COMPONENT = 1040;
        static constexpr BaseType TAX_CALCULATION_BASIS = 1041;
        static constexpr BaseType DEDUCT_TDS_ACROSS_PERIOD = 1042;
        static constexpr BaseType GST_APPLICABLE_FROM = 1043;
        static constexpr BaseType PERIODICITY_OF_GSTR1 = 1044;
        static constexpr BaseType NATURE_OF_GOODS = 1045;
        static constexpr BaseType TAX_DEDUCTED_AND_COLLECTION_ACCOUNT_NUMBER = 1046;
        static constexpr BaseType TAN = 1046; //(Alias of: TAX_DEDUCTED_AND_COLLECTION_ACCOUNT_NUMBER)
        static constexpr BaseType TAN_REGISTRATION_NUMBER = 1047;
        static constexpr BaseType INCOME_TAX_CIRCLE = 1048;
        static constexpr BaseType INCOME_TAX_WARD = 1049;
        static constexpr BaseType DEDUCTOR_TYPE = 1050;
        static constexpr BaseType DEDUCTOR_BRANCH = 1051;
        static constexpr BaseType DEDUCTOR_DIVISION = 1052;
        static constexpr BaseType NAME_OF_PERSON_RESPONSIBLE = 1053;
        static constexpr BaseType DAUGHTER_OF = 1054;
        static constexpr BaseType VERSION_NUMBER = 1055;
        static constexpr BaseType INVOICE_REFERENCE_NUMBER = 1056;
        static constexpr BaseType BUSINESS_PROCESS_TYPE = 1057;
        static constexpr BaseType INVOICE_NUMBER = 1058;
        static constexpr BaseType INVOICE_ISSUE_DATE = 1059;
        static constexpr BaseType PAYMENT_DUE_DATE = 1060;
        static constexpr BaseType INVOICE_TYPE_CODE = 1061;
        static constexpr BaseType INVOICE_NOTE = 1062;
        static constexpr BaseType VALUE_ADDED_TAX_POINT_DATE = 1063;
        static constexpr BaseType INVOICE_CURRENCY_CODE = 1064;
        static constexpr BaseType VAT_ACCOUNTING_CURRENCY_CODE = 1065;
        static constexpr BaseType BUYER_ACCOUNTING_REFERENCE = 1066;
        static constexpr BaseType BUYER_REFERENCE = 1067;
        static constexpr BaseType DELIVERY_PERIOD = 1068;
        static constexpr BaseType INVOICE_PERIOD = 1069;
        static constexpr BaseType INVOICING_PERIOD_START_DATE = 1070;
        static constexpr BaseType INVOICING_PERIOD_END_DATE = 1071;
        static constexpr BaseType VALUE_ADDED_TAX_POINT_DATE_CODE = 1072;
        static constexpr BaseType PURCHASE_ORDER_REFERENCE = 1073;
        static constexpr BaseType SALES_ORDER_REFERENCE = 1074;
        static constexpr BaseType PRECEDING_INVOICE_REFERENCE = 1075;
        static constexpr BaseType INVOICE_DOCUMENT_REFERENCE = 1076;
        static constexpr BaseType PRECEDING_INVOICE_NUMBER = 1077;
        static constexpr BaseType PRECEDING_INVOICE_ISSUE_DATE = 1078;
        static constexpr BaseType DESPATCH_ADVICE_REFERENCE = 1079;
        static constexpr BaseType RECEIVING_ADVICE_REFERENCE = 1080;
        static constexpr BaseType CONTRACT_REFERENCE = 1081;
        static constexpr BaseType PARTY_NAME = 677; //(Alias of: NAME)
        static constexpr BaseType SELLER_NAME = 677; //(Alias of: NAME)
        static constexpr BaseType TRADING_NAME = 1082;
        static constexpr BaseType LEGAL_NAME = 1082; //(Alias of: TRADING_NAME)
        static constexpr BaseType ELECTRONIC_ADDRESS = 1083;
        static constexpr BaseType ELECTRONIC_ADDRESS_IDENTIFICATION_SCHEME_IDENTIFIER = 1084;
        static constexpr BaseType BANK_ASSIGNED_CREDITOR_IDENTIFIER = 1085;
        static constexpr BaseType BANK_ASSIGNED_CREDITOR_IDENTIFIER_IDENTIFICATION_SCHEME_IDENTIFIER = 1086;
        static constexpr BaseType VAT_IDENTIFIER = 1087;
        static constexpr BaseType TAX_REGISTRATION_IDENTIFIER = 1088;
        static constexpr BaseType LEGAL_REGISTRATION_IDENTIFIER = 1089;
        static constexpr BaseType LEGAL_REGISTRATION_IDENTIFIER_IDENTIFICATION_SCHEME_IDENTIFIER = 1090;
        static constexpr BaseType ADDITIONAL_LEGAL_INFORMATION = 1091;
        static constexpr BaseType CONTACT_POINT = 1092;
        static constexpr BaseType IDENTIFIER_IDENTIFICATION_SCHEME_IDENTIFIER = 1093;
        static constexpr BaseType PAYEE_IDENTIFIER_OR_BANK_ASSIGNED_CREDITOR_IDENTIFIER = 1094;
        static constexpr BaseType PAYEE_OR_BANK_ASSIGNED_CREDITOR_IDENTIFIER_IDENTIFICATION_SCHEME_IDENTIFIER = 1095;
        static constexpr BaseType PAYEE_NAME = 1096;
        static constexpr BaseType PAYEE_LEGAL_REGISTRATION_IDENTIFIER = 1097;
        static constexpr BaseType PAYEE_LEGAL_REGISTRATION_IDENTIFIER_IDENTIFICATION_SCHEME_IDENTIFIER = 1098;
        static constexpr BaseType DELIVER_TO_PARTY_NAME = 677; //(Alias of: PARTY_NAME)
        static constexpr BaseType ACTUAL_DELIVERY_DATE = 1099;
        static constexpr BaseType BATCH_NAME = 1100;
        static constexpr BaseType BATCH_RATE = 1101;
        static constexpr BaseType BATCH_MRP = 1102;
        static constexpr BaseType ESCALATION_RATE = 1103;
        static constexpr BaseType BATCH_DISCOUNT = 1104;
        static constexpr BaseType MANUFACTURED_DATE = 1105;
        static constexpr BaseType EXPIRY_PERIOD = 1106;
        static constexpr BaseType GODOWN_NAME = 1107;
        static constexpr BaseType SOURCE_GODOWN_NAME = 1108;
        static constexpr BaseType DESTINATION_GODOWN_NAME = 1109;
        static constexpr BaseType ADDITIONALL_AMOUNT = 1110;
        static constexpr BaseType ADDITIONAL_EXPENSE_AMOUNT = 1111;
        static constexpr BaseType INDENT_NUMBER = 1112;
        static constexpr BaseType ORDER_NUMBER = 1113;
        static constexpr BaseType ORDER_PRE_CLOSURE_DATE = 1114;
        static constexpr BaseType ORDER_PRE_CLOSURE_QUANTITY = 1115;
        static constexpr BaseType ORDER_PRE_CLOSURE_REASON = 1116;
        static constexpr BaseType ORDER_TYPE = 1117;
        static constexpr BaseType TRACKING_NUMBER = 1118;
        static constexpr BaseType BENEFICIARY_BANK_CHARGES = 1119;
        static constexpr BaseType IMB_CODE = 1120;
        static constexpr BaseType TRANSACTION_ID = 1121;
        static constexpr BaseType UNIQUE_REFERENCE_NUMBER = 1122;
        static constexpr BaseType CARD_NUMBER = 1123;
        static constexpr BaseType APPROVAL_CODE = 1124;
        static constexpr BaseType MERCHANT_ID = 1125;
        static constexpr BaseType TERMINAL_ID = 1126;
        static constexpr BaseType TIP_AMOUNT = 1127;
        static constexpr BaseType TIP_REMARKS = 1128;
        static constexpr BaseType BANK_EMPLOYEE_NAME = 1129;
        static constexpr BaseType BANK_PARTY_NAME = 1130;
        static constexpr BaseType BANK_CODE = 1131;
        static constexpr BaseType BANKERS_DATE = 1132;
        static constexpr BaseType BANKERS_REMARKS = 1133;
        static constexpr BaseType BANK_REFERENCE = 1134;
        static constexpr BaseType CASH_DENOMINATION = 1135;
        static constexpr BaseType CHEQUE_PRINTED = 1136;
        static constexpr BaseType CHECK_PRINTED = 1136; //(Alias of: CHEQUE_PRINTED)
        static constexpr BaseType CHEQUE_RANGE = 1137;
        static constexpr BaseType CHECK_RANGE = 1137; //(Alias of: CHEQUE_RANGE)
        static constexpr BaseType CHEQUE_NUMBER = 1138;
        static constexpr BaseType CHECK_NUMBER = 1138; //(Alias of: CHEQUE_NUMBER)
        static constexpr BaseType CLEARING_BANK_CODE = 1139;
        static constexpr BaseType INSTRUMENT_DATE = 1140;
        static constexpr BaseType INSTRUMENT_NUMBER = 1141;
        static constexpr BaseType INSTRUMENT_RETURN_DATE = 1142;
        static constexpr BaseType LOCAL_BANK_CHARGES = 1143;
        static constexpr BaseType PDC_ACTUAL_DATE = 1144;
        static constexpr BaseType PDC_REMARKS = 1145;
        static constexpr BaseType DRAWEE_BANK_CODE = 1146;
        static constexpr BaseType PAYABLE_LOCATION_CODE = 1147;
        static constexpr BaseType PAYMENT_MODE = 1148;
        static constexpr BaseType PAYMENT_GATEWAY = 1149;
        static constexpr BaseType PRINT_LOCATION_CODE = 1150;
        static constexpr BaseType PAYMENT_ADVICE_STATUS = 1151;
        static constexpr BaseType RESERVATION_STATUS = 1152;
        static constexpr BaseType SETTLE_AMOUNT = 1153;
        static constexpr BaseType STATUS = 1154;
        static constexpr BaseType TRANSACTION_NAME = 1155;
        static constexpr BaseType VOID_AMOUNT = 1156;
        static constexpr BaseType SUB_TRANSACTION_TYPE = 1157;
        static constexpr BaseType TRANSASCTION_CATEGORY = 1158;
        static constexpr BaseType ECOMMERCE_GSTIN = 1159;
        static constexpr BaseType DOCUMENT_TYPE = 1160;
        static constexpr BaseType DOCUMENT_NUMBER = 1161;
        static constexpr BaseType DOCUMENT_DATE = 1162;
        static constexpr BaseType EXPORT_CATEGORY = 1163;
        static constexpr BaseType SHIPPING_BILL_NO = 1164;
        static constexpr BaseType SHIPPING_BILL_DATE = 1165;
        static constexpr BaseType PORT_CODE = 1166;
        static constexpr BaseType INVOICE_VALUE_IN_CURRENCY = 1167;
        static constexpr BaseType SELLER_GSTIN = 1168;
        static constexpr BaseType TRADE_NAME = 1082; //(Alias of: LEGAL_NAME)
        static constexpr BaseType PINCODE = 1169;
        static constexpr BaseType BUYER_GSTIN = 1170;
        static constexpr BaseType ASSESSABLE_VALUE = 1171;
        static constexpr BaseType IGST_VALUE = 1172;
        static constexpr BaseType CGST_VALUE = 1173;
        static constexpr BaseType SGST_VALUE = 1174;
        static constexpr BaseType CESS_NON_ADVOL = 1175;
        static constexpr BaseType CESS_VALUE = 1176;
        static constexpr BaseType TOTAL_INVOICE_VALUE = 1177;
        static constexpr BaseType UNIT_CODE = 1178;
        static constexpr BaseType UNIT_PRICE = 1179;
        static constexpr BaseType SELLING_PRICE = 1180;
        static constexpr BaseType CESS_ADVOL_RATE = 1181;
        static constexpr BaseType CESS_NON_ADVOL_RATE = 1182;
        static constexpr BaseType TOTAL_PRICE = 1183;
        static constexpr BaseType ACCOUNT_DETAILS = 1184;
        static constexpr BaseType BALANCE_AMOUNT = 1185;
        static constexpr BaseType PRODUCT_DESCRIPTION = 712; //(Alias of: DESCRIPTION)
        static constexpr BaseType ADDITIONALTYPE = 1186;
        static constexpr BaseType ALTERNATENAME = 1187;
        static constexpr BaseType AGGREGATERATING = 1188;
        static constexpr BaseType REVIEW = 1189;
        static constexpr BaseType ENERGY_EFFICIENCY_SCALE_MAX = 1190;
        static constexpr BaseType ENERGY_EFFICIENCY_SCALE_MIN = 1191;
        static constexpr BaseType ENERGY_EFFICIENCY_CATEGORY = 1192;
        static constexpr BaseType IN_STORE_RETURNS_OFFERED = 1193;
        static constexpr BaseType MERCHANT_RETURN_DAYS = 1194;
        static constexpr BaseType MERCHANT_RETURN_LINK = 1195;
        static constexpr BaseType REFUND_TYPE = 1196;
        static constexpr BaseType RETURN_FEES = 1197;
        static constexpr BaseType RETURN_POLICY_CATEGORY = 1198;
        static constexpr BaseType ACCELERATION_TIME = 1199;
        static constexpr BaseType BODY_TYPE = 1200;
        static constexpr BaseType CALL_SIGN = 1201;
        static constexpr BaseType CARGO_VOLUME = 1202;
        static constexpr BaseType DATE_VEHICLE_FIRST_REGISTERED = 1203;
        static constexpr BaseType DRIVE_WHEEL_CONFIGURATION = 1204;
        static constexpr BaseType EMISSIONS_CO2 = 1205;
        static constexpr BaseType FUEL_CAPACITY = 1206;
        static constexpr BaseType FUEL_CONSUMPTION = 1207;
        static constexpr BaseType FUEL_EFFICIENCY = 1208;
        static constexpr BaseType FUEL_TYPE = 1209;
        static constexpr BaseType KNOWN_VEHICLE_DAMAGES = 1210;
        static constexpr BaseType MEETS_EMISSION_STANDARD = 1211;
        static constexpr BaseType MILEAGE_FROM_ODOMETER = 1212;
        static constexpr BaseType MODEL_DATE = 1213;
        static constexpr BaseType NUMBER_OF_AIR_BAGS = 1214;
        static constexpr BaseType NUMBER_OF_AXLES = 1215;
        static constexpr BaseType NUMBER_OF_DOORS = 1216;
        static constexpr BaseType NUMBER_OF_FORWARD_GEARS = 1217;
        static constexpr BaseType NUMBER_OF_PREVIOUS_OWNERS = 1218;
        static constexpr BaseType PAY_LOAD = 1219;
        static constexpr BaseType SEATING_CAPACITY = 1220;
        static constexpr BaseType SPEED = 1221;
        static constexpr BaseType STEERING_POSITION = 1222;
        static constexpr BaseType TONGUE_WEIGHT = 1223;
        static constexpr BaseType TRAILER_WEIGHT = 1224;
        static constexpr BaseType VEHICLE_CONFIGURATION = 1225;
        static constexpr BaseType VEHICLE_ENGINE = 1226;
        static constexpr BaseType VEHICLE_IDENTIFICATION_NUMBER = 1227;
        static constexpr BaseType VEHICLE_INTERIOR_COLOUR = 1228;
        static constexpr BaseType VEHICLE_INTERIOR_COLOR = 1228; //(Alias of: VEHICLE_INTERIOR_COLOUR)
        static constexpr BaseType VEHICLE_INTERIORTYPE = 1229;
        static constexpr BaseType VEHICLE_MODEL_DATE = 1230;
        static constexpr BaseType VEHICLE_SEATING_CAPACITY = 1231;
        static constexpr BaseType VEHICLE_SPECIAL_USAGE = 1232;
        static constexpr BaseType VEHICLE_TRANSMISSION = 1233;
        static constexpr BaseType WEIGHT_TOTAL = 1234;
        static constexpr BaseType WHEEL_BASE = 1235;
        static constexpr BaseType ACQUIRED_FROM = 1236;
        static constexpr BaseType OWNED_FROM = 1237;
        static constexpr BaseType OWNED_THROUGH = 1238;
        static constexpr BaseType TYPE_OF_GOOD = 1239;
        static constexpr BaseType AREA_SERVED = 1240;
        static constexpr BaseType AVAILABLE_CHANNEL = 1241;
        static constexpr BaseType BROKER = 1242;
        static constexpr BaseType HOURS_AVAILABLE = 1243;
        static constexpr BaseType IS_RELATED_TO = 1244;
        static constexpr BaseType IS_SIMILAR_TO = 1245;
        static constexpr BaseType PROVIDER = 1246;
        static constexpr BaseType PROVIDER_MOBILITY = 1247;
        static constexpr BaseType SERVICE_OUTPUT = 1248;
        static constexpr BaseType SERVICE_TYPE = 1249;
        static constexpr BaseType TERMS_OF_SERVICE = 1250;
        static constexpr BaseType ISSUEDTHROUGH = 1251;
        static constexpr BaseType ITEMOFFERED = 1252;
        static constexpr BaseType ISSUED_BY = 1253;
        static constexpr BaseType ISSUED_THROUGH = 1254;
        static constexpr BaseType PERMIT_AUDIENCE = 1255;
        static constexpr BaseType VALID_FOR = 1256;
        static constexpr BaseType VALID_FROM = 1257;
        static constexpr BaseType VALID_IN = 1258;
        static constexpr BaseType VALID_UNTIL = 1259;
        static constexpr BaseType NUMBER_OF_BEDS = 1260;
        static constexpr BaseType TYPE_OF_BED = 1261;
        static constexpr BaseType LENGTH = 1262;
        static constexpr BaseType THICKNESS = 1263;
        static constexpr BaseType BREADTH = 1264;
        static constexpr BaseType GROSS_WEIGHT = 1265;
        static constexpr BaseType GIVEN_NAME = 1266;
        static constexpr BaseType AFFILIATION = 1267;
        static constexpr BaseType ALUMNI_OF = 1268;
        static constexpr BaseType BIRTH_DATE = 1269;
        static constexpr BaseType BIRTH_PLACE = 1270;
        static constexpr BaseType CHILDREN = 1271;
        static constexpr BaseType COLLEAGUE = 1272;
        static constexpr BaseType DEATH_DATE = 1273;
        static constexpr BaseType DEATH_PLACE = 1274;
        static constexpr BaseType DUNS = 1275;
        static constexpr BaseType FAMILY_NAME = 1276;
        static constexpr BaseType FAX_NUMBER = 1277;
        static constexpr BaseType FOLLOWS = 1278;
        static constexpr BaseType FUNDER = 1279;
        static constexpr BaseType GLOBAL_LOCATION_NUMBER = 1280;
        static constexpr BaseType OCCUPATION = 1281;
        static constexpr BaseType HOME_LOCATION = 1282;
        static constexpr BaseType HONORIFIC_PREFIX = 1283;
        static constexpr BaseType HONORIFIC_SUFFIX = 1284;
        static constexpr BaseType ISICV4 = 1285;
        static constexpr BaseType JOB_TITLE = 1286;
        static constexpr BaseType KNOWS = 1287;
        static constexpr BaseType KNOWS_ABOUT = 1288;
        static constexpr BaseType KNOWS_LANGUAGE = 1289;
        static constexpr BaseType MAKES_OFFER = 1290;
        static constexpr BaseType MEMBER_OF = 1291;
        static constexpr BaseType NAICS = 1292;
        static constexpr BaseType NATIONALITY = 1293;
        static constexpr BaseType NET_WORTH = 1294;
        static constexpr BaseType OWNS = 1295;
        static constexpr BaseType PERFORMER_IN = 1296;
        static constexpr BaseType PUBLISHING_PRINCIPLES = 1297;
        static constexpr BaseType SEEKS = 1298;
        static constexpr BaseType SIBLING = 1299;
        static constexpr BaseType SPONSOR = 1300;
        static constexpr BaseType SPOUSE = 1301;
        static constexpr BaseType TAXID = 1302;
        static constexpr BaseType TELEPHONE = 1303;
        static constexpr BaseType VATID = 1304;
        static constexpr BaseType WORK_LOCATION = 1305;
        static constexpr BaseType WORKS_FOR = 1306;
        static constexpr BaseType EDUCATION_REQUIREMENTS = 1307;
        static constexpr BaseType ESTIMATED_SALARY = 1308;
        static constexpr BaseType EXPERIENCE_REQUIREMENTS = 1309;
        static constexpr BaseType OCCUPATION_LOCATION = 1310;
        static constexpr BaseType OCCUPATIONAL_CATEGORY = 1311;
        static constexpr BaseType QUALIFICATIONS = 1312;
        static constexpr BaseType RESPONSIBILITIES = 1313;
        static constexpr BaseType SKILLS = 1314;
        static constexpr BaseType VOUCHER_NARATION = 1315;
        static constexpr BaseType SUPPLY_TYPE = 1316;
        static constexpr BaseType TERMS_OF_PAYMENT = 1317;
        static constexpr BaseType TERMS_OF_DELIVERY = 1318;
        static constexpr BaseType MODE_OF_PAYMENT = 1319;
        static constexpr BaseType OTHER_REFERENCES = 1320;
        static constexpr BaseType ORIGINAL_INVOICE_BOOK_NAME = 1321;
        static constexpr BaseType ORIGINAL_INVOICE_NUMBER = 1322;
        static constexpr BaseType ORIGINAL_INVOICE_DATE = 1323;
        static constexpr BaseType PLACE_OF_RECEIPT_BY_SHIPPER = 1324;
        static constexpr BaseType VESSEL_NUMBER = 1325;
        static constexpr BaseType FLIGHT_NUMBER = 1326;
        static constexpr BaseType PORT_OF_LOADING = 1327;
        static constexpr BaseType PORT_OF_DISCHARGE = 1328;
        static constexpr BaseType COUNTRY_TO = 1329;
        static constexpr BaseType SHIPPING_BILL_NUMBER = 1330;
        static constexpr BaseType BILL_OF_ENTRY_NUMBER = 1331;
        static constexpr BaseType BILL_OF_ENTRY_DATE = 1332;
        static constexpr BaseType FOREIGN_CURRENCY_CODE = 1333;
        static constexpr BaseType REFUND_CLAIM = 1334;
        static constexpr BaseType EXPORT_DUTY = 1335;
        static constexpr BaseType MARKS = 1336;
        static constexpr BaseType NUMBER_OF_PACKAGES = 1337;
        static constexpr BaseType SUB_SUPPLY_TYPE = 1338;
        static constexpr BaseType SUB_SYPPLY_DESCRIPTION = 1339;
        static constexpr BaseType STATE_OF_SUPPLY = 1340;
        static constexpr BaseType TYPE_OF_TRANSACTION = 1341;
        static constexpr BaseType EWAY_BILL_NUMBER = 1342;
        static constexpr BaseType EWAY_BILL_DATE = 1343;
        static constexpr BaseType EWAY_BILL_VALID_UPTO = 1344;
        static constexpr BaseType EWAY_BILL_STATUS = 1345;
        static constexpr BaseType EWAY_BILL_ALERT = 1346;
        static constexpr BaseType EWAY_BILL_ERROR_CODE = 1347;
        static constexpr BaseType EWAY_BILL_INFO = 1348;
        static constexpr BaseType CONSOLIDATED_BILL_DATE = 1349;
        static constexpr BaseType CONSOLIDATED_BILL_NUMBER = 1350;
        static constexpr BaseType SHIPPED_FROM_STATE = 1351;
        static constexpr BaseType SHIPPED_TO_DATE = 1352;
        static constexpr BaseType GST_REGISTRATION_TYPE = 1353;
        static constexpr BaseType PLACE_OF_SUPPLY = 1354;
        static constexpr BaseType MODE_OF_TRANSPORTATION = 1355;
        static constexpr BaseType TYPE_OF_VEHCILE = 1356;
        static constexpr BaseType DISTANCE_OF_TRANSPORTATION = 1357;
        static constexpr BaseType TRANSPORTER_ID = 1358;
        static constexpr BaseType TRANSPORTER_NAME = 1359;
        static constexpr BaseType TRANSPORTER_DOC_NUMBER = 1360;
        static constexpr BaseType TRANSPORTER_DOC_DATE = 1361;
        static constexpr BaseType VEHICLE_NUMBER = 1362;
        static constexpr BaseType UQC = 1363;
        static constexpr BaseType TOTAL_QTY = 1364;
        static constexpr BaseType NAME_OF_THE_PRODUCT = 1365;
        static constexpr BaseType DESCRIPTION_OF_THE_PRODUCT = 1366;
        static constexpr BaseType HSN_CODE_OF_THE_PRODUCT = 1367;
        static constexpr BaseType QUANTITY_OF_PRODUCT_IN_NUMBERS = 1368;
        static constexpr BaseType UNIT_OF_THE_PRODUCT = 1369;
        static constexpr BaseType TAXABLE_AMOUNT = 1370;
        static constexpr BaseType CESS_NON_ADVOLERUM = 1371;
        static constexpr BaseType OTHER_VALUE = 1372;
        static constexpr BaseType TOTAL_VALUE = 1373;
        static constexpr BaseType CGST_AMOUNT = 1374;
        static constexpr BaseType SGST_AMOUNT = 1375;
        static constexpr BaseType IGST_AMOUNT = 1376;
        static constexpr BaseType CESS_AMOUNT = 1377;
        static constexpr BaseType CESS_NON_ADVOL_AMOUNT = 1378;
        static constexpr BaseType CHALLANS_NUMBER = 1379;
        static constexpr BaseType DESPATCHED_THROUGH = 1380;
        static constexpr BaseType DESTINATION = 1381;
        static constexpr BaseType CARRIER_NAME = 1382;
        static constexpr BaseType BILL_OF_LADING_NUMBER = 1383;
        static constexpr BaseType LR_RR_NUMBER = 1384;
        static constexpr BaseType BILL_OF_LADING_DATE = 1385;
        static constexpr BaseType LR_RR_DATE = 1386;
        static constexpr BaseType AGENT_NAME = 1387;
        static constexpr BaseType DURATION_OF_PROCESS = 1388;
        static constexpr BaseType NATURE_OF_PROCESSING = 1389;
        static constexpr BaseType EMPLOYEE_NAME = 1390;
        static constexpr BaseType ATTENDANCE_TYPE = 1391;
        static constexpr BaseType PRODUCTION_TYPE = 1392;
        static constexpr BaseType UNIT = 1393;
        static constexpr BaseType REFERENCE_NUMBER = 1394;
        static constexpr BaseType REFERENCE_DATE = 1395;
        static constexpr BaseType TRANSPORT_MODE = 1396;
        static constexpr BaseType VEHICLE_NAME = 1397;
        static constexpr BaseType VEHICLE_TYPE = 1398;
        static constexpr BaseType LADING_NUMBER = 1399;
        static constexpr BaseType RR_NUMBER = 1400;
        static constexpr BaseType AIRWAY_NUMBER = 1401;
        static constexpr BaseType DISTANCE = 1402;
        static constexpr BaseType PLACE_OF_CHANGE = 1403;
        static constexpr BaseType REASON_FOR_CHANGE = 1404;
        static constexpr BaseType STATE_OF_CHANGE = 1405;
        static constexpr BaseType REMARKS = 1406;
        static constexpr BaseType CONSIGNEE = 1407;
        static constexpr BaseType ADDRESS_TYPE = 1408;
        static constexpr BaseType PLACE = 1409;
        static constexpr BaseType CONSIGNOR = 1410;
        static constexpr BaseType DOC_NUMBER = 1411;
        static constexpr BaseType TRACKING_NO = 1412;
        static constexpr BaseType DESPATCH_DOC_NUMBER = 1413;
        static constexpr BaseType DISPATCH_THROUGH = 1414;
        static constexpr BaseType CARRIER_AGENT = 1415;
        static constexpr BaseType BILL_OF_LADING = 1416;
        static constexpr BaseType MOTOR_VEHICLE_NUMBER = 1417;
        static constexpr BaseType INSPECTION_DOCUMENT_NUMBER = 1418;
        static constexpr BaseType INSPECTION_DOCUMENT_DATE = 1419;
        static constexpr BaseType TAX_UNIT = 1420;
        static constexpr BaseType RULE_11_SERIAL_NO = 1421;
        static constexpr BaseType SL_NUMBER_IN_PLA = 1422;
        static constexpr BaseType SL_NUMBER_IN_RG_23 = 1423;
        static constexpr BaseType DATE_AND_TIME_OF_INVOICE = 1424;
        static constexpr BaseType DATE_AND_TIME_OF_REMOVAL = 1425;
        static constexpr BaseType NATURAL_OF_REMOVAL = 1426;
        static constexpr BaseType CERTIFICATE_TYPE = 1427;
        static constexpr BaseType SEQUENCE_NUMBER = 1428;
        static constexpr BaseType MARGINAL = 1429;
        static constexpr BaseType BATCH = 1430;
        static constexpr BaseType PRODUCT_SERIAL_NUMBER = 1431;
        static constexpr BaseType LOT_NO = 1432;
        static constexpr BaseType FREE_QUANTITY = 1433;
        static constexpr BaseType DISCOUNT_PERCENTAGE = 1434;
        static constexpr BaseType DISCOUNT_AMOUNT = 1435;
        static constexpr BaseType ADDITIONAL_AMOUNT = 1436;
        static constexpr BaseType SUPPLIER_INVOICE_NUMBER = 1437;
        static constexpr BaseType SUPPLIER_INVOICE_DATE = 1438;
        static constexpr BaseType GST_RATE = 1439;
        static constexpr BaseType CESS_ADVOL_AMOUNT = 1440;
        static constexpr BaseType STATE_CESS_AMOUNT = 1441;
        static constexpr BaseType STATE_CESS_NON_ADVOL_RATE = 1442;
        static constexpr BaseType STATE_CESS_NON_ADVOL_AMOUNT = 1443;
        static constexpr BaseType E_SUGAM_DETAILS = 1444;
        static constexpr BaseType INVOICE_NO = 1445;
        static constexpr BaseType INVOICE_DATE = 1446;
        static constexpr BaseType E_SUGAM_NUMBER = 1447;
        static constexpr BaseType INVOICE_DELIVERY_DATE = 1448;
        static constexpr BaseType FROM_PLACE = 1449;
        static constexpr BaseType TO_PLACE = 1450;
        static constexpr BaseType CATEGORY_OF_TRANSACTION = 1451;
        static constexpr BaseType DESPATCH_THROUGH = 1452;
        static constexpr BaseType QUANTITY_WITH_UNITS = 1453;
        static constexpr BaseType TAX_CLASSIFICATION = 1454;
        static constexpr BaseType REASON_FOR_ISSUING_NOTE = 1455;
        static constexpr BaseType BUYER_DEBIT_NOTE_NO = 1456;
        static constexpr BaseType BUYER_DEBIT_NOTE_DATE = 1457;
        static constexpr BaseType LEDGER_NAME = 1458;
        static constexpr BaseType ACCOUNT = 1458; //(Alias of: LEDGER_NAME)
        static constexpr BaseType TYPE_OF_REFERENCE = 1459;
        static constexpr BaseType DUE_DATE = 1460;
        static constexpr BaseType CREDIT_DAYS = 1461;
        static constexpr BaseType ACK_NUMBER = 1462;
        static constexpr BaseType ACK_DATE = 1463;
        static constexpr BaseType IRN = 1464;
        static constexpr BaseType SIQNED_QR_CODE = 1465;
        static constexpr BaseType FOR_STOCK_ITEM = 1466;
        static constexpr BaseType FOR_ORDER_NUMBER = 1467;
        static constexpr BaseType TRACK_COMPONENTS = 1468;
        static constexpr BaseType STOCK_ITEM = 1469;
        static constexpr BaseType PER = 1470;
        static constexpr BaseType DUE_ON = 1471;
        static constexpr BaseType BUYER_UIN = 1472;
        static constexpr BaseType DENOMINATIONS_FOR = 1473;
        static constexpr BaseType DENOMINATION = 1474;
        static constexpr BaseType TOTAL_AMOUNT = 1475;
        static constexpr BaseType DIFFERECE = 1476;
        static constexpr BaseType POS_CARD_NUMBER = 1477;
        static constexpr BaseType POS_CASH_RECEIVED = 1478;
        static constexpr BaseType POS_CARD_LEDGER = 1479;
        static constexpr BaseType POS_CASH_LEDGER = 1480;
        static constexpr BaseType POS_GIFT_LEDGER = 1481;
        static constexpr BaseType POS_CHEQUE_LEDGER = 1482;
        static constexpr BaseType POS_CHECK_LEDGER = 1482; //(Alias of: POS_CHEQUE_LEDGER)
        static constexpr BaseType POS_CHEQUE_NUMBER = 1483;
        static constexpr BaseType POS_CHECK_NUMBER = 1483; //(Alias of: POS_CHEQUE_NUMBER)
        static constexpr BaseType POS_CHEQUE_BANK_NAME = 1484;
        static constexpr BaseType POS_CHECK_BANK_NAME = 1484; //(Alias of: POS_CHEQUE_BANK_NAME)
        static constexpr BaseType TAX_CLASSIFICATION_NAME = 1485;
        static constexpr BaseType RATE_OF_CESS_ON_VAT = 1486;
        static constexpr BaseType RATE_OF_ADDL_VAT = 1487;
        static constexpr BaseType VAT_TAX_RATE = 1488;
        static constexpr BaseType VAT_CALCULATION_TYPE = 1489;
        static constexpr BaseType ITEM_QTY = 1490;
        static constexpr BaseType COMMODITY_NAME = 1491;
        static constexpr BaseType WORKS_CONTRACT_COST_OF_LAND = 1492;
        static constexpr BaseType WORKS_CONTRACT_TYPE = 1493;
        static constexpr BaseType WORKS_CONTRACT_DED_LABOUR_CHARGES = 1494;
        static constexpr BaseType WORKS_CONTRACT_DESCRIPTION = 1495;
        static constexpr BaseType WORKS_CONTRACT_OTHER_DEDUCTION_AMT = 1496;
        static constexpr BaseType WORKS_CONTRACT_VALUE_OF_TAX_FREE_GOODS = 1497;
        static constexpr BaseType WORKS_CONTRACT_OTHER_CHARGES = 1498;
        static constexpr BaseType WORKS_CONTRACT_SUB_CONTRACTOR_AMOUNT = 1499;
        static constexpr BaseType COMMODITY_CODE = 1500;
        static constexpr BaseType SCHEDULE = 1501;
        static constexpr BaseType SCHEDULE_SERIAL_NUMBER = 1502;
        static constexpr BaseType IS_ZR_BASIC_SERVICE = 1503;
        static constexpr BaseType GST_TAX_RATE = 1504;
        static constexpr BaseType IGST_LIABILITY = 1505;
        static constexpr BaseType CGST_LIABILITY = 1506;
        static constexpr BaseType SGST_LIABILITY = 1507;
        static constexpr BaseType CESS_LIABILITY = 1508;
        static constexpr BaseType OVERRRIDDEN_CLASSIFICATION = 1509;
        static constexpr BaseType OVERRRIDDEN_NATURE = 1510;
        static constexpr BaseType OVERRRIDDEN_ASSESSABLE_VALUE = 1511;
        static constexpr BaseType ASSBL_VALUE = 1512;
        static constexpr BaseType RATE_DETAILS = 1513;
        static constexpr BaseType OVERRRIDDEN_INELIGIBLE_ITC = 1514;
        static constexpr BaseType OVERRRIDDEN_IS_REV_CHARGE_APPL = 1515;
        static constexpr BaseType OVERRRIDDEN_TAXABILITY = 1516;
        static constexpr BaseType HSN_SAC_CODE = 1517;
        static constexpr BaseType GST_DUTY_HEAD = 1518;
        static constexpr BaseType BILL_CREDIT_PERIOD = 1519;
        static constexpr BaseType INTEREST_COLLECTION = 1520;
        static constexpr BaseType ACTUAL_QTY = 1521;
        static constexpr BaseType BILLED_QTY = 1522;
        static constexpr BaseType CATEGORY_NAME = 1523;
        static constexpr BaseType TOTAL_ASSESSABLE_VALUE_OF_ALL_ITEMS = 1524;
        static constexpr BaseType CGST_VALUE_OF_ALL_ITEMS = 1525;
        static constexpr BaseType SGST_VALUE_OF_ALL_ITEMS = 1526;
        static constexpr BaseType IGST_VALUE_OF_ALL_ITEMS = 1527;
        static constexpr BaseType CESS_VALUE_OF_ALL_ITEMS = 1528;
        static constexpr BaseType STATE_CESS_VALUE_OF_ALL_ITEMS = 1529;
        static constexpr BaseType OTHER_CHARGES = 1530;
        static constexpr BaseType ROUNDOFF_AMOUNT = 1531;
        static constexpr BaseType FINAL_VOUCHER_VALUE = 1532;
        static constexpr BaseType VOUCHER_VALUE_IN_FOREIGN_CURRENCY = 1533;
        static constexpr BaseType COMPANY_NAME = 1534;
        static constexpr BaseType FINANCIAL_YEAR_BEGINNING_FROM = 1535;
        static constexpr BaseType BOOKS_BEGINNING_FROM = 1536;
        static constexpr BaseType BASE_CURRENCY = 1537;
        static constexpr BaseType REGULAR = 1538;
        static constexpr BaseType COMPOSITE = 1539;
        static constexpr BaseType PERIODICITY = 1540;
        static constexpr BaseType TAX_RATE_FOR_TAXABLE_TURNOVER = 1541;
        static constexpr BaseType BASIS_FOR_TAX_CALCULATION = 1542;
        static constexpr BaseType INTEGRATED_TAX_RATE = 1543;
        static constexpr BaseType CESS = 1544;
        static constexpr BaseType TAXABILITY = 1545;
        static constexpr BaseType LUT_BOND_NUMBER = 1546;
        static constexpr BaseType LUT_BOND_APPLICABLE_FROM = 1547;
        static constexpr BaseType LUT_BOND_APPLICABLE_TO = 1548;
        static constexpr BaseType APPLICABILITY = 1549;
        static constexpr BaseType AAPLICABLE_FROM = 1550;
        static constexpr BaseType INCLUDE_INVOICE_VALUE = 1551;
        static constexpr BaseType INCLUDE_TAXABLE_AND_EXEMPT_GOODS_VALUE = 1552;
        static constexpr BaseType INCLUDE_GOODS_VALUE = 1553;
        static constexpr BaseType APPLICABLE_FOR_INTRASTATE = 1554;
        static constexpr BaseType BILL_FROM_PLACE = 1555;
        static constexpr BaseType DEFAULT_PERIOD_FOR_THE_EINVOICE_REPORT = 1556;
        static constexpr BaseType GST_REGISTRATION_NUMBER = 1557;
        static constexpr BaseType COMPANY_REGISTRATION_NUMBER = 1558;
        static constexpr BaseType IS_COMPANY_LTU = 1559;
        static constexpr BaseType DEACTIVATE_FROM = 1560;
        static constexpr BaseType PREFIX = 1561;
        static constexpr BaseType SUFFIX = 1562;
        static constexpr BaseType EXCISE_RATE = 1563;
        static constexpr BaseType COMMISSIONERATE = 1564;
        static constexpr BaseType CODE = 1565;
        static constexpr BaseType INTERSTATE_SALES_TAX_NUMBER = 1566;
        static constexpr BaseType TAX_RATE = 1567;
        static constexpr BaseType LVO_VSO_CODE = 1568;
        static constexpr BaseType AUTHORISED_PERSON = 1569;
        static constexpr BaseType AUTHORIZED_PERSON = 1569; //(Alias of: AUTHORISED_PERSON)
        static constexpr BaseType TRN = 1570;
        static constexpr BaseType REGISTRATION_DATE = 1571;
        static constexpr BaseType IGNORE_MISMATCH_UPTO = 1572;
        static constexpr BaseType PRIMARY_MAILING_DETAILS = 1573;
        static constexpr BaseType VAT_NUMBER = 1574;
        static constexpr BaseType VAT_REGISTRATION_NUMBER = 1575;
        static constexpr BaseType VAT_APPLICABLE_FROM = 1576;
        static constexpr BaseType RDO_CODE = 1577;
        static constexpr BaseType LINE_OF_BUSINESS = 1578;
        static constexpr BaseType LOCAL_SALES_TAX_NUMBER = 1579;
        static constexpr BaseType PAN_NUMBER = 1580;
        static constexpr BaseType PIN = 1581;
        static constexpr BaseType TYPES_OF_DEVICE = 1582;
        static constexpr BaseType DEVICE_NUMBER = 1583;
        static constexpr BaseType AUTHORISED_SIGNATORY = 1584;
        static constexpr BaseType AUTHORIZED_SIGNATORY = 1584; //(Alias of: AUTHORISED_SIGNATORY)
        static constexpr BaseType BUILDING = 1585;
        static constexpr BaseType VAT_REGISTRATION_DATE = 1586;
        static constexpr BaseType TAX_INVOICE_CODE = 1587;
        static constexpr BaseType VAT_TIN_REGULAR = 1588;
        static constexpr BaseType VAT_TIN_REGULAR_OLD = 1589;
        static constexpr BaseType CURRENT_TAX_OFFICE = 1590;
        static constexpr BaseType NAME_OF_GRA_OFFICE = 1591;
        static constexpr BaseType ACTIVITY_CODE = 1592;
        static constexpr BaseType AREA_CODE = 1593;
        static constexpr BaseType EMIRATE = 1594;
        static constexpr BaseType MAILING_ADDRESS = 1595;
        static constexpr BaseType VATIN = 1596;
        static constexpr BaseType COMPANY_CODE = 1597;
        static constexpr BaseType COMPANY_ACCOUNT_GROUP_CODE = 1598;
        static constexpr BaseType COMPANY_SECURITY_CODE = 1599;
        static constexpr BaseType ESI_BRANCH_OFFICE = 1600;
        static constexpr BaseType STANDARD_WORKING_DAYS_PER_MONTH = 1601;
        static constexpr BaseType CORPORATE_REGISTRATION_NUMBER = 1602;
        static constexpr BaseType CORPORATE_BRANCH_OFFICE_NUMBER = 1603;
        static constexpr BaseType INCOME_TAX_CIRCLE_OR_WARD = 1604;
        static constexpr BaseType IGNORE_IT_EXEMPTION_LIMIT_FOR_TDS_DEDUCTION = 1605;
        static constexpr BaseType ACTIVATE_TDS_FOR_STOCK_ITEMS = 1606;
        static constexpr BaseType TAX_DEDUCTION_AND_COLLECTION_ACCOUNT_NUMBER = 1046; //(Alias of: TAN)
        static constexpr BaseType COLLECTOR_TYPE = 1607;
        static constexpr BaseType COLLECTOR_BRANCH = 1608;
        static constexpr BaseType COLLECTOR_DIVISION = 1609;
        static constexpr BaseType E_MAIL = 1610;
        static constexpr BaseType RESIDENTIAL_STATUS = 1611;
        static constexpr BaseType COLLECTEE_STATUS = 1612;
        static constexpr BaseType APPLICABLE_DATE = 1613;
        static constexpr BaseType SURCHARGE_RATE = 1614;
        static constexpr BaseType MOBILE_NUMBER = 1615;
        static constexpr BaseType EMAIL_ID = 1616;
        static constexpr BaseType DEDUCTEE_STATUS = 1617;
        static constexpr BaseType PERMANENT_ACCOUNT_NUMBER = 1618;
        static constexpr BaseType FINANCIAL_YEAR = 1619;
        static constexpr BaseType QUARTER_ENDED = 1620;
        static constexpr BaseType TOKEN_NUMBER = 1621;
        static constexpr BaseType TYPE_OF_DEDUCTOR = 1622;
        static constexpr BaseType NAME_OF_EMPLOYER = 1623;
        static constexpr BaseType GOVERNMENT_NAME = 1624;
        static constexpr BaseType AIN_CODE = 1625;
        static constexpr BaseType GSTN = 1626;
        static constexpr BaseType PAN_OF_PERSON_RESPONSIBLE = 1627;
        static constexpr BaseType TAX = 1628;
        static constexpr BaseType EDUCATION_CESS = 1629;
        static constexpr BaseType FEE = 1630;
        static constexpr BaseType PENALTY = 1631;
        static constexpr BaseType TOTAL_AMOUNT_DEPOSITED = 1632;
        static constexpr BaseType BSR_RECIEPT_NUMBER = 1633;
        static constexpr BaseType CHALLAN_SERIAL_NUMBER = 1634;
        static constexpr BaseType DATE_OF_CHALLAN_DEPOSITED = 1635;
        static constexpr BaseType DATE_OF_TRANSFER_VOUCHER = 1636;
        static constexpr BaseType MINOR_HEAD_OF_CHALLAN = 1637;
        static constexpr BaseType AMOUNT_AS_PER_CHALLAN = 1638;
        static constexpr BaseType TOTAL_TDS_ALLOCATED = 1639;
        static constexpr BaseType TOTAL_INTEREST_ALLOCATED = 1640;
        static constexpr BaseType EMPLOYEE_REFERENCE_NUMBER = 1641;
        static constexpr BaseType PAN_OF_EMPLOYEE = 1642;
        static constexpr BaseType NAME_OF_EMPLOYEE = 1643;
        static constexpr BaseType SECTION_CODE = 1644;
        static constexpr BaseType DATE_OF_PAYMENT = 1645;
        static constexpr BaseType DATE_OF_DEDUCTION = 1646;
        static constexpr BaseType AMOUNT_PAID = 1647;
        static constexpr BaseType TOTAL_TDS = 1648;
        static constexpr BaseType TOTAL_TDS_DEPOSITED = 1649;
        static constexpr BaseType DATE_OF_DEPOSIT = 1650;
        static constexpr BaseType REASON_FOR_DIFFERENCE_IN_DEPOSIT = 1651;
        static constexpr BaseType NUMBER_OF_CERTIFICATE_ISSUED = 1652;
        static constexpr BaseType RESIDENT_INDIVIDUAL_AGE_60_TO_80 = 1653;
        static constexpr BaseType RESIDENT_INDIVIDUAL_AGE_80_OR_MORE = 1654;
        static constexpr BaseType WOMEN_AGE_LESS_THAN_60 = 1655;
        static constexpr BaseType OTHER_INDIVIDUALS = 1656;
        static constexpr BaseType EMPLOYEMENT_DATE = 1657;
        static constexpr BaseType TAXABLE_AMOUNT_ON_WHICH_PREVIOUS_EMPLOYER_DEDUCTED_TAX = 1658;
        static constexpr BaseType TAXABLE_AMOUNT_ON_WHICH_CURRENT_EMPLOYER_DEDUCTED_TAX = 1659;
        static constexpr BaseType TOTAL_SALARY = 1660;
        static constexpr BaseType TOTAL_DEDUCTION_UNDER_SEC_16_SUBSEC_II = 1661;
        static constexpr BaseType TOTAL_DEDUCTION_UNDER_SEC_16_SUBSEC_III = 1662;
        static constexpr BaseType INCOME_CHARGEABLE_UNDER_SALARIES = 1663;
        static constexpr BaseType INCOME_UNDER_OTHER_THAN_SALARY_OFFERED_TDS = 1664;
        static constexpr BaseType GROSS_TOTAL_INCOME = 1665;
        static constexpr BaseType AGRR_DEDUCTION_UNDER_80C_80CCD_80CCD1 = 1666;
        static constexpr BaseType AMOUNT_DEDUCTIBLE_CHAPTER_VI = 1667;
        static constexpr BaseType TOTAL_TAXABLE_INCOME = 1668;
        static constexpr BaseType INCOME_TAX_ON_TOTAL_INCOME = 1669;
        static constexpr BaseType INCOME_TAX_RELIEF_UNDER_SEC_89 = 1670;
        static constexpr BaseType NET_TAX_PAYABLE = 1671;
        static constexpr BaseType TOTAL_TDS_BY_CURRENT_EMPLOYER_FOR_WHOLE_YEAR = 1672;
        static constexpr BaseType TOTAL_TDS_BY_PREVIOUS_EMPLOYER_FOR_WHOLE_YEAR = 1673;
        static constexpr BaseType SHORTFALL_OR_EXCESS_IN_TAX_DEDUCTION = 1674;
        static constexpr BaseType TAX_DEUCTED_AT_HIGHER_RATE_NON_FURNISHING_PAN = 1675;
        static constexpr BaseType HOUSE_RENT_ALLOWANCE = 1676;
        static constexpr BaseType PAN_OF_LANLORD1 = 1677;
        static constexpr BaseType NAME_OF_LANDLORD1 = 1678;
        static constexpr BaseType PAN_OF_LANLORD2 = 1679;
        static constexpr BaseType NAME_OF_LANDLORD2 = 1680;
        static constexpr BaseType INTEREST_PAID_FROM_INCOME_FROM_HOUSE = 1681;
        static constexpr BaseType PAN_OF_LENDER1 = 1682;
        static constexpr BaseType NAME_OF_LENDER1 = 1683;
        static constexpr BaseType PAN_OF_LENDER2 = 1684;
        static constexpr BaseType NAME_OF_LENDER2 = 1685;
        static constexpr BaseType CONTRIBUTIONS_PAID_BY_THE_TRUSTEES_OF_AN_APPROVED_SUPERANNUATION_FUND = 1686;
        static constexpr BaseType NAME_OF_SUPERANNUATION_FUND = 1687;
        static constexpr BaseType FROM_DATE_OF_CONTRIBUTION = 1688;
        static constexpr BaseType TO_DATE_OF_CONTRIBUTION = 1689;
        static constexpr BaseType AMOUNT_OF_CONTRIBUTION_REPAID_ON_ACCOUNT_OF_PRINCIPAL_AND_INTEREST = 1690;
        static constexpr BaseType AVERAGE_RATE_OF_DEDUCTION_OF_TAX_DURING_THE_PRECEDING_THREE_YEARS = 1691;
        static constexpr BaseType AMOUNT_OF_TAX_DEDUCTED_ON_REPAYMENT = 1692;
        static constexpr BaseType NAME_OF_DEDUCTOR = 1693;
        static constexpr BaseType MODE_OF_DEPOSIT = 1694;
        static constexpr BaseType TOTAL_TAX_ALLOCATED = 1695;
        static constexpr BaseType DEDUCTEE_REFERENCE_NUMBER = 1696;
        static constexpr BaseType DEDUCTEE_CODE = 1697;
        static constexpr BaseType PAN_OF_DEDUCTEE = 1698;
        static constexpr BaseType NAME_OF_DEDUCTEE = 1699;
        static constexpr BaseType TOTAL_TAX_DEDUCTED = 1700;
        static constexpr BaseType TOTAL_TAX_DEPOSITED = 1701;
        static constexpr BaseType DATE_OF_DEDECTED = 1702;
        static constexpr BaseType REASON_FOR_DIFFERENCE_IN_DEDUCTION = 1703;
        static constexpr BaseType NAME_OF_DEDUCTER = 1704;
        static constexpr BaseType SURCHARGE = 1705;
        static constexpr BaseType INTEREST = 1706;
        static constexpr BaseType RATE_AT_WHICH_DEDUCTED = 1707;
        static constexpr BaseType UNIQUE_ACKNOWLEDGEMENT_15CA = 1708;
        static constexpr BaseType REMMITANCE_MADE_TO_COUNTRY = 1709;
        static constexpr BaseType E_MAIL_OF_DEDUCTEE = 1710;
        static constexpr BaseType CONTACT_NUMBER_OF_DEDUCTEE = 1711;
        static constexpr BaseType ADDRESS_OF_DEDUCTEE = 1712;
        static constexpr BaseType TIN_OF_DEDUCTEE = 1713;
        static constexpr BaseType UNIQUE_IDENTIFICATION_NUMBER_OF_DEDUCTEE = 1714;
        static constexpr BaseType TYPE_OF_COLLECTOR = 1715;
        static constexpr BaseType NAME_OF_COLLECTOR = 1716;
        static constexpr BaseType TOTAL_TCS_ALLOCATED = 1717;
        static constexpr BaseType PARTY_REFERENCE_NUMBER = 1718;
        static constexpr BaseType PARTY_CODE = 1719;
        static constexpr BaseType PAN_OF_PARTY = 1720;
        static constexpr BaseType NAME_OF_PARTY = 1721;
        static constexpr BaseType COLLECTION_CODE = 1722;
        static constexpr BaseType TOTAL_TAX_COLLECTED = 1723;
        static constexpr BaseType RATE_AT_WHICH_COLLECTED = 1724;
        static constexpr BaseType DATE_OF_COLLECTED = 1725;
        static constexpr BaseType REASON_FOR_DIFFERENCE_IN_COLLECTION = 1726;
        static constexpr BaseType DEDUCTEE_NON_RESIDENT = 1727;
        static constexpr BaseType DEDUCTEE_WITH_PERMANENT_ESTABLISHEMENT_IN_INDIA = 1728;
        static constexpr BaseType ASSESSMENT_YEAR = 1729;
        static constexpr BaseType PREVIOUS_RECEIPT_NUMBER = 1730;
        static constexpr BaseType TOTAL_ANNEXURES_ENCLOSED = 1731;
        static constexpr BaseType OTHER_INFORMATION = 1732;
        static constexpr BaseType NO_OF_RECORDS = 1733;
        static constexpr BaseType TAX_COLLECTED = 1734;
        static constexpr BaseType TAX_DEDUCTED = 1735;
        static constexpr BaseType TAX_DEPOSITED = 1736;
        static constexpr BaseType FACEVALUE = 1737;
        static constexpr BaseType INVESTMENT_NAME = 1738;
        static constexpr BaseType NATURE = 1739;
        static constexpr BaseType NUMBER_OF_UNITS = 1740;
        static constexpr BaseType PURCHASE_VALUE = 1741;
        static constexpr BaseType SELLING_VALUE = 1742;
        static constexpr BaseType UNITS_SOLD = 1743;
        static constexpr BaseType AUDITOR_INFORMATION_ID = 1744;
        static constexpr BaseType AUDITOR_INFORMATION = 1745;
        static constexpr BaseType AUDITOR_INFORMATION_OPINION = 1746;
        static constexpr BaseType BORROWER_ID = 1747;
        static constexpr BaseType BORROWER_NOTE = 1748;
        static constexpr BaseType BORROWER_DETAIL_ID = 1749;
        static constexpr BaseType BORROWER_DETAILED_NOTE = 1750;
        static constexpr BaseType BORROWER_DETAILED_ADDITIONAL_NOTE = 1751;
        static constexpr BaseType BORROWER_DETAILED_NOTE_DATE = 1752;
        static constexpr BaseType BORROWER_SECURED_VALUE = 1753;
        static constexpr BaseType BORROWER_UNSECURED_VALUE = 1754;
        static constexpr BaseType BORROWER_ST_SECURED_VALUE = 1755;
        static constexpr BaseType BORROWER_ST_UNSECURED_VALUE = 1756;
        static constexpr BaseType COMPONENT_NAME = 1757;
        static constexpr BaseType IMPORTED_PERCENTAGE = 1758;
        static constexpr BaseType IMPORTED_VALUE = 1759;
        static constexpr BaseType INDIGENOUS_PERCENTAGE = 1760;
        static constexpr BaseType INDIGENOUS_VALUE = 1761;
        static constexpr BaseType DOMESTIC_VALUE = 1762;
        static constexpr BaseType DOMESTIC_NOTE = 1763;
        static constexpr BaseType FOREIGN_VALUE = 1764;
        static constexpr BaseType FOREIGN_NOTE = 1765;
        static constexpr BaseType MULTIPLE_EMPLOYEE_VALUE = 1766;
        static constexpr BaseType MULTIPLE_EMPLOYEE_NOTE = 1767;
        static constexpr BaseType NOTE = 1768;
        static constexpr BaseType NUMBER = 1769;
        static constexpr BaseType LA_CASH_GENERATING_UNIT = 1770;
        static constexpr BaseType LA_CASH_GENERATING_UNIT_NOTE = 1771;
        static constexpr BaseType LA_CASH_GENERATING_UNIT_VALUE = 1772;
        static constexpr BaseType LA_INDIVIDUAL_VALUE = 1773;
        static constexpr BaseType TA_CASH_GENERATING_UNIT = 1774;
        static constexpr BaseType TA_CASH_GENERATING_UNIT_NOTE = 1775;
        static constexpr BaseType TA_CASH_GENERATING_UNIT_VALUE = 1776;
        static constexpr BaseType TA_INDIVIDUAL_VALUE = 1777;
        static constexpr BaseType CLASSNAME = 1778;
        static constexpr BaseType IMPAIRMENT_LOSS_VALUE = 1779;
        static constexpr BaseType IMPAIRMENT_LOSS_REVERSAL_VALUE = 1780;
        static constexpr BaseType LINE_ITEM_NOTE = 1781;
        static constexpr BaseType REVERSAL_IMPAIRMENT_LOSS_VALUE = 1782;
        static constexpr BaseType REVERSAL_IMPAIRMENT_LOSS_REVERSAL_VALUE = 1783;
        static constexpr BaseType REVERSAL_LINE_ITEM_NOTE = 1784;
        static constexpr BaseType CERTIFICATION_NUMBER = 1785;
        static constexpr BaseType CERTIFICATE_INVENTORY_NUMBER = 1786;
        static constexpr BaseType GOODS_IN_TRANSIT_VALUE = 1787;
        static constexpr BaseType INVENTORY_VALUE = 1788;
        static constexpr BaseType LOAN_ADVANCE_ID = 1789;
        static constexpr BaseType LOAN_ADVANCE_NOTE = 1790;
        static constexpr BaseType LOAN_ADVANCE_LT_DOUBTFUL_VALUE = 1791;
        static constexpr BaseType LOAN_ADVANCE_LT_SECURED_VALUE = 1792;
        static constexpr BaseType LOAN_ADVANCE_LT_UNSECURED_VALUE = 1793;
        static constexpr BaseType LOAN_ADVANCE_ST_DOUBTFUL_VALUE = 1794;
        static constexpr BaseType LOAN_ADVANCE_ST_SECURED_VALUE = 1795;
        static constexpr BaseType LOAN_ADVANCE_ST_UNSECURED_VALUE = 1796;
        static constexpr BaseType LEGAL_PROC_VALUE = 1797;
        static constexpr BaseType MISC_VALUE = 1798;
        static constexpr BaseType ONEROUS_VALUE = 1799;
        static constexpr BaseType REFUND_VALUE = 1800;
        static constexpr BaseType RESTORATION_VALUE = 1801;
        static constexpr BaseType RESTRUCTURING_VALUE = 1802;
        static constexpr BaseType WARRANTY_VALUE = 1803;
        static constexpr BaseType DEPLETION_VALUE = 1804;
        static constexpr BaseType OTHER_ADJUSTMENT_VALUE = 1805;
        static constexpr BaseType PRE_PROD_PL_VALUE = 1806;
        static constexpr BaseType PROD_PROP_VALUE = 1807;
        static constexpr BaseType TOTAL_CHANGES_VALUE = 1808;
        static constexpr BaseType TRANSFERRED_VALUE = 1809;
        static constexpr BaseType DESCRIPTION_OF_CATEGORY = 1810;
        static constexpr BaseType HIGHEST_TURNOVER = 1811;
        static constexpr BaseType ITC = 1812;
        static constexpr BaseType TURNOVER = 1813;
        static constexpr BaseType UNIT_OF_MEASURE = 1814;
        static constexpr BaseType UOM = 1814; //(Alias of: UNIT_OF_MEASURE)
        static constexpr BaseType CONSUMED_AMOUNT = 1815;
        static constexpr BaseType SALES_AMOUNT = 1816;
        static constexpr BaseType STOCK_ITEM_NAME = 1817;
        static constexpr BaseType INTER_SEGMENT = 1818;
        static constexpr BaseType SEGMENT_ID = 1819;
        static constexpr BaseType SEGMENT_NATURE = 1820;
        static constexpr BaseType UNALLOCATED_SEGMENT = 1821;
        static constexpr BaseType SHAREHOLDER_NAME = 1822;
        static constexpr BaseType CIN = 1823;
        static constexpr BaseType CLASS = 1824;
        static constexpr BaseType PERCENTAGE = 1825;
        static constexpr BaseType DISCLOSURE = 1826;
        static constexpr BaseType NATURE_OF_BUSSINESS = 1827;
        static constexpr BaseType METHOD_OF_ACC = 1828;
        static constexpr BaseType STATUTE_SCHEMA = 1829;
        static constexpr BaseType RESERVES_ACC_TREAT = 1830;
        static constexpr BaseType RESERVES_ACC_TREAT_DEVIATION = 1831;
        static constexpr BaseType RESERVES_ACC_TREAT_REASON = 1832;
        static constexpr BaseType SHARES_DESCRIPTION = 1833;
        static constexpr BaseType NO_OF_SHARES = 1834;
        static constexpr BaseType PERCCMP_EQUITY_SHARES = 1835;
        static constexpr BaseType CONSIDERATION_PAID = 1836;
        static constexpr BaseType NOTE_HTML = 1837;
        static constexpr BaseType ADDITIONAL_NOTE = 1838;
        static constexpr BaseType ADDITIONAL_DATE = 1839;
        static constexpr BaseType ADDITIONAL_NUMBER = 1840;
        static constexpr BaseType AUDIT_FIRM_NAME = 1841;
        static constexpr BaseType AUDITOR_NAME = 1842;
        static constexpr BaseType MEMBERSHIP_NUMBER = 1843;
        static constexpr BaseType SRN_NUMBER = 1844;
        static constexpr BaseType AUDIT_REPORT_SIGN_DATE = 1845;
        static constexpr BaseType BS_SIGN_DATE = 1846;
        static constexpr BaseType BOOK_VALUE = 1847;
        static constexpr BaseType DEBENTURE_NUMBER = 1848;
        static constexpr BaseType DEBENTURE_RATE = 1849;
        static constexpr BaseType DEBENTURE_VALUE = 1850;
        static constexpr BaseType EARLIEST_DATE_OF_RED = 1851;
        static constexpr BaseType NOMINAL_AMOUNT = 1852;
        static constexpr BaseType NOMINAL_VALUE = 1853;
        static constexpr BaseType TERMS_OF_RED_CONV = 1854;
        static constexpr BaseType CLASS_OF_GOODS = 1855;
        static constexpr BaseType PHYSICAL_QUANTITY_OF_STOCK_GOODS = 1856;
        static constexpr BaseType PHYSICAL_VALUE_OF_STOCK_GOODS = 1857;
        static constexpr BaseType QUANTITY_OF_GOODS_PURCHASED = 1858;
        static constexpr BaseType QUANTITY_OF_GOODS_SOLD = 1859;
        static constexpr BaseType QUANTITY_OF_STOCK_GOODS = 1860;
        static constexpr BaseType Unit_of_Measure = 1814; //(Alias of: UOM)
        static constexpr BaseType VALUE_OF_GOODS_PURCHASED = 1861;
        static constexpr BaseType VALUE_OF_GOODS_SOLD = 1862;
        static constexpr BaseType VALUE_OF_STOCK_GOODS = 1863;
        static constexpr BaseType DISCLOSURE_HTML = 1864;
        static constexpr BaseType ID_NUMBER = 1865;
        static constexpr BaseType DOB = 1008; //(Alias of: DATE_OF_BIRTH)
        static constexpr BaseType QUALIFICATION = 1866;
        static constexpr BaseType SHARES_HELD = 1867;
        static constexpr BaseType BASIC_PAY = 1868;
        static constexpr BaseType ALLOWANCES = 1869;
        static constexpr BaseType PERQUISITES = 1870;
        static constexpr BaseType COMMISSION = 1871;
        static constexpr BaseType SITTING_FEES = 1872;
        static constexpr BaseType STOCK_COMPENSATION = 1873;
        static constexpr BaseType POST_RETIREMENT_BENEFITS = 1874;
        static constexpr BaseType OTHER_COMPENSATION = 1875;
        static constexpr BaseType REMUNERATION = 1876;
        static constexpr BaseType COUNTRY_NAME = 1877;
        static constexpr BaseType MAXIMUM_BALANCE_AMOUNT = 1878;
        static constexpr BaseType INVESTMENTS_IN_ASSOCIATES = 1879;
        static constexpr BaseType PROPORTION_OF_OWNERSHIP = 1880;
        static constexpr BaseType PROPORTION_OF_VOTING_POWER = 1881;
        static constexpr BaseType ASSOCIATE_DESCRIPTION = 1882;
        static constexpr BaseType ASSOCIATE_NAME_DIFF_REP_DATE = 1883;
        static constexpr BaseType ASSOCIATE_CIN_DIFF_REP_DATE = 1884;
        static constexpr BaseType REP_DATE_DIFFERENCE = 1885;
        static constexpr BaseType NON_ADOP_OF_UNI_ACC_POL = 1886;
        static constexpr BaseType DIFF_IN_ACC_POLICY_FOLL = 1887;
        static constexpr BaseType SHARE_OF_COMM = 1888;
        static constexpr BaseType SHARE_OF_CL = 1889;
        static constexpr BaseType CONTINGENT_LIABILITIES = 1890;
        static constexpr BaseType REASON_FOR_NOT_ACC_INVEST = 1891;
        static constexpr BaseType PERCENTAGE_OF_OWNERSHIP_INTEREST = 1892;
        static constexpr BaseType CIN_OF_JV_DIFF_REP_DATE = 1893;
        static constexpr BaseType UNI_ACC_POLICY_NOT_FOLLOW = 1894;
        static constexpr BaseType DIFF_ACC_POLICY_FOLL_ITEMS = 1895;
        static constexpr BaseType CONTINGENT_LIABILITY_JV = 1896;
        static constexpr BaseType SHARE_CONTINGENT_LIABILITY_OTH_VEN = 1897;
        static constexpr BaseType SHARE_CONTILIAB_JV = 1898;
        static constexpr BaseType CONTINGENT_LIABILITY_OTH_VENTUE = 1899;
        static constexpr BaseType CAPITAL_COMMON_JV = 1900;
        static constexpr BaseType SHARE_CAPITAL_COMMON_JV = 1901;
        static constexpr BaseType OUTSTANDING_AMOUNT = 1902;
        static constexpr BaseType MAX_OUTSTANDING_AMOUNT = 1903;
        static constexpr BaseType OTHER_DISCLOSURES = 1904;
        static constexpr BaseType DETAILS_OF_INVENTROTY = 1905;
        static constexpr BaseType INVENTORY_MARKET_VALUE = 1906;
        static constexpr BaseType RIGHT_OF_OWNERSHIP_NOTE = 1907;
        static constexpr BaseType REALISABILITY_OF_INVENTORY_NOTE = 1908;
        static constexpr BaseType INCOME_FROM_INVENTORY_NOTE = 1909;
        static constexpr BaseType MORTGAGES_OF_LOAN_NOTE = 1910;
        static constexpr BaseType MORTGAGES_OF_SECURED_LOANS_NOTE = 1911;
        static constexpr BaseType MORTGAGES_OF_UNSECURED_LOAN_NOTE = 1912;
        static constexpr BaseType OTHER_DISCLOSURES_HTML = 1913;
        static constexpr BaseType INVESTMENT_TYPE = 1914;
        static constexpr BaseType PURCHASE_QUANTITY = 1915;
        static constexpr BaseType PURCHCHASE_FACE_VALUE = 1916;
        static constexpr BaseType PURCHASE_RATE = 1917;
        static constexpr BaseType SOLD_QUANTITY = 1918;
        static constexpr BaseType SELLLING_PRICE = 1919;
        static constexpr BaseType INVESTMENT_NATURE = 1920;
        static constexpr BaseType EXT_CUST_REVENUE = 1921;
        static constexpr BaseType OTH_OP_SEGMENT_REV = 1922;
        static constexpr BaseType SEGMENT_REVENUE = 1923;
        static constexpr BaseType SEGMENTINT_INCOME = 1924;
        static constexpr BaseType OM_ITEM_INCOME = 1925;
        static constexpr BaseType OM_NON_CASH_ITEM_INCOME = 1926;
        static constexpr BaseType INTEREST_EXPENSE = 1927;
        static constexpr BaseType DEP_AMOUNT = 1928;
        static constexpr BaseType PL_EX_ORD_ITEMS_ATTR_SEGMENT = 1929;
        static constexpr BaseType EX_ORD_ITEMS_ATTR_SEGMENT = 1930;
        static constexpr BaseType PROV_FOR_TAX_ATTR_SEGMENT = 1931;
        static constexpr BaseType PL_ATTR_SEGMENT = 1932;
        static constexpr BaseType ASSETS_ITEMS_ATTR_SEGMENT = 1933;
        static constexpr BaseType NON_CURR_ASSETS_ATTR_SEGMENT = 1934;
        static constexpr BaseType LIABILITIES_ATTR_SEGMENT = 1935;
        static constexpr BaseType UNIT_OF_MEASUREMENT = 1936;
        static constexpr BaseType NATURE_OF_ISSUING_AUTH = 1937;
        static constexpr BaseType NATURE_DESCRIPTION = 1938;
        static constexpr BaseType OUTSTANDING_BALANCE = 1939;
        static constexpr BaseType OUTSTANDING_BALANCE_TR_EXPL = 1940;
        static constexpr BaseType GIVEN_RECE_OUTSTANDING_BALANCE = 1941;
        static constexpr BaseType PROV_DOUBTFUL_DEBT_OUTSTANDING_BALANCE = 1942;
        static constexpr BaseType EXP_BAD_DOUBTFUL_DEBT = 1943;
        static constexpr BaseType TRANSACTION_DESCRIPTION = 1944;
        static constexpr BaseType TRANSACTION_AMOUNT = 1945;
        static constexpr BaseType REVENUE = 1946;
        static constexpr BaseType ASSETS = 1947;
        static constexpr BaseType ADD_AMOUNT = 1948;
        static constexpr BaseType TYPE_CURRENT_YEAR = 1949;
        static constexpr BaseType NATURE_CURRENT_YEAR = 1950;
        static constexpr BaseType NOM_VALUE_AUTH_SHARE_CURRENT_YEAR = 1951;
        static constexpr BaseType NUMBER_OF_AUTH_SHARE_CURRENT_YEAR = 1952;
        static constexpr BaseType VALUE_OF_AUTH_SHARE_CURRENT_YEAR = 1953;
        static constexpr BaseType NOM_VALUE_SUBS_SHARE_CURRENT_YEAR = 1954;
        static constexpr BaseType NUMBER_OF_SUB_SHARE_CURRENT_YEAR = 1955;
        static constexpr BaseType VALUE_OF_SUB_SHARE_CURRENT_YEAR = 1956;
        static constexpr BaseType NOM_VALUE_PAID_UP_SHARE_CURRENT_YEAR = 1957;
        static constexpr BaseType NUMBER_OF_PAID_UP_SHARE_CURRENT_YEAR = 1958;
        static constexpr BaseType VALUE_OF_PAID_UP_SHARE_CURRENT_YEAR = 1959;
        static constexpr BaseType NOM_VALUE_ISSUED_SHARE_CURRENT_YEAR = 1960;
        static constexpr BaseType NUMBER_OF_ISSUED_SHARE_CURRENT_YEAR = 1961;
        static constexpr BaseType VALUE_OF_ISSUED_SHARE_CURRENT_YEAR = 1962;
        static constexpr BaseType NOM_VALUE_ISSUED_DURING_PERIOD = 1963;
        static constexpr BaseType NUMBER_OF_SHARES_ISSUED_PUB_OFF = 1964;
        static constexpr BaseType AMOUNT_PUBLIC_ISSUED_DURING_PERIOD = 1965;
        static constexpr BaseType NUMBER_OF_BONUS_SHARES_ISSUED = 1966;
        static constexpr BaseType AMOUNT_OF_BONUS_ISSUED_DURING_PERIOD = 1967;
        static constexpr BaseType NUMBER_OF_RIGHT_SHARES_ISSUED = 1968;
        static constexpr BaseType AMOUNT_OF_RIGHT_ISSUED_DURING_PERIOD = 1969;
        static constexpr BaseType NUMBER_OF_SHARES_ISSUED_PVT_PMNT = 1970;
        static constexpr BaseType AMOUNT_PRV_PLACE_DURING_PERIOD = 1971;
        static constexpr BaseType NUMBER_OF_SHARES_PREF_ALLOT = 1972;
        static constexpr BaseType AMOUNT_PREF_ALLOT_DURING_PERIOD = 1973;
        static constexpr BaseType NUMBER_OF_SHARES_WITHOUT_PYMT = 1974;
        static constexpr BaseType AMOUNT_WITHOUT_PYMT_DURING_PERIOD = 1975;
        static constexpr BaseType NUMBER_OF_SHARES_ISSUED_AMG_SCH = 1976;
        static constexpr BaseType AMOUNT_OF_ISSUE_AMG_SCH = 1977;
        static constexpr BaseType NUMBER_OF_GLOBAL_DEPO_SHARES = 1978;
        static constexpr BaseType AMOUNT_GLOBAL_DEP_DURING_PERIOD = 1979;
        static constexpr BaseType NUMBER_OF_AMERICAN_DEP_SHARES = 1980;
        static constexpr BaseType AMOUNT_AMERICAN_DEP_DURING_PERIOD = 1981;
        static constexpr BaseType NUMBER_OF_OTHER_SHARES = 1982;
        static constexpr BaseType AMOUNT_OTH_SHARES_DURING_PERIOD = 1983;
        static constexpr BaseType NUMBER_OF_SHARES_CONV_SEC = 1984;
        static constexpr BaseType AMOUNT_SHARES_CONV_SEC_DURING_PERIOD = 1985;
        static constexpr BaseType NUMBER_OF_SHARES_ISSUED_DURING_PERIOD = 1986;
        static constexpr BaseType AGGR_AMOUNT_DURING_PERIOD = 1987;
        static constexpr BaseType FIRST_NAME = 1988;
        static constexpr BaseType MIDDLE_NAME = 1989;
        static constexpr BaseType LAST_NAME = 1990;
        static constexpr BaseType SIGN_DATE = 1991;
        static constexpr BaseType SUBSIDIARY_INFO = 1992;
        static constexpr BaseType SUBSIDIARY_COMPANY = 1993;
        static constexpr BaseType DETAILS_STNT_SEC212 = 1994;
        static constexpr BaseType SUBSIDIARY_INFO_HTML = 1995;
        static constexpr BaseType IS_FILEDBS = 1996;
        static constexpr BaseType SRN = 1997;
        static constexpr BaseType REASON_FOR_NO_FILING = 1998;
        static constexpr BaseType HOLDING_COMPANY = 1999;
        static constexpr BaseType BEC_SUB_DATE = 2000;
        static constexpr BaseType CEASING_DATE = 2001;
        static constexpr BaseType NO_OF_SHARES_HELD = 2002;
        static constexpr BaseType FACE_VALUE_OF_SHARES = 2003;
        static constexpr BaseType PAID_UP_VALUE_SHARES = 2004;
        static constexpr BaseType PERCENTAGE_SHARES = 2005;
        static constexpr BaseType VOTING_PROPORTION = 2006;
        static constexpr BaseType SUBSIDIARY_CURRENCY = 2007;
        static constexpr BaseType EXCHANGE_RATE = 2008;
        static constexpr BaseType SHARE_CAPITAL = 2009;
        static constexpr BaseType RESERVES_AND_SURPLUS = 2010;
        static constexpr BaseType TOTAL_ASSETS = 2011;
        static constexpr BaseType TOTAL_LIABILITIES = 2012;
        static constexpr BaseType INVESTMENT = 2013;
        static constexpr BaseType TOTAL_INCOME = 2014;
        static constexpr BaseType PROFIT_BEFORE_TAX = 2015;
        static constexpr BaseType PROVISION_FOR_TAX = 2016;
        static constexpr BaseType PROFIT_AFTER_TAX = 2017;
        static constexpr BaseType PROPOSED_DIVIDEND = 2018;
        static constexpr BaseType AGGR_AMT_OF_PLPY = 2019;
        static constexpr BaseType DET_AGGR_AMT_NOT_PAR_COMPANY = 2020;
        static constexpr BaseType AGGR_AMT_NOT_ACC_CY = 2021;
        static constexpr BaseType AGGR_AMT_NOT_ACC_PY = 2022;
        static constexpr BaseType DET_AGGR_AMT_DEALT_PAR_COMPANY = 2023;
        static constexpr BaseType AGGR_AMT_ACC_CY = 2024;
        static constexpr BaseType AGGR_AMT_ACC_PY = 2025;
        static constexpr BaseType ASSETS_LIABILITY_DETAILS = 2026;
        static constexpr BaseType INTERESTS_DETAILS = 2027;
        static constexpr BaseType NATURE_OF_RELATION = 2028;
        static constexpr BaseType JOINTLY_CONTRO_ASSETS = 2029;
        static constexpr BaseType BALANCE = 2030;
        static constexpr BaseType SECURED_BY = 2031;
        static constexpr BaseType PAYMENT_TERMS = 2032;
        static constexpr BaseType DEFAULT_PERIOD = 2033;
        static constexpr BaseType DEFAULT_AMOUNT = 2034;
        static constexpr BaseType SHARE_CLASS = 2035;
        static constexpr BaseType FACE_VALUE = 2036;
        static constexpr BaseType REDEMPTION_VALUE = 2037;
        static constexpr BaseType MATURITY_DATE = 2038;
        static constexpr BaseType AGGREGATE_AMOUNT = 2039;
        static constexpr BaseType ELEMENT_NAME = 2040;
        static constexpr BaseType ADDITIONS = 2041;
        static constexpr BaseType DEDUCTIONS = 2042;
        static constexpr BaseType OTHERS_ADJUSTMENT = 2043;
        static constexpr BaseType DEPRECIATION = 2044;
        static constexpr BaseType REVALUATION = 2045;
        static constexpr BaseType REVERSALS = 2046;
        static constexpr BaseType IMPAIRMENT_LOSS = 2047;
        static constexpr BaseType ACQUIRED = 2048;
        static constexpr BaseType REVALUATION_DATE = 2049;
        static constexpr BaseType YEAR = 2050;
        static constexpr BaseType QUOTED_AMOUNT = 2051;
        static constexpr BaseType QUOTED_MARKET_VALUE = 2052;
        static constexpr BaseType UNQUOTED_AMOUNT = 2053;
        static constexpr BaseType SHARE_NUMBER = 2054;
        static constexpr BaseType CORPORATE_BODY_NAME = 2055;
        static constexpr BaseType SUBSIDIARY = 2056;
        static constexpr BaseType EXTENT_OF_HOLDING = 2057;
        static constexpr BaseType QUOTED_INFO = 2058;
        static constexpr BaseType PAID_INFO = 2059;
        static constexpr BaseType IS_STATED_AT_COST = 2060;
        static constexpr BaseType VALUATION_BASIC = 2061;
        static constexpr BaseType FIRM_NAME = 2062;
        static constexpr BaseType TOTAL_CAPITAL = 2063;
        static constexpr BaseType PARTNER_NAME = 2064;
        static constexpr BaseType PROFIT_SHARE = 2065;
        static constexpr BaseType DUE_BY_DIRECTORS = 2066;
        static constexpr BaseType DUE_BY_OFFICERS = 2067;
        static constexpr BaseType SHARE_CAPITAL_NOTE = 2068;
        static constexpr BaseType SHARE_NAME = 2069;
        static constexpr BaseType SHARE_TYPE = 2070;
        static constexpr BaseType SHARES_ISSUED = 2071;
        static constexpr BaseType SHARES_BOUGHT = 2072;
        static constexpr BaseType PAID_UP_AMOUNT = 2073;
        static constexpr BaseType NET_VALUE = 2074;
        static constexpr BaseType COMPANY_TYPE = 2075;
        static constexpr BaseType SHARE_AMOUNT = 2076;
        static constexpr BaseType PAID_SHARES = 2077;
        static constexpr BaseType BONUS_SHARES = 2078;
        static constexpr BaseType BUY_BACK_SHARES = 2079;
        static constexpr BaseType UNI_SCHEMA = 2080;
        static constexpr BaseType MAX_ID = 2081;
        static constexpr BaseType UNI_SCHEMA_ENUM = 2082;
        static constexpr BaseType IS_DEFUNCT = 2083;
        static constexpr BaseType CATEGORY_ENUM_USID = 2084;
        static constexpr BaseType DEVSTAGE_ONLY = 2085;
        static constexpr BaseType UNI_SCHEMA_CONSTANT = 2086;
        static constexpr BaseType MERGE_MAP = 2087;
        static constexpr BaseType CATEGORY_CONST_USID = 2088;
        static constexpr BaseType UNI_CONTENT_SCHEMA_PROPERTIES = 2089;
        static constexpr BaseType IS_APISCHEMA = 2090;
        static constexpr BaseType TWSchemaType = 2091;
        static constexpr BaseType HASHSECTION_CONTENT_ID = 2092;
        static constexpr BaseType DCSCHEMA_CONTENT_ID = 2093;
        static constexpr BaseType IS_RESERVED = 2094;
        static constexpr BaseType UNI_CONTAINER_CONTENT = 2095;
        static constexpr BaseType UNI_CONTENT_SCHEMA = 2096;
        static constexpr BaseType APP_SCHEMA_METADATA = 2097;
        static constexpr BaseType START_TICK = 2098;
        static constexpr BaseType RESPONSIVENESS_PTR = 2099;
        static constexpr BaseType WINDOW = 2100;
        static constexpr BaseType PAGE = 2101;
        static constexpr BaseType LABEL = 2102;
        static constexpr BaseType BUTTON = 2103;
        static constexpr BaseType TEXTEDIT = 2104;
        static constexpr BaseType LIST = 2105;
        static constexpr BaseType MENU = 2106;
        static constexpr BaseType LINE = 2107;
        static constexpr BaseType UIFIELD = 2108;
        static constexpr BaseType UIFORM = 2109;
        static constexpr BaseType UIREPORT = 2110;
        static constexpr BaseType WIDGET_TYPE = 2111;
        static constexpr BaseType EV_CALLBACK_PAYLOAD = 2112;
        static constexpr BaseType EV_CALLBACK_APIS = 2113;
        static constexpr BaseType EV_CALLBACK_WINDOW = 2114;
        static constexpr BaseType EV_CALLBACK_ELEMENT = 2115;
        static constexpr BaseType EV_CALLBACK_DATA = 2116;
        static constexpr BaseType EV_CALLBACK_EVENT_TYPE = 2117;
        static constexpr BaseType EV_CALLBACK_KEY_PRESS = 2118;
        static constexpr BaseType MULTILINE = 2119;
        static constexpr BaseType TEXT_WRAP = 2120;
        static constexpr BaseType ANCHOR = 2121;
        static constexpr BaseType MARGIN = 2122;
        static constexpr BaseType FONT_SIZE = 2123;
        static constexpr BaseType CHANGE_EXISTING_UI = 2124;
        static constexpr BaseType WIDTH_TYPE = 2125;
        static constexpr BaseType HEIGHT_TYPE = 2126;
        static constexpr BaseType WIDTH_RELATIVE_TO = 2127;
        static constexpr BaseType HEIGHT_RELATIVE_TO = 2128;
        static constexpr BaseType IS_PASSWORD = 2129;
        static constexpr BaseType CHANGE_UI_PROPERTY = 2130;
        static constexpr BaseType UI_PROPERTY = 2131;
        static constexpr BaseType UI_PROPERTY_VALUE = 2132;
        static constexpr BaseType EVENT_STRING = 2133;
        static constexpr BaseType FOCUS_ALLOWED = 2134;
        static constexpr BaseType NEXT_FOCUS_ELEM = 2135;
        static constexpr BaseType CONTEXT_ID = 2136;
        static constexpr BaseType EV_VALIDATE_TEXT = 2137;
        static constexpr BaseType EV_ACCEPT_TEXT = 2138;
        static constexpr BaseType BORDER_COLOR = 2139;
        static constexpr BaseType IS_EDITABLE = 2140;
        static constexpr BaseType LABEL_TYPE = 2141;
        static constexpr BaseType LIST_DATA = 2142;
        static constexpr BaseType DEFAULT_TEXT = 2143;
        static constexpr BaseType SCHEMA_FIELD_NAME = 2144;
        static constexpr BaseType MENU_ENTRY = 2145;
        static constexpr BaseType MENU_API = 2146;
        static constexpr BaseType MENU_API_ID = 2147;
        static constexpr BaseType MENU_PAYLOAD = 2148;
        static constexpr BaseType REPORT_ROW = 2149;
        static constexpr BaseType VIEW_TEMPLATE_ID = 2150;
        static constexpr BaseType VIEW_DATA = 2151;
        static constexpr BaseType VIEW_SOURCE_API = 2152;
        static constexpr BaseType WELCOME_MESSAGE = 2153;
        static constexpr BaseType PAGE_BACK = 2154;
        static constexpr BaseType PDCID = 2155;
        static constexpr BaseType IDCID = 2156;
        static constexpr BaseType VDCID = 2157;
        static constexpr BaseType SCREEN_ID = 2158;
        static constexpr BaseType WINDOW_PARMS = 2159;
        static constexpr BaseType IS_EXIT_MSG_COMM = 2160;
        static constexpr BaseType IS_EXIT_MSG_CONF = 2161;
        static constexpr BaseType ADDITIONAL_BUTTONS = 2162;
        static constexpr BaseType REPORT_ID = 2163;
        static constexpr BaseType WELCOME_PAGE = 2164;
        static constexpr BaseType MESSAGE_PAGE = 2165;
        static constexpr BaseType MENU_LIST = 2166;
        static constexpr BaseType REPORT_VIEW = 2167;
        static constexpr BaseType COMPOUND_VIEW = 2168;
        static constexpr BaseType HEADER = 2169;
        static constexpr BaseType TITLE = 2170;
        static constexpr BaseType SUB_TITLE = 2171;
        static constexpr BaseType NORMAL = 2172;
        static constexpr BaseType MENU_ITEM = 2173;
        static constexpr BaseType LEFT = 2174;
        static constexpr BaseType RIGHT = 2175;
        static constexpr BaseType TOP = 2176;
        static constexpr BaseType BOTTOM = 2177;
        static constexpr BaseType CENTER = 2178;
        static constexpr BaseType HORIZONTAL_CENTER = 2179;
        static constexpr BaseType VERTICAL_CENTER = 2180;
        static constexpr BaseType EV_SINGLE_CLICK = 2181;
        static constexpr BaseType EV_DOUBLE_CLICK = 2182;
        static constexpr BaseType EV_RIGHT_CLICK = 2183;
        static constexpr BaseType LONG_PRESS = 2184;
        static constexpr BaseType VALUE_SELECT = 2185;
        static constexpr BaseType VALUE_CHANGE = 2186;
        static constexpr BaseType WINDOW_WIDTH_CHANGE = 2187;
        static constexpr BaseType WINDOW_HEIGHT_CHANGE = 2188;
        static constexpr BaseType WINDOW_XPOS_CHANGE = 2189;
        static constexpr BaseType WINDOW_YPOS_CHANGE = 2190;
        static constexpr BaseType WINDOW_STATE_CHANGE = 2191;
        static constexpr BaseType WINDOW_TITLE_CHANGE = 2192;
        static constexpr BaseType WINDOW_VISIBILITY_CHANGE = 2193;
        static constexpr BaseType TEXT_CHANGE = 2194;
        static constexpr BaseType TAB_PRESS = 2195;
        static constexpr BaseType ENTER_PRESS = 2196;
        static constexpr BaseType ESC_PRESS = 2197;
        static constexpr BaseType KEY_PRESS = 2198;
        static constexpr BaseType KEY_RELEASED = 2199;
        static constexpr BaseType ON_FOCUS_OUT = 2200;
        static constexpr BaseType STOP_APP_EVENT = 2201;
        static constexpr BaseType EXIT_WINDOW_EVENT = 2202;
        static constexpr BaseType RELOAD_LAYOUT_EVENT = 2203;
        static constexpr BaseType CREATE_WINDOW_EVENT = 2204;
        static constexpr BaseType INVOKE_BACK_PAGE_EVENT = 2205;
        static constexpr BaseType PROCESSING_ERROR_EVENT = 2206;
        static constexpr BaseType FIELD_VALIDATION_EVENT = 2207;
        static constexpr BaseType MENU_NAVIGATION_EVENT = 2208;
        static constexpr BaseType FORM_SUBMIT_EVENT = 2209;
        static constexpr BaseType INTERNAL_DATA_ENTRY_SUCCESS_EVENT = 2210;
        static constexpr BaseType UI_EVENT_ID = 2211;
        static constexpr BaseType WIDGET_ID = 2212;
        static constexpr BaseType CONSOLE_RUNTIME_ELEM_ID = 2213;
        static constexpr BaseType WINDOW_ID = 2214;
        static constexpr BaseType IS_VALIDATION_SUCCESS = 2215;
        static constexpr BaseType WIDGET_DATA = 2216;
        static constexpr BaseType PAYLOAD_DATA = 2217;
        static constexpr BaseType FORM_ENTRY_PAYLOAD = 2218;
        static constexpr BaseType ABSOLUTE_POS = 2219;
        static constexpr BaseType RELATIVE_POS = 2220;
        static constexpr BaseType SOLID = 2221;
        static constexpr BaseType DOTTED = 2222;
        static constexpr BaseType DASHED = 2223;
        static constexpr BaseType ROBOTO = 2224;
        static constexpr BaseType ARIAL = 2225;
        static constexpr BaseType CALIBRI = 2226;
        static constexpr BaseType PORTRAIT = 2227;
        static constexpr BaseType LANDSCAPE = 2228;
        static constexpr BaseType COMMAND_ID = 2229;
        static constexpr BaseType COMMAND_EXPRESSION = 2230;
        static constexpr BaseType INPUT = 2231;
        static constexpr BaseType OUTPUT = 2232;
        static constexpr BaseType PAGE_ID = 2233;
        static constexpr BaseType REPORT_DEFINITION = 2234;
        static constexpr BaseType FROM = 2235;
        static constexpr BaseType TO = 2236;
        static constexpr BaseType API_ID = 2237;
        static constexpr BaseType API_PAYLOAD = 2238;
        static constexpr BaseType API_DESTINATION = 2239;
        static constexpr BaseType CLIENTPF_COMMAND_OPENPAGE = 2240;
        static constexpr BaseType CLIENTPF_COMMAND_REFRESHPAGE = 2241;
        static constexpr BaseType CLIENTPF_COMMAND_COMPUTE = 2242;
        static constexpr BaseType CLIENTPF_COMMAND_EXECUTEREPORT = 2243;
        static constexpr BaseType CLIENTPF_COMMAND_EXECUTEAPI = 2244;
        static constexpr BaseType CLIENTPF_COMMAND_BACK = 2245;
        static constexpr BaseType CLIENTPF_COMMAND_COPY = 2246;
        static constexpr BaseType CLIENTPF_COMMAND_LOADSCHEMA = 2247;
        static constexpr BaseType COMMANDS = 2248;
        static constexpr BaseType PAGE_DEFINITION_FIELD = 2249;
        static constexpr BaseType ACTION_DEFINITION_FIELD = 2250;
        static constexpr BaseType DATA_SCHEMA = 2251;
        static constexpr BaseType CLIENT_SCHEMA = 2252;
        static constexpr BaseType ACTION_ID = 2253;
        static constexpr BaseType PANIC_OBJECT = 2254;
        static constexpr BaseType ERROR_STRING = 2255;
        static constexpr BaseType FORMAT_PARMS = 2256;
        static constexpr BaseType UI_POSITION = 2257;
        static constexpr BaseType X_POS = 2258;
        static constexpr BaseType Y_POS = 2259;
        static constexpr BaseType UI_DIMENSION = 2260;
        static constexpr BaseType CALC_HEIGHT = 2261;
        static constexpr BaseType CALC_WIDTH = 2262;
        static constexpr BaseType DIMENSION_UNIT = 2263;
        static constexpr BaseType DIM_REFERENCE = 2264;
        static constexpr BaseType UI_PADDING = 2265;
        static constexpr BaseType LEFT_PAD = 2266;
        static constexpr BaseType RIGHT_PAD = 2267;
        static constexpr BaseType TOP_PAD = 2268;
        static constexpr BaseType BOTTOM_PAD = 2269;
        static constexpr BaseType UI_BORDER = 2270;
        static constexpr BaseType STYLE = 2271;
        static constexpr BaseType ALIGNMENT = 2272;
        static constexpr BaseType H_ALIGNMENT = 2273;
        static constexpr BaseType V_ALIGNMENT = 2274;
        static constexpr BaseType UI_FONT = 2275;
        static constexpr BaseType FAMILY = 2276;
        static constexpr BaseType IS_BOLD = 2277;
        static constexpr BaseType IS_ITALIC = 2278;
        static constexpr BaseType IS_UNDERLINED = 2279;
        static constexpr BaseType STRINGIFIED_ID = 2280;
        static constexpr BaseType VDC_SCREEN_ID = 2281;
        static constexpr BaseType BACKGROUND_COLOR = 2282;
        static constexpr BaseType IS_MINIZABLE = 2283;
        static constexpr BaseType IS_CLOSABLE = 2284;
        static constexpr BaseType IS_RESIZABLE = 2285;
        static constexpr BaseType IS_VISIBLE = 2286;
        static constexpr BaseType LABEL_API = 2287;
        static constexpr BaseType DATA_API = 2288;
        static constexpr BaseType PHYSICAL_WINDOW = 2289;
        static constexpr BaseType CHILD_ID = 2290;
        static constexpr BaseType PARENT_ID = 2291;
        static constexpr BaseType PAGE_LABEL_API_ID = 2292;
        static constexpr BaseType PAGE_DATA_API_ID = 2293;
        static constexpr BaseType BACK_PAGE_ID = 2294;
        static constexpr BaseType PANE = 2295;
        static constexpr BaseType PART = 2296;
        static constexpr BaseType FULL_WIDTH = 2297;
        static constexpr BaseType FULL_HEIGHT = 2298;
        static constexpr BaseType TEXT = 2299;
        static constexpr BaseType IS_CLICKABLE = 2300;
        static constexpr BaseType ON_CLICK_API = 2301;
        static constexpr BaseType ON_CLICK_PAGE_ID = 2302;
        static constexpr BaseType IS_ENABLED = 2303;
        static constexpr BaseType IS_SUBMIT_BUTTON = 2304;
        static constexpr BaseType ON_SUCCESS = 2305;
        static constexpr BaseType ON_FAILURE = 2306;
        static constexpr BaseType HINT_TEXT = 2307;
        static constexpr BaseType IS_MANDATORY = 2308;
        static constexpr BaseType DATATYPE = 2309;
        static constexpr BaseType VALIDATION_API_ID = 2310;
        static constexpr BaseType DATASET_URL = 2311;
        static constexpr BaseType DATA_URL = 2312;
        static constexpr BaseType UI_TEMPLATE_WELCOME_MESSAGE = 2313;
        static constexpr BaseType TEMPLATE_ID = 2314;
        static constexpr BaseType ON_SUBMIT = 2315;
        static constexpr BaseType UI_TEMPLATE_MENU_LIST = 2316;
        static constexpr BaseType MENU_TITLE = 2317;
        static constexpr BaseType UI_TEMPLATE_REPORT_VIEW = 2318;
        static constexpr BaseType REPORT_HEADER = 2319;
        static constexpr BaseType DATA_SOURCE_API_ID = 2320;
        static constexpr BaseType REPORT_COLUMN = 2321;
        static constexpr BaseType DATA_SCHEMA_FIELD_ID = 2322;
        static constexpr BaseType UI_TEMPLATE_FORM = 2323;
        static constexpr BaseType FORM_ENTRY = 2324;
        static constexpr BaseType FIELD_VALIDATE_PARMS = 2325;
        static constexpr BaseType VALIDATION_API_SCHEMA_ID = 2326;
        static constexpr BaseType UI_TEMPLATE_COMPOUND_VIEW = 2327;
        static constexpr BaseType CHILD = 2328;
        static constexpr BaseType SCREEN = 2329;
        static constexpr BaseType DEVICE_PIXEL_RATIO = 2330;
        static constexpr BaseType LOGICAL_PPI = 2331;
        static constexpr BaseType PHYSICAL_PPI = 2332;
        static constexpr BaseType ORIENTATION = 2333;
        static constexpr BaseType SCREEN_LIST = 2334;
        static constexpr BaseType DC_LIST = 2335;
        static constexpr BaseType ZONE = 2336;
        static constexpr BaseType LOGICAL_UNIT_REF = 2337;
        static constexpr BaseType PLATFORM_OBJ_REF = 2338;
        static constexpr BaseType ROW = 2339;
        static constexpr BaseType CELL = 2340;
        static constexpr BaseType CONSOLE_COMM_PARMS = 2341;
        static constexpr BaseType COMMAND_TYPE = 2342;
        static constexpr BaseType CONSOLE_PAYLOAD = 2343;
        static constexpr BaseType APPLICATION_GATEWAY_OF_TALLY_OBJ = 2344;
        static constexpr BaseType GATEWAY_REPORTS = 2345;
        static constexpr BaseType APPLICATION_STATE = 2346;
        static constexpr BaseType REPORT = 2347;
        static constexpr BaseType IDC_ADDITIONAL_INFO = 2348;
        static constexpr BaseType VDC_ID = 2349;
        static constexpr BaseType DRIVERDC_ID = 2350;
        static constexpr BaseType DRIVERDC_TYPE = 2351;
        static constexpr BaseType FRAME_PAGE_OBJECT = 2352;
        static constexpr BaseType FRAME_PAGE_ID = 2353;
        static constexpr BaseType PANE_OBJECT_ID = 2354;
        static constexpr BaseType PANE_ID = 2355;
        static constexpr BaseType CONSOLE = 2356;
        static constexpr BaseType PRESENTATION_RENDER_WINDOW_REQUEST_SCHEMA = 2357;
        static constexpr BaseType PRESENTATION_PROCESS_LAYOUT_REQUEST_SCHEMA = 2358;
        static constexpr BaseType PRESENTATION_LAUNCH_RUNTIME_WINDOW_REQUEST_SCHEMA = 2359;
        static constexpr BaseType PRESENTATION_CREATE_STARTUP_WINDOW_REQUEST_SCHEMA = 2360;
        static constexpr BaseType PRESENTATION_CLOSE_APP_WINDOW_REQUEST_SCHEMA = 2361;
        static constexpr BaseType PRESENTATION_PROCESS_EVENTS_REQUEST_SCHEMA = 2362;
        static constexpr BaseType PRESENTATION_INTERNAL_UI_EVENT_RESPONSE_SCHEMA = 2363;
        static constexpr BaseType IS_COMPLETE = 2364;
        static constexpr BaseType ITERATOR = 2365;
        static constexpr BaseType PRAJAPATI_IP = 2366;
        static constexpr BaseType LAN_IP = 2367;
        static constexpr BaseType PASSWORD = 2368;
        static constexpr BaseType TW_ADMINDC_LANG_OBJ = 2369;
        static constexpr BaseType TW_ADMINDC_LANG_STR = 2370;
        static constexpr BaseType TW_ADMINDC_QUERY_OBJ = 2371;
        static constexpr BaseType TW_QUERY_RESULT_ID = 2372;
        static constexpr BaseType TW_APP_PREFS_OBJECT = 2373;
        static constexpr BaseType TW_APP_LANGUAGE_PREF = 2374;
        static constexpr BaseType TW_APP_DATE_FORMAT_PREF = 2375;
        static constexpr BaseType TW_APP_OS_LANG_PREF = 2376;
        static constexpr BaseType TW_APP_PRAJAPATI_IP = 2377;
        static constexpr BaseType TW_APP_LAN_IP = 2378;
        static constexpr BaseType TW_APP_USER_ID = 2379;
        static constexpr BaseType TW_YOGINI_BS_FILE_OBJECT = 2380;
        static constexpr BaseType TW_APP_YOGINI_BS_FILE = 2381;
        static constexpr BaseType TW_LANGUAGE_LIST = 2382;
        static constexpr BaseType ITEM = 2383;
        static constexpr BaseType TW_UNIVERSE_SUPERUSERS = 2384;
        static constexpr BaseType TW_UNIVERSE_SUPERUSER = 2385;
        static constexpr BaseType TW_SUPERUSER_ID = 2386;
        static constexpr BaseType TW_SUPERUSER_EMAIL_ID = 2387;
        static constexpr BaseType TW_APP_CURRENT_LANGUAGE_OBJ = 2388;
        static constexpr BaseType TW_APP_CURRENT_LANG = 2389;
        static constexpr BaseType SCHEMA_GET_LANGUAGES = 2390;
        static constexpr BaseType CONDITION = 2391;
        static constexpr BaseType LANGUAGE_OBJ = 2392;
        static constexpr BaseType TW_QUERY_SCHEMA = 2393;
        static constexpr BaseType TW_QUERY_ID = 2394;
        static constexpr BaseType COMPANY_PATH = 2395;
        static constexpr BaseType USER_OBJECT = 2396;
        static constexpr BaseType TW_SERVERDC_QUERY_ID = 2397;
        static constexpr BaseType LEDGER_OBJECT = 2398;
        static constexpr BaseType AUTHENTICATED_USER_OBJECT = 2399;
        static constexpr BaseType USER_IDENTIFIER = 2400;
        static constexpr BaseType LEDGER_OBJECT_EXT = 2401;
        static constexpr BaseType COMPANY_OBJECT = 2402;
        static constexpr BaseType TRANSITION_CONFIG = 2403;
        static constexpr BaseType OWNER_IDENTIFIER = 2404;
        static constexpr BaseType OWNER_PASSWORD = 2405;
        static constexpr BaseType PATH_OBJECT = 2406;
        static constexpr BaseType DEF_CUST_PATH = 2407;
        static constexpr BaseType DEF_APP_PATH = 2408;
        static constexpr BaseType MESSAGE_OBJECT = 2409;
        static constexpr BaseType MESSAGE_ID = 2410;
        static constexpr BaseType MESSAGE_COMMAND = 2411;
        static constexpr BaseType PRIMARY_OBJECT = 2412;
        static constexpr BaseType OPEN_COMPANY_LIST_OBJ = 2413;
        static constexpr BaseType ADMIN = 2414;
        static constexpr BaseType MESSAGE = 2415;
        static constexpr BaseType CDCID = 2416;
        static constexpr BaseType DITOBJECT = 2417;
        static constexpr BaseType DITVERSION = 2418;
        static constexpr BaseType USEROBJECT = 2419;
        static constexpr BaseType USERID = 2420;
        static constexpr BaseType RESERVEOBJECT = 2421;
        static constexpr BaseType RESERVEIPID = 2422;
        static constexpr BaseType IPV4OBJECT = 2423;
        static constexpr BaseType IPV4IPID = 2424;
        static constexpr BaseType TW_CLIENT_QUERY_OBJ = 2425;
        static constexpr BaseType BOOTSTRAPDATASECTION = 2426;
        static constexpr BaseType PRAJAPTIDATASECTION = 2427;
        static constexpr BaseType DOES_PAGE_EXIST = 2428;
        static constexpr BaseType PRIMARY_HASH = 2429;
        static constexpr BaseType TW_TS_CONFIG_API_SCHEMA = 2430;
        static constexpr BaseType SELF_IPID = 2431;
        static constexpr BaseType UNIVERSE_NAME = 2432;
        static constexpr BaseType UNIVERSE_IPID = 2433;
        static constexpr BaseType UNIVERSE_ID = 2434;
        static constexpr BaseType UNIVERSE_OBJECT = 2435;
        static constexpr BaseType TW_TS_CONFIG_RESP_API_SCHEMA = 2436;
        static constexpr BaseType TW_RESPONSE_MESSAGE = 2437;
        static constexpr BaseType PING_SCRATCHPAD_SCHEMA = 2438;
        static constexpr BaseType DUMMY_FIELD_ID_1 = 2439;
        static constexpr BaseType FILTER = 2440;
        static constexpr BaseType STARTS_WITH = 2441;
        static constexpr BaseType PREMISE_BOOTSTRAP_REQ_SCHEMA = 2442;
        static constexpr BaseType IPID_AND_ITS_STATUS = 2443;
        static constexpr BaseType IPID_MANUALLY_ENTERED = 2444;
        static constexpr BaseType IPID_STATUS = 2445;
        static constexpr BaseType PREMISE_FETCH_IPIDS_RESP_SCHEMA = 2446;
        static constexpr BaseType LOGINHANDLER_REQ_SCHEMA = 2447;
        static constexpr BaseType YOGINI_BOOTSTRAPHANDLER_REQ_SCHEMA = 2448;
        static constexpr BaseType PREMISE_ADMINQUERY_REQ_SCHEMA = 2449;
        static constexpr BaseType PREMISE_LANGUAGEHANDLER_REQ_SCHEMA = 2450;
        static constexpr BaseType PREMISE_ADMINQUERY_CONTEXT_SCHEMA = 2451;
        static constexpr BaseType TW_REQUEST_CONTEXT_OS_LANG = 2452;
        static constexpr BaseType TW_REQUEST_LOGGED_IN_USERS = 2453;
        static constexpr BaseType TW_REQUEST_ITERATOR_ID = 2454;
        static constexpr BaseType PREMISE_LANGUAGEQUERY_RESP_SCHEMA = 2455;
        static constexpr BaseType CONNECT_IPADDRESS = 2456;
        static constexpr BaseType CONNECT_PORT = 2457;
        static constexpr BaseType UNIVERSE_IPADDRESS = 2458;
        static constexpr BaseType UNIVERSE_PORT = 2459;
        static constexpr BaseType PRAJAPATI_FILE_PATH = 2460;
        static constexpr BaseType TW_LIST_OF_PRAJAPATI_IPS = 2461;
        static constexpr BaseType YOGINI_OPENPRAJAPATIDB_REQ_SCHEMA = 2462;
        static constexpr BaseType YOGINI_ADDPRAJAPATIIP_REQ_SCHEMA = 2463;
        static constexpr BaseType YOGINI_DELETEPRAJAPATIIP_REQ_SCHEMA = 2464;
        static constexpr BaseType YOGINI_SHOWPRAJAPATIIPS_REQ_SCHEMA = 2465;
        static constexpr BaseType YOGINI_SHOWPRAJAPATIIPS_RESP_SCHEMA = 2466;
        static constexpr BaseType TW_SITE_CONFIG_API_SCHEMA = 2467;
        static constexpr BaseType TW_SITE_CONFIG_RESP_API_SCHEMA = 2468;
        static constexpr BaseType BOOTSTRAP_FILE_PATH = 2469;
        static constexpr BaseType KSHETRAPAL_OPENFILE_REQ_SCHEMA = 2470;
        static constexpr BaseType DIT_OBJECT = 2471;
        static constexpr BaseType TW_LIST_OF_USER_IDS = 2472;
        static constexpr BaseType REQ_USER_IDENTIFIER = 2473;
        static constexpr BaseType OBJECT_ID = 2474;
        static constexpr BaseType OTP = 2475;
        static constexpr BaseType TW_OTP_MESSAGE = 2476;
        static constexpr BaseType TW_OTP_COUNT = 2477;
        static constexpr BaseType USER_URL = 2478;
        static constexpr BaseType SOURCE = 2479;
        static constexpr BaseType COLUMN = 2480;
        static constexpr BaseType ITEM_ID = 2481;
        static constexpr BaseType PATH = 2482;
        static constexpr BaseType ELEMENT = 2483;
        static constexpr BaseType FIELD = 2484;
        static constexpr BaseType OBJECT = 2485;
        static constexpr BaseType IS_REPEATED = 2486;
        static constexpr BaseType PAGE_DEFINITION = 2487;
        static constexpr BaseType IP = 2488;
        static constexpr BaseType PORT = 2489;
        static constexpr BaseType SERVER_OBJECT = 2490;
        static constexpr BaseType PRE_COMPUTE_API = 2491;
        static constexpr BaseType CDC_AUTHENTICATED_USER_OBJ = 2492;
        static constexpr BaseType CDC_COMPANY_DETAILS_OBJ = 2493;
        static constexpr BaseType OWNER = 2494;
        static constexpr BaseType CDC_USER_OBJ = 2495;
        static constexpr BaseType CDC_COMPANY_OBJ = 2496;
        static constexpr BaseType USER_DEF_PATH_OBJ = 2497;
        static constexpr BaseType CDC_UI_OBJ = 2498;
        static constexpr BaseType DUMMY = 2499;
        static constexpr BaseType CLIENT_CONNECTREQUEST_REQ_SCHEMA = 2500;
        static constexpr BaseType CLIENT_CONNECTREQUEST_RESP_SCHEMA = 2501;
        static constexpr BaseType CLIENT_DISCONNECTREQUEST_REQ_SCHEMA = 2502;
        static constexpr BaseType SOURCE_UNI_SCHEMA = 2503;
        static constexpr BaseType ENUM_LIST = 2504;
        static constexpr BaseType SOURCE_UNI_SCHEMA_ENUM = 2505;
        static constexpr BaseType CATEGORY_ENUM_OBJID = 2506;
        static constexpr BaseType BASE_TYPE = 2507;
        static constexpr BaseType DEVCONFIG_ENUM_OBJID = 2508;
        static constexpr BaseType RESV_ENUM_TYPE = 2509;
        static constexpr BaseType ALLOW_CHILDREN = 2510;
        static constexpr BaseType IS_FINAL = 2511;
        static constexpr BaseType CEILING_VALUE = 2512;
        static constexpr BaseType LOCAL_SCOPE = 2513;
        static constexpr BaseType IS_COMPILE_TIME = 2514;
        static constexpr BaseType FOR_JAVA = 2515;
        static constexpr BaseType INITIAL_ID = 2516;
        static constexpr BaseType CONSTANT_LIST = 2517;
        static constexpr BaseType SOURCE_UNI_SCHEMA_CONSTANT = 2518;
        static constexpr BaseType PARENT_CONTENT_ID = 2519;
        static constexpr BaseType CATEGORY_CONST_OBJID = 2520;
        static constexpr BaseType IS_DS_RESOURCE_METRIC = 2521;
        static constexpr BaseType IS_SCOPED = 2522;
        static constexpr BaseType ORIG_CONST_OBJID = 2523;
        static constexpr BaseType SOURCE_CONTENT_SCHEMA_PROPERTIES = 2524;
        static constexpr BaseType HASHSECTION_OBJID = 2525;
        static constexpr BaseType SOURCE_CONTAINER_CONTENT = 2526;
        static constexpr BaseType SOURCE_CONTENT_SCHEMA = 2527;
        static constexpr BaseType TWCMakePresetCacheVar = 2528;
        static constexpr BaseType TWName = 2529;
        static constexpr BaseType TWType = 2530;
        static constexpr BaseType TWValue = 2531;
        static constexpr BaseType TWCMakePresetEnvVar = 2532;
        static constexpr BaseType TWCMakeVSSVendorVar = 2533;
        static constexpr BaseType TWCMakeVSRSVendorVar = 2534;
        static constexpr BaseType TWToolChainFlags = 2535;
        static constexpr BaseType TWHostToolChainFlags = 2536;
        static constexpr BaseType BUILDGEN_OS = 2537;
        static constexpr BaseType TWVSName = 2538;
        static constexpr BaseType TWCMakeName = 2539;
        static constexpr BaseType TWBuildGeneratorName = 2540;
        static constexpr BaseType TWKernel = 2541;
        static constexpr BaseType TWIsBuildHost = 2542;
        static constexpr BaseType TWHostOS = 2543;
        static constexpr BaseType TWInactive = 2544;
        static constexpr BaseType TWVSIntelliSenseMode = 2545;
        static constexpr BaseType BUILDGEN_KERNEL = 2546;
        static constexpr BaseType BUILDGEN_ARCH = 2547;
        static constexpr BaseType BUILDGEN_PRESET = 2548;
        static constexpr BaseType TWIsCustom = 2549;
        static constexpr BaseType BUILDGEN_CMAKE_PRESET = 2550;
        static constexpr BaseType VS_INTELLISENSE_MODE = 2551;
        static constexpr BaseType IS_CONFIGURE_PRESET = 2552;
        static constexpr BaseType IS_INDIVIDUAL = 2553;
        static constexpr BaseType BUILD_ENTITY_TYPE = 2554;
        static constexpr BaseType REFOBJ_ID = 2555;
        static constexpr BaseType DEPENDS = 2556;
        static constexpr BaseType CONFIF_DEPENDS = 2557;
        static constexpr BaseType BUILDGEN_CONFIG = 2558;
        static constexpr BaseType TWForPreset = 2559;
        static constexpr BaseType BUILDGEN_STAGE = 2560;
        static constexpr BaseType TWStageConfigs = 2561;
        static constexpr BaseType BUILDGEN_TRUNK = 2562;
        static constexpr BaseType TWTrunkStages = 2563;
        static constexpr BaseType TWSCMTrunkName = 2564;
        static constexpr BaseType BUILD_CONDITION_VALUE = 2565;
        static constexpr BaseType COND_TYPE = 2566;
        static constexpr BaseType COND_VALUE = 2567;
        static constexpr BaseType COND_NEGATE = 2568;
        static constexpr BaseType APP_CONDITION_VALUE = 2569;
        static constexpr BaseType BUILDGEN_LAYER = 2570;
        static constexpr BaseType SOURCES = 2571;
        static constexpr BaseType PUBLIC_INCLUDES = 2572;
        static constexpr BaseType PRIVATE_INCLUDES = 2573;
        static constexpr BaseType TWMainIncludeFile = 2574;
        static constexpr BaseType BUILDGEN_CMAKE_TARGET = 2575;
        static constexpr BaseType SOURCE_NAME = 2576;
        static constexpr BaseType BASE_LAYER = 2577;
        static constexpr BaseType HAS_ADMIN_TIER = 2578;
        static constexpr BaseType HAS_SERVER_TIER = 2579;
        static constexpr BaseType HAS_CLIENT_TIER = 2580;
        static constexpr BaseType HAS_PRESENTATION_TIER = 2581;
        static constexpr BaseType TOOLKIT = 2582;
        static constexpr BaseType APPGEN_GENFILE_ASYNC_PARMS = 2583;
        static constexpr BaseType APPGEN_COMPUTE_PTR = 2584;
        static constexpr BaseType TARGET_ID = 2585;
        static constexpr BaseType GEN_FILE_TYPE = 2586;
        static constexpr BaseType APPGEN_WORKSPACE = 2587;
        static constexpr BaseType BUILDGEN_TWHOME = 2588;
        static constexpr BaseType BUILDGEN_TWTOOLSHOME = 2589;
        static constexpr BaseType BUILDGEN_TWBUILDHOME = 2590;
        static constexpr BaseType BUILDGEN_TWWORKSPACEHOME = 2591;
        static constexpr BaseType BUILDGEN_TWGENHOME = 2592;
        static constexpr BaseType BUILDGEN_PREDEF_FOLDERS = 2593;
        static constexpr BaseType APPGEN_LOADED_TWFILES = 2594;
        static constexpr BaseType TWBuildLayer = 2595;
        static constexpr BaseType TWSourceDir = 2596;
        static constexpr BaseType TWTestDir = 2597;
        static constexpr BaseType TWBaseLayer = 2598;
        static constexpr BaseType TWCategory = 2599;
        static constexpr BaseType APPGEN_USER_CONFIG = 2600;
        static constexpr BaseType TWProductFilter = 2601;
        static constexpr BaseType TWProductFilterOut = 2602;
        static constexpr BaseType APPGEN_CONFIG = 2603;
        static constexpr BaseType TWVerbose = 2604;
        static constexpr BaseType TWCPPTopText = 2605;
        static constexpr BaseType TWCPPBottomText = 2606;
        static constexpr BaseType TWHPPTopText = 2607;
        static constexpr BaseType TWHPPBottomText = 2608;
        static constexpr BaseType TWHPPTWAppProductClassText = 2609;
        static constexpr BaseType TWSchemaHPPTopText = 2610;
        static constexpr BaseType TWSchemaHPPBottomText = 2611;
        static constexpr BaseType TWJavaTopText = 2612;
        static constexpr BaseType TWJavaBottomText = 2613;
        static constexpr BaseType TWCMakeTopText = 2614;
        static constexpr BaseType TWCMakeBottomText = 2615;
        static constexpr BaseType TWAppCPPTopText = 2616;
        static constexpr BaseType TWAppCPPBottomText = 2617;
        static constexpr BaseType TWFloatingLayerName = 2618;
        static constexpr BaseType TWAppUnitNotReadyExecFunc = 2619;
        static constexpr BaseType TWAppUnitReadyExecFunc = 2620;
        static constexpr BaseType TWAppUnitAPISupportLayer = 2621;
        static constexpr BaseType TWAppGenPrimitiveStrClass = 2622;
        static constexpr BaseType TWCMakeMainOutFile = 2623;
        static constexpr BaseType TWBuildTargetsJsonFile = 2624;
        static constexpr BaseType TWCMakePresetsOutFile = 2625;
        static constexpr BaseType TWLaunchVSJsonFile = 2626;
        static constexpr BaseType TWTaskVSJsonFile = 2627;
        static constexpr BaseType TWWorkspaceFolderName = 2628;
        static constexpr BaseType TWGenFolderName = 2629;
        static constexpr BaseType TWToolsFolderName = 2630;
        static constexpr BaseType TWBuildFolderName = 2631;
        static constexpr BaseType TWIntFolderName = 2632;
        static constexpr BaseType TWLibFolderName = 2633;
        static constexpr BaseType TWBinFolderName = 2634;
        static constexpr BaseType TWIgnoreFolders = 2635;
        static constexpr BaseType TWLayerConfigPath = 2636;
        static constexpr BaseType TWToolConfigPath = 2637;
        static constexpr BaseType TWSchemaConfigPath = 2638;
        static constexpr BaseType TWBuildConfigPath = 2639;
        static constexpr BaseType TWUserConfigPath = 2640;
        static constexpr BaseType TWCMakeBuildScript = 2641;
        static constexpr BaseType TWPublicInclude = 2642;
        static constexpr BaseType TWPrivateInclude = 2643;
        static constexpr BaseType TWSourceExtensions = 2644;
        static constexpr BaseType TWAppGenExtensions = 2645;
        static constexpr BaseType TWAppGenFilesPaths = 2646;
        static constexpr BaseType TWAppGenAppProdExtension = 2647;
        static constexpr BaseType TWAppGenAppTestExtension = 2648;
        static constexpr BaseType TWAppGenBuildFileExtension = 2649;
        static constexpr BaseType TWOSArchInvalidValues = 2650;
        static constexpr BaseType TWOSArchValidIntelliSenseModes = 2651;
        static constexpr BaseType TWSchemaGenBaseDBPath = 2652;
        static constexpr BaseType TWSchemaGenMasterDBPath = 2653;
        static constexpr BaseType TWDefaultBuildTrunk = 2654;
        static constexpr BaseType APPGEN_CMDLINE = 2655;
        static constexpr BaseType APP_NAME = 2656;
        static constexpr BaseType UNNAMED_PARM = 2657;
        static constexpr BaseType build_trunk = 2658;
        static constexpr BaseType help = 2659;
        static constexpr BaseType version = 2660;
        static constexpr BaseType clean = 2661;
        static constexpr BaseType PRODUCT_APPUNIT_INFO = 2662;
        static constexpr BaseType APPUNIT = 2663;
        static constexpr BaseType IS_TEST = 2664;
        static constexpr BaseType APPGEN_PRODUCT = 2665;
        static constexpr BaseType LAYER = 2666;
        static constexpr BaseType TEST_LAYER = 2667;
        static constexpr BaseType BUILD_LAYER = 2668;
        static constexpr BaseType IS_DISABLED = 2669;
        static constexpr BaseType ADMIN_TIER = 2670;
        static constexpr BaseType SERVER_TIER = 2671;
        static constexpr BaseType CLIENT_TIER = 2672;
        static constexpr BaseType PRESENTATION_TIER = 2673;
        static constexpr BaseType IS_DIRECT_BUILD = 2674;
        static constexpr BaseType INPUT_APPUNITS = 2675;
        static constexpr BaseType IS_CMDLINE_TOOL = 2676;
        static constexpr BaseType APPLICATION_TYPE = 2677;
        static constexpr BaseType HAS_APISUPPORT_LAYER = 2678;
        static constexpr BaseType HAS_NO_BOOT_SCHEMA = 2679;
        static constexpr BaseType IS_INTERACTIVE_ONLY = 2680;
        static constexpr BaseType IS_STANDALONE = 2681;
        static constexpr BaseType IS_SINGLE_PHYSICAL_TIER = 2682;
        static constexpr BaseType PRODUCT_SCHEMA = 2683;
        static constexpr BaseType TWAppProductTierFilter = 2684;
        static constexpr BaseType TWAppProductToolKitFilter = 2685;
        static constexpr BaseType TWAppProductTargetFilter = 2686;
        static constexpr BaseType APPGEN_API = 2687;
        static constexpr BaseType API_HANDLER = 2688;
        static constexpr BaseType IS_BOOTSTRAP = 2689;
        static constexpr BaseType REQ_OBJECT_SCHEMA = 2690;
        static constexpr BaseType RESP_OBJECT_SCHEMA = 2691;
        static constexpr BaseType REQ_CONTEXT_OBJECT_SCHEMA = 2692;
        static constexpr BaseType RESP_CONTEXT_OBJECT_SCHEMA = 2693;
        static constexpr BaseType APPGEN_APPCODE = 2694;
        static constexpr BaseType APPGEN_APPUNIT = 2695;
        static constexpr BaseType TIER_TYPE = 2696;
        static constexpr BaseType USES = 2697;
        static constexpr BaseType APPSIGNAL_HANDLER = 2698;
        static constexpr BaseType TESTED_APPUNIT = 2699;
        static constexpr BaseType CONSUMES_API = 2700;
        static constexpr BaseType CONSUMES_SCHEMA = 2701;
        static constexpr BaseType QUALIFIED_VALUES = 2702;
        static constexpr BaseType QUALIFIER = 2703;
        static constexpr BaseType APPGEN_APP_CONSTANT = 2704;
        static constexpr BaseType INDEX = 2705;
        static constexpr BaseType IS_APPSTRING = 2706;
        static constexpr BaseType APPGEN_APPCONSTANT_SCOPE = 2707;
        static constexpr BaseType APPGEN_APP_OPTION = 2708;
        static constexpr BaseType DISABLED_PRODUCTS = 2709;
        static constexpr BaseType APPGEN_APPOPTION_SCOPE = 2710;
        static constexpr BaseType DBA_INPUT_FILE_NAME = 2711;
        static constexpr BaseType DBA_OUTPUT_FILE_NAME = 2712;
        static constexpr BaseType FILE_PATH = 2713;
        static constexpr BaseType FILE_TYPE = 2714;
        static constexpr BaseType DB_OBJ = 2715;
        static constexpr BaseType Employees = 2716;
        static constexpr BaseType Employee = 2717;
        static constexpr BaseType Name = 2718;
        static constexpr BaseType Salary = 2719;
        static constexpr BaseType Address = 2720;
        static constexpr BaseType Nominee = 2721;
        static constexpr BaseType Addresses = 2722;
        static constexpr BaseType Details = 2723;
        static constexpr BaseType HomeNum = 2724;
        static constexpr BaseType OrgDetails = 2725;
        static constexpr BaseType Skills = 2726;
        static constexpr BaseType Contact = 2727;
        static constexpr BaseType Contact_Number = 2728;
        static constexpr BaseType Nominee_Name = 2729;
        static constexpr BaseType Relationship = 2730;
        static constexpr BaseType line = 2731;
        static constexpr BaseType PhoneNo = 2732;
        static constexpr BaseType HomeAddress = 2733;
        static constexpr BaseType OfficeAddress = 2734;
        static constexpr BaseType line1 = 2735;
        static constexpr BaseType line2 = 2736;
        static constexpr BaseType Manager = 2737;
        static constexpr BaseType Department = 2738;
        static constexpr BaseType PhoneNums = 2739;
        static constexpr BaseType OfficeNum = 2740;
        static constexpr BaseType CSharp = 2741;
        static constexpr BaseType Ubuntu = 2742;
        static constexpr BaseType INTEG_BILLING_OBJ = 2743;
        static constexpr BaseType Vouchers = 2744;
        static constexpr BaseType Voucher = 2745;
        static constexpr BaseType RevChargeApplicable = 2746;
        static constexpr BaseType EcommerceGstin = 2747;
        static constexpr BaseType DocumentDetails = 2748;
        static constexpr BaseType DocumentType = 2749;
        static constexpr BaseType DocumentNumber = 2750;
        static constexpr BaseType DocumentDate = 2751;
        static constexpr BaseType SellerGstin = 2752;
        static constexpr BaseType LegalKey = 2753;
        static constexpr BaseType TradeKey = 2754;
        static constexpr BaseType SellerEmail = 2755;
        static constexpr BaseType BuyerGstin = 2756;
        static constexpr BaseType BuyerLegalKey = 2757;
        static constexpr BaseType BuyerTradeKey = 2758;
        static constexpr BaseType BuyerEmail = 2759;
        static constexpr BaseType VoucherNum = 2760;
        static constexpr BaseType VoucherDt = 2761;
        static constexpr BaseType Items = 2762;
        static constexpr BaseType Item = 2763;
        static constexpr BaseType SequenceNumber = 2764;
        static constexpr BaseType ItemDescription = 2765;
        static constexpr BaseType HsnCode = 2766;
        static constexpr BaseType BilledQuantity = 2767;
        static constexpr BaseType UnitPrice = 2768;
        static constexpr BaseType Calculations = 2769;
        static constexpr BaseType Calculation = 2770;
        static constexpr BaseType MethodName = 2771;
        static constexpr BaseType FieldToCalculate = 2772;
        static constexpr BaseType ParentField = 2773;
        static constexpr BaseType DependentFields = 2774;
        static constexpr BaseType Price = 2775;
        static constexpr BaseType Quantity = 2776;
        static constexpr BaseType Percent = 2777;
        static constexpr BaseType MAPPING_OBJ = 2778;
        static constexpr BaseType MappingInfo = 2779;
        static constexpr BaseType Key = 2780;
        static constexpr BaseType Level = 2781;
        static constexpr BaseType Type = 2782;
        static constexpr BaseType Parent = 2783;
        static constexpr BaseType NewFields = 2784;
        static constexpr BaseType NewField = 2785;
        static constexpr BaseType FieldPath = 2786;
        static constexpr BaseType AncestorPath = 2787;
        static constexpr BaseType DependentFieldPath = 2788;
        static constexpr BaseType XPath = 2789;
        static constexpr BaseType MapsTo = 2790;
        static constexpr BaseType MapLevel = 2791;
        static constexpr BaseType EnclosingTagName = 2792;
        static constexpr BaseType EnclosingTagMapLevel = 2793;
        static constexpr BaseType EnclosingTagBegin = 2794;
        static constexpr BaseType IsRepeated = 2795;
        static constexpr BaseType Mapping = 2796;
        static constexpr BaseType SchemaDisplayObj = 2797;
        static constexpr BaseType Field = 2798;
        static constexpr BaseType Repeated = 2799;
        static constexpr BaseType INTEG_PRIMARY_SECTION = 2800;
        static constexpr BaseType TI_DATA_SUMMARY = 2801;
        static constexpr BaseType TI_TOTAL_DATA = 2802;
        static constexpr BaseType TI_NEW_DATA = 2803;
        static constexpr BaseType TI_CURATED_DATA = 2804;
        static constexpr BaseType TI_PUBLISHED_DATA = 2805;
        static constexpr BaseType TI_CURATION_STATUS_TEXT = 2806;
        static constexpr BaseType TRIANGULATION_ID = 2807;
        static constexpr BaseType TRIANGULATION_DETAILS = 2808;
        static constexpr BaseType TO_BE_PUBLISHED = 2809;
        static constexpr BaseType IS_BROADCASTED = 2810;
        static constexpr BaseType SKU_OBJECT = 2811;
        static constexpr BaseType CATALOGUE_ID = 2812;
        static constexpr BaseType ATTRIBUTES = 2813;
        static constexpr BaseType DS_SUMMARY = 2814;
        static constexpr BaseType TI_DATA = 2815;
        static constexpr BaseType SKU_DATA = 2816;
        static constexpr BaseType TRANSACTION_DATA = 2817;
        static constexpr BaseType SENDER = 2818;
        static constexpr BaseType RECEIVER = 2819;
        static constexpr BaseType TO_BE_TRIANGULATED = 2820;
        static constexpr BaseType FILE = 2821;
        static constexpr BaseType SCHEMA_DATATYPE = 2822;
        static constexpr BaseType DSMODULE1 = 2823;
        static constexpr BaseType SKU_TITLE = 2824;
        static constexpr BaseType TWDSCS_CLUSTR_ID = 2825;
        static constexpr BaseType TWDSCS_CLUSTR_ID_GENERATION_TIME = 2826;
        static constexpr BaseType XXX_CLUSTR_ID_PROCUREMENT_FLAG = 2827;
        static constexpr BaseType TRANSACTION = 2828;
        static constexpr BaseType SCHEMA_OBJ = 2829;
        static constexpr BaseType SKU_OBJ = 2830;
        static constexpr BaseType TRANSACTION_OBJ = 2831;
        static constexpr BaseType TI_OBJ = 2832;
        static constexpr BaseType OBJ_ID = 2833;
        static constexpr BaseType CURATION_STATUS = 2834;
        static constexpr BaseType XXX_TWDSCS_SKU = 2835;
        static constexpr BaseType XXX_TWDSCS_CLUSTR_TEMP_ID = 2836;
        static constexpr BaseType XXX_TWDSSC_EXTERNAL_SKU_ENTITY_OBJ = 2837;
        static constexpr BaseType XXX_TWDSCS_SKU_DUID = 2838;
        static constexpr BaseType XXX_TWDSCS_SKU_OBJID = 2839;
        static constexpr BaseType XXX_TWDSCS_CLUSTR_ID_PROCUREMENT_FLAG = 2840;
        static constexpr BaseType XXX_TRANSACTION_PROCESSED_STATE = 2841;
        static constexpr BaseType XXX_TRANSACTION_DETAILS = 2842;
        static constexpr BaseType XXX_TRANSACTION_DATE = 2843;
        static constexpr BaseType XXX_TRANSACTION_ID = 2844;
        static constexpr BaseType XXX_TWDSCS_TRANSACTIONS_OBJ_ORDER_DETAIL = 2845;
        static constexpr BaseType XXX_TWDSCS_TRANSACTIONS_OBJ_QTY = 2846;
        static constexpr BaseType XXX_TWDSCS_TRANSACTIONS_OBJ = 2847;
        static constexpr BaseType XXX_TWDSCS_TRANSACTIONS = 2848;
        static constexpr BaseType XXX_TWDSCS_MAPPED_SKU_WITH_STATUS = 2849;
        static constexpr BaseType XXX_TWDSCS_SKU_OBJECT_ID = 2850;
        static constexpr BaseType XXX_TWDSCS_SKU_MAPPING_STATUS = 2851;
        static constexpr BaseType XXX_TWDSCS_MAPPED_EXTERNAL_SKUS = 2852;
        static constexpr BaseType XXX_TWDSCS_EXTERNAL_SKU_DUID = 2853;
        static constexpr BaseType XXX_TWDSCS_LOCAL_SKU_ENTITY_OBJ = 2854;
        static constexpr BaseType XXX_TWDSCS_INCOMING_TRANSACTED_OBJ = 2855;
        static constexpr BaseType XXX_TWDSCS_EXTERNAL_SKU_EXTERNALOBJID_LOCAlOBJID_PAIR = 2856;
        static constexpr BaseType XXX_TWDSCS_EXTERNAL_SKU_EXTERNAL_OBJID = 2857;
        static constexpr BaseType XXX_TWDSCS_EXTERNAL_SKU_LOCAl_OBJID = 2858;
        static constexpr BaseType XXX_TWDSCS_EXTERNAL_SKU_MAPPED = 2859;
        static constexpr BaseType XXX_TWDSCS_EXTERNAL_SKU_UNMAPPED = 2860;
        static constexpr BaseType XXX_TWDSCS_EXTERNAL_DUID_OBJID_OBJ = 2861;
        static constexpr BaseType XXX_TWDSCS_SENDER_MERCHANT_DUID = 2862;
        static constexpr BaseType INVENTORY = 2863;
        static constexpr BaseType INCOMING_TRANSACTED_MAPPED_SKU = 2864;
        static constexpr BaseType EXTERNAL_DUID_OBJID_LIST = 2865;
        static constexpr BaseType CURATOR_TI_OBJ = 2866;
        static constexpr BaseType SKU_SURVIVOR_ID = 2867;
        static constexpr BaseType SKU_ALIASES = 2868;
        static constexpr BaseType CURATOR_TI_OBJ2 = 2869;
        static constexpr BaseType FULLNAME_COREOBJECT_TEST_OBJ = 2870;
        static constexpr BaseType FIRSTNAME = 2871;
        static constexpr BaseType LASTNAME = 2872;
        static constexpr BaseType TEST_EMBEDDED_OBJ = 2873;
        static constexpr BaseType TEST_ADDRESS = 2874;
        static constexpr BaseType TEST_LINE1 = 2875;
        static constexpr BaseType TEST_LINE2 = 2876;
        static constexpr BaseType TEST_CITY = 2877;
        static constexpr BaseType TEST_PIN = 2878;
        static constexpr BaseType TEST_COMPANY_DETAILS = 2879;
        static constexpr BaseType TEST_NAME = 2880;
        static constexpr BaseType TEST_CONTACT = 2881;
        static constexpr BaseType TEST_EMPLOYEES = 2882;
        static constexpr BaseType TEST_DESIGNATION = 2883;
        static constexpr BaseType TEST_DESCRIBE_OBJECT = 2884;
        static constexpr BaseType TEST_TODAY_DATE = 2885;
        static constexpr BaseType CONTAINER_ID = 2886;
        static constexpr BaseType REPEATED_INTEGER_ID = 2887;
        static constexpr BaseType TEST_DESCRIBE_OBJECT_ALL_TYPES = 2888;
        static constexpr BaseType BOOLEAN_ID = 2889;
        static constexpr BaseType TRIVAL_ID = 2890;
        static constexpr BaseType UNIVERSALID_ID = 2891;
        static constexpr BaseType UNIVERSALAPPID_ID = 2892;
        static constexpr BaseType INTEGER_ID = 2893;
        static constexpr BaseType UINTEGER_ID = 2894;
        static constexpr BaseType NUMBER64_ID = 2895;
        static constexpr BaseType NUMBER128_ID = 2896;
        static constexpr BaseType QNUMBER_ID = 2897;
        static constexpr BaseType DATE_ID = 2898;
        static constexpr BaseType TIME_ID = 2899;
        static constexpr BaseType TIMEOFDAY_ID = 2900;
        static constexpr BaseType TIMEOFDAYEX_ID = 2901;
        static constexpr BaseType OBJID_ID = 2902;
        static constexpr BaseType CONTENTURL_ID = 2903;
        static constexpr BaseType STRING_ID = 2904;
        static constexpr BaseType COREOBJECT_TEST_OBJ1 = 2905;
        static constexpr BaseType COTEST_FILED_11 = 2906;
        static constexpr BaseType COTEST_FILED_12 = 2907;
        static constexpr BaseType COTEST_FILED_13 = 2908;
        static constexpr BaseType COTEST_FILED_14 = 2909;
        static constexpr BaseType COTEST_FILED_15 = 2910;
        static constexpr BaseType COREOBJECT_TEST_OBJ2 = 2911;
        static constexpr BaseType COTEST_FILED_21 = 2912;
        static constexpr BaseType COTEST_FILED_22 = 2913;
        static constexpr BaseType COTEST_FILED_23 = 2914;
        static constexpr BaseType COTEST_FILED_24 = 2915;
        static constexpr BaseType COTEST_FILED_25 = 2916;
        static constexpr BaseType COREOBJECT_TEST_OBJ3 = 2917;
        static constexpr BaseType COTEST_FILED_31 = 2918;
        static constexpr BaseType COTEST_FILED_32 = 2919;
        static constexpr BaseType COTEST_FILED_33 = 2920;
        static constexpr BaseType COTEST_FILED_34 = 2921;
        static constexpr BaseType COTEST_FILED_35 = 2922;
        static constexpr BaseType COREOBJECT_TEST_OBJ4 = 2923;
        static constexpr BaseType COTEST_FILED_41 = 2924;
        static constexpr BaseType COTEST_FILED_42 = 2925;
        static constexpr BaseType COTEST_FILED_43 = 2926;
        static constexpr BaseType COTEST_FILED_44 = 2927;
        static constexpr BaseType COTEST_FILED_45 = 2928;
        static constexpr BaseType COREOBJECT_TEST_EMB = 2929;
        static constexpr BaseType COTEST_FILED1 = 2930;
        static constexpr BaseType TEST_DEPENDENT = 2931;
        static constexpr BaseType TEST_RELATION = 2932;
        static constexpr BaseType TEST_EMPLOYEEADDRESS = 2933;
        static constexpr BaseType TEST_LINE = 2934;
        static constexpr BaseType TEST_EMPLOYEE = 2935;
        static constexpr BaseType TEST_EMPLOYEEID = 2936;
        static constexpr BaseType TEST_MOBILENUM = 2937;
        static constexpr BaseType STUDENTSCHEMA = 2938;
        static constexpr BaseType TEST_OBJ = 2939;
        static constexpr BaseType BOOLID = 2940;
        static constexpr BaseType STUDENTSCHEMAMETA = 2941;
        static constexpr BaseType STUDENT_DETAILS = 2942;
        static constexpr BaseType TW_CORE_PROCESSMGR_TEST_API_SCHEMA = 2943;
        static constexpr BaseType TEST_INP_STRING = 2944;
        static constexpr BaseType GET_STUDENT_PERCENTAGE_REQUEST_SCHEMA = 2945;
        static constexpr BaseType STUDENT_ID = 2946;
        static constexpr BaseType GET_STUDENT_PERCENTAGE_RESPONSE_SCHEMA = 2947;
        static constexpr BaseType STUDENT_PERCENTAGE = 2948;
        static constexpr BaseType GET_STUDENT_PERCNTAGE_QUERY_SCHEMA = 2949;
        static constexpr BaseType SOME_QUERY_RELATED_ID_1 = 2950;
        static constexpr BaseType GET_STUDENT_PERCENTAGE_SCRATCHPAD_SCHEMA = 2951;
        static constexpr BaseType SOME_SCRATCHPAD_RELATED_ID_2 = 2952;
        static constexpr BaseType DONE = 2953;
        static constexpr BaseType GET_STUDENT_DETAIL_REQUEST_SCHEMA = 2954;
        static constexpr BaseType GET_STUDENT_DETAIL_RESPONSE_SCHEMA = 2955;
        static constexpr BaseType STUDENT_NAME = 2956;
        static constexpr BaseType STUDENT_AGE = 2957;
        static constexpr BaseType STUDENT_SUBJECT_ID = 2958;
        static constexpr BaseType GET_STUDENT_DETAIL_QUERY_SCHEMA = 2959;
        static constexpr BaseType SOME_QUERY_RELATED_ID_3 = 2960;
        static constexpr BaseType GET_STUDENT_DETAIL_SCRATCHPAD_SCHEMA = 2961;
        static constexpr BaseType SOME_SCRATCHPAD_RELATED_ID_4 = 2962;
        static constexpr BaseType SOMAPI_REQCONTEXT = 2963;
        static constexpr BaseType FIELD1 = 2964;
        static constexpr BaseType SOMAPI_INPUT = 2965;
        static constexpr BaseType SOMAPI_OUTPUT = 2966;
        static constexpr BaseType MYSCRATCHPAD = 2967;
        static constexpr BaseType SOMEAPI_SCRATCHPAD = 2968;
        static constexpr BaseType GREETAPI_SCRATCHPAD_SCHEMA = 2969;
        static constexpr BaseType GREETMESSAGE = 2970;
        static constexpr BaseType FACTAPI_SCRATCHPAD_SCHEMA = 2971;
        static constexpr BaseType VAL = 2972;
        static constexpr BaseType MULTITASKAPI_SCRATCHPAD_SCHEMA = 2973;
        static constexpr BaseType DATA = 2974;
        static constexpr BaseType MULTIACTIVITYAPI_SCRATCHPAD_SCHEMA = 2975;
        static constexpr BaseType CREATESTAGE = 2976;
        static constexpr BaseType Scenario1ReadDB_SCHEMA = 2977;
        static constexpr BaseType DATA_KEY = 2978;
        static constexpr BaseType DATA_DBID = 2979;
        static constexpr BaseType DATA_OBJ = 2980;
        static constexpr BaseType DATA_OBJS = 2981;
        static constexpr BaseType TW_CORE_COMMMGR_TEST_API_SCHEMA = 2982;
        static constexpr BaseType TEST_STR_FIELD = 2983;
        static constexpr BaseType TEST_BOOL_FIELD = 2984;
        static constexpr BaseType DB_TEST_OBJ = 2985;
        static constexpr BaseType DBSCHEMA1 = 2986;
        static constexpr BaseType DBSCHEMA2 = 2987;
        static constexpr BaseType STUDENT_OBJ = 2988;
        static constexpr BaseType MY_COMPANY_OBJ = 2989;
        static constexpr BaseType DBTEST_EMBEDDED_OBJ = 2990;
        static constexpr BaseType FULLNAME = 2991;
        static constexpr BaseType DATA_DC_TEST_OBJ = 2992;
        static constexpr BaseType TWAPPFIELD1STRID = 2993;
        static constexpr BaseType TWAPPFIELD2VERID = 2994;
        static constexpr BaseType TWAPPFIELD3ISACTIVE = 2995;
        static constexpr BaseType TWAPPFIELD4STRREPEATED = 2996;
        static constexpr BaseType TWAPPFIELD5 = 2997;
        static constexpr BaseType PRIMARY1 = 2998;
        static constexpr BaseType PRIMARY2 = 2999;
        static constexpr BaseType PRIMARY3 = 3000;
        static constexpr BaseType PRIMARY4 = 3001;
        static constexpr BaseType PRIMARY5 = 3002;
        static constexpr BaseType HASH_SECTION1 = 3003;
        static constexpr BaseType HASH_SECTION2 = 3004;
        static constexpr BaseType TW_ADMIN_TEST_1 = 3005;
        static constexpr BaseType TW_ADMIN_TEST_OBJ_1 = 3006;
        static constexpr BaseType TW_ADMIN_TEST_2 = 3007;
        static constexpr BaseType TW_ADMIN_TEST_OBJ_2 = 3008;
        static constexpr BaseType TW_ADMIN_TEST_3 = 3009;
        static constexpr BaseType TW_ADMIN_TEST_OBJ_3 = 3010;
        static constexpr BaseType TW_NAME = 3011;
        static constexpr BaseType TW_ADDRESS = 3012;
        static constexpr BaseType TW_STREET = 3013;
        static constexpr BaseType TEST_NFW_SCP = 3014;
        static constexpr BaseType TW_EVENT_COMPLETED = 3015;
        static constexpr BaseType TW_PREMISE_START_FROM = 3016;
        static constexpr BaseType TW_PREMISE_RESULT = 3017;
        static constexpr BaseType TW_PREMISE_TEST_QUERY_ID = 3018;
        static constexpr BaseType TW_SOME_STRING_DATA = 3019;
        static constexpr BaseType TW_SOME_INT_DATA = 3020;
        static constexpr BaseType TW_SOME_OBJ_DATA = 3021;
        static constexpr BaseType TEST_ADMIN_SERVICES = 3022;
        static constexpr BaseType TEST_ADMIN_TW_QUERY_ID = 3023;
        static constexpr BaseType TEST_ADMIN_TW_LANGUAGE_LIST = 3024;
        static constexpr BaseType MAX = 3025;

        class eTWSchemaDCSection {

        public:

            static constexpr BaseType UNKNOWN = 0;
            static constexpr BaseType PRIMARY = 1;
            static constexpr BaseType SCHEMA = 2;
            static constexpr BaseType HASH_INDEX = 210;
            static constexpr BaseType CONSOLE = 2356;
            static constexpr BaseType ADMIN = 2414;
            static constexpr BaseType MESSAGE = 2415;
            static constexpr BaseType BOOTSTRAPDATASECTION = 2426;
            static constexpr BaseType PRAJAPTIDATASECTION = 2427;
            static constexpr BaseType PRIMARY_HASH = 2429;
            static constexpr BaseType INTEG_PRIMARY_SECTION = 2800;
            static constexpr BaseType TI_DATA = 2815;
            static constexpr BaseType TRANSACTION = 2828;
            static constexpr BaseType INVENTORY = 2863;
            static constexpr BaseType INCOMING_TRANSACTED_MAPPED_SKU = 2864;
            static constexpr BaseType EXTERNAL_DUID_OBJID_LIST = 2865;
            static constexpr BaseType DBSCHEMA1 = 2986;
            static constexpr BaseType DBSCHEMA2 = 2987;
            static constexpr BaseType PRIMARY1 = 2998;
            static constexpr BaseType PRIMARY2 = 2999;
            static constexpr BaseType PRIMARY3 = 3000;
            static constexpr BaseType PRIMARY4 = 3001;
            static constexpr BaseType PRIMARY5 = 3002;
            static constexpr BaseType HASH_SECTION1 = 3003;
            static constexpr BaseType HASH_SECTION2 = 3004;
        };

        class eTWSchemaObjType {

        public:

            static constexpr BaseType UNKNOWN = 0;
            static constexpr BaseType DERIVED_SCHEMA = 3;
            static constexpr BaseType DERIVED_SCHEMA_SECTION = 8;
            static constexpr BaseType DERIVED_SCHEMA_OBJECT = 11;
            static constexpr BaseType DERIVED_SCHEMA_OBJ_FIELD = 15;
            static constexpr BaseType OBJECT_LIST = 16;
            static constexpr BaseType HASH_OBJECT = 18;
            static constexpr BaseType INDEX_OBJECT = 21;
            static constexpr BaseType AMOUNT = 23;
            static constexpr BaseType QUANTITY = 26;
            static constexpr BaseType RATEX = 28;
            static constexpr BaseType DATERANGE = 32;
            static constexpr BaseType TIMERANGE = 37;
            static constexpr BaseType HASHKEY_EXTENDED = 41;
            static constexpr BaseType HASHSUBOBJECT = 44;
            static constexpr BaseType BASE_HASH_OBJECT = 46;
            static constexpr BaseType LRUTIMER_PROPERTIES = 47;
            static constexpr BaseType ID_PROPERTIES = 56;
            static constexpr BaseType HASHID_PROPERTIES = 64;
            static constexpr BaseType HASHINDEX_PROPERTIES = 68;
            static constexpr BaseType HASHSTRINGINDEX_PROPERTIES = 76;
            static constexpr BaseType HASHAGGR_PROPERTIES = 78;
            static constexpr BaseType DATA_PROPERTIES = 80;
            static constexpr BaseType DS_PROPERTIES = 86;
            static constexpr BaseType DC_PROPERTIES = 93;
            static constexpr BaseType DCMGR_PROPERTIES = 96;
            static constexpr BaseType INDEX_VALUE = 98;
            static constexpr BaseType TIME_INDEX_VALUE = 100;
            static constexpr BaseType REFID_INDEX_VALUE = 101;
            static constexpr BaseType STRING_INDEX_VALUE = 102;
            static constexpr BaseType TIME_FILTER_DETAIL = 104;
            static constexpr BaseType INDEX_ELEM_FILTER_DETAIL = 108;
            static constexpr BaseType INDEX_ELEM = 121;
            static constexpr BaseType APPLICATION_SESSION_OBJ = 133;
            static constexpr BaseType APPLICATION_PATHS_OBJ = 147;
            static constexpr BaseType APPLICATION_PARMS_OBJ = 157;
            static constexpr BaseType APPLICATION_TWIN_OBJ = 170;
            static constexpr BaseType START_WINDOW_REQDATA = 171;
            static constexpr BaseType HANDOVER_TWIN_REQDATA = 172;
            static constexpr BaseType COREDISKIO_OPERATION_REQ_PARMS = 173;
            static constexpr BaseType COREDISKIO_OPERATION_RESP_PARMS = 200;
            static constexpr BaseType HANDLE_DISKIO_REQ_DATA = 207;
            static constexpr BaseType HANDLE_DISKIO_RESP_DATA = 208;
            static constexpr BaseType CONSUME_COMPLETE_HANDOVER_BY_TWIN_REQDATA = 209;
            static constexpr BaseType DC_COMPANY_OBJ = 211;
            static constexpr BaseType EVENT_STAGE_REQUESTCONTEXT_SCHEMA = 214;
            static constexpr BaseType TWEVENT_OBJ = 241;
            static constexpr BaseType INDIRECT_ROUTE_OBJ = 253;
            static constexpr BaseType WIP_STEP = 260;
            static constexpr BaseType DIRECT_ROUTE_OBJ = 265;
            static constexpr BaseType OTHER_DIRECT_IPIDS = 279;
            static constexpr BaseType DEST_OBJ = 280;
            static constexpr BaseType IOROOT_OBJ = 294;
            static constexpr BaseType TAF_FILE_INFO = 303;
            static constexpr BaseType DB_INFO = 306;
            static constexpr BaseType IOBASEPATH_OBJ = 309;
            static constexpr BaseType TAF_RUNNING_INFO = 318;
            static constexpr BaseType TAF_FILE_DATA = 321;
            static constexpr BaseType TWDC_SECTION_METADATA_SCHEMA = 327;
            static constexpr BaseType TWDC_METADATA_SCHEMA = 330;
            static constexpr BaseType VERSION_OBJECT = 367;
            static constexpr BaseType TWAPI_IS_DUPLICATE_DUID_REQ_OBJ_ID = 372;
            static constexpr BaseType TWAPI_IS_DUPLICATE_DUID_RESP_OBJ_ID = 376;
            static constexpr BaseType OPEN_DB_REQUEST = 377;
            static constexpr BaseType OPENDB_SCRATCHPAD = 390;
            static constexpr BaseType TAF_COORDINATION_REQUEST = 402;
            static constexpr BaseType VERSIONED_DS_BASE_REQUEST = 405;
            static constexpr BaseType VERSIONED_DS_BASE_SCRATCHPAD = 408;
            static constexpr BaseType VERSIONED_DS_VERSION_REQUEST = 419;
            static constexpr BaseType VERSIONED_DS_VERSION_SCRATCHPAD = 426;
            static constexpr BaseType VERSIONED_DS_HASHID_REQUEST = 436;
            static constexpr BaseType VERSIONED_DS_HASHID_SCRATCHPAD = 442;
            static constexpr BaseType VERSIONED_DS_OBJECT_REQUEST = 443;
            static constexpr BaseType VERSIONED_DS_OBJECT_SCRATCHPAD = 446;
            static constexpr BaseType VERSIONED_DS_INDEX_SCRATCHPAD = 456;
            static constexpr BaseType VERSIONED_DS_ITERATOR_REQUEST = 471;
            static constexpr BaseType VERSIONED_DS_ITERATOR_SCRATCHPAD = 493;
            static constexpr BaseType DS_ITERATOR_OBJECT_KEY = 517;
            static constexpr BaseType ITERATOR_OBJECT = 530;
            static constexpr BaseType WIP_LIST = 550;
            static constexpr BaseType QUERY_SCRATCHPAD = 557;
            static constexpr BaseType QUERY_RANGE_DATA = 563;
            static constexpr BaseType QUERY_OBJECT = 568;
            static constexpr BaseType PRIMARY_QUERY_HASHKEY = 572;
            static constexpr BaseType FILTER_QUERY_HASHKEY = 575;
            static constexpr BaseType RIGHTS_QUERY_HASHKEY = 585;
            static constexpr BaseType SORTED_QUERY_HASHKEY = 586;
            static constexpr BaseType PRIMARY_QUERY = 589;
            static constexpr BaseType FILTER_SUB_QUERY = 599;
            static constexpr BaseType RIGHTS_SUB_QUERY = 605;
            static constexpr BaseType SORTING_SUB_QUERY = 607;
            static constexpr BaseType INDIVIDUAL_QUERY = 611;
            static constexpr BaseType COMPOUND_QUERY = 615;
            static constexpr BaseType REQUEST = 617;
            static constexpr BaseType UNI_SCHEMA = 2080;
            static constexpr BaseType UNI_SCHEMA_ENUM = 2082;
            static constexpr BaseType UNI_SCHEMA_CONSTANT = 2086;
            static constexpr BaseType UNI_CONTENT_SCHEMA_PROPERTIES = 2089;
            static constexpr BaseType UNI_CONTAINER_CONTENT = 2095;
            static constexpr BaseType UNI_CONTENT_SCHEMA = 2096;
            static constexpr BaseType APP_SCHEMA_METADATA = 2097;
            static constexpr BaseType WINDOW = 2100;
            static constexpr BaseType PAGE = 2101;
            static constexpr BaseType LABEL = 2102;
            static constexpr BaseType BUTTON = 2103;
            static constexpr BaseType TEXTEDIT = 2104;
            static constexpr BaseType LIST = 2105;
            static constexpr BaseType LINE = 2107;
            static constexpr BaseType UIFIELD = 2108;
            static constexpr BaseType UIFORM = 2109;
            static constexpr BaseType UIREPORT = 2110;
            static constexpr BaseType MENU_ENTRY = 2145;
            static constexpr BaseType ADDITIONAL_BUTTONS = 2162;
            static constexpr BaseType PANIC_OBJECT = 2254;
            static constexpr BaseType UI_POSITION = 2257;
            static constexpr BaseType UI_DIMENSION = 2260;
            static constexpr BaseType UI_PADDING = 2265;
            static constexpr BaseType UI_BORDER = 2270;
            static constexpr BaseType ALIGNMENT = 2272;
            static constexpr BaseType UI_FONT = 2275;
            static constexpr BaseType PANE = 2295;
            static constexpr BaseType PART = 2296;
            static constexpr BaseType UI_TEMPLATE_WELCOME_MESSAGE = 2313;
            static constexpr BaseType UI_TEMPLATE_MENU_LIST = 2316;
            static constexpr BaseType UI_TEMPLATE_REPORT_VIEW = 2318;
            static constexpr BaseType REPORT_HEADER = 2319;
            static constexpr BaseType REPORT_COLUMN = 2321;
            static constexpr BaseType UI_TEMPLATE_FORM = 2323;
            static constexpr BaseType FORM_ENTRY = 2324;
            static constexpr BaseType FIELD_VALIDATE_PARMS = 2325;
            static constexpr BaseType UI_TEMPLATE_COMPOUND_VIEW = 2327;
            static constexpr BaseType SCREEN = 2329;
            static constexpr BaseType SCREEN_LIST = 2334;
            static constexpr BaseType DC_LIST = 2335;
            static constexpr BaseType ZONE = 2336;
            static constexpr BaseType ROW = 2339;
            static constexpr BaseType CELL = 2340;
            static constexpr BaseType CONSOLE_COMM_PARMS = 2341;
            static constexpr BaseType APPLICATION_GATEWAY_OF_TALLY_OBJ = 2344;
            static constexpr BaseType GATEWAY_REPORTS = 2345;
            static constexpr BaseType IDC_ADDITIONAL_INFO = 2348;
            static constexpr BaseType FRAME_PAGE_OBJECT = 2352;
            static constexpr BaseType PANE_OBJECT_ID = 2354;
            static constexpr BaseType PRESENTATION_RENDER_WINDOW_REQUEST_SCHEMA = 2357;
            static constexpr BaseType PRESENTATION_PROCESS_LAYOUT_REQUEST_SCHEMA = 2358;
            static constexpr BaseType PRESENTATION_LAUNCH_RUNTIME_WINDOW_REQUEST_SCHEMA = 2359;
            static constexpr BaseType PRESENTATION_CREATE_STARTUP_WINDOW_REQUEST_SCHEMA = 2360;
            static constexpr BaseType PRESENTATION_CLOSE_APP_WINDOW_REQUEST_SCHEMA = 2361;
            static constexpr BaseType PRESENTATION_PROCESS_EVENTS_REQUEST_SCHEMA = 2362;
            static constexpr BaseType PRESENTATION_INTERNAL_UI_EVENT_RESPONSE_SCHEMA = 2363;
            static constexpr BaseType TW_ADMINDC_LANG_OBJ = 2369;
            static constexpr BaseType TW_ADMINDC_QUERY_OBJ = 2371;
            static constexpr BaseType TW_APP_PREFS_OBJECT = 2373;
            static constexpr BaseType TW_YOGINI_BS_FILE_OBJECT = 2380;
            static constexpr BaseType TW_LANGUAGE_LIST = 2382;
            static constexpr BaseType TW_UNIVERSE_SUPERUSERS = 2384;
            static constexpr BaseType TW_UNIVERSE_SUPERUSER = 2385;
            static constexpr BaseType TW_APP_CURRENT_LANGUAGE_OBJ = 2388;
            static constexpr BaseType SCHEMA_GET_LANGUAGES = 2390;
            static constexpr BaseType LANGUAGE_OBJ = 2392;
            static constexpr BaseType TW_QUERY_SCHEMA = 2393;
            static constexpr BaseType TW_SERVERDC_QUERY_ID = 2397;
            static constexpr BaseType LEDGER_OBJECT = 2398;
            static constexpr BaseType AUTHENTICATED_USER_OBJECT = 2399;
            static constexpr BaseType LEDGER_OBJECT_EXT = 2401;
            static constexpr BaseType COMPANY_OBJECT = 2402;
            static constexpr BaseType PATH_OBJECT = 2406;
            static constexpr BaseType MESSAGE_OBJECT = 2409;
            static constexpr BaseType OPEN_COMPANY_LIST_OBJ = 2413;
            static constexpr BaseType DITOBJECT = 2417;
            static constexpr BaseType USEROBJECT = 2419;
            static constexpr BaseType RESERVEOBJECT = 2421;
            static constexpr BaseType IPV4OBJECT = 2423;
            static constexpr BaseType TW_CLIENT_QUERY_OBJ = 2425;
            static constexpr BaseType TW_TS_CONFIG_API_SCHEMA = 2430;
            static constexpr BaseType TW_TS_CONFIG_RESP_API_SCHEMA = 2436;
            static constexpr BaseType PING_SCRATCHPAD_SCHEMA = 2438;
            static constexpr BaseType PREMISE_BOOTSTRAP_REQ_SCHEMA = 2442;
            static constexpr BaseType IPID_AND_ITS_STATUS = 2443;
            static constexpr BaseType PREMISE_FETCH_IPIDS_RESP_SCHEMA = 2446;
            static constexpr BaseType LOGINHANDLER_REQ_SCHEMA = 2447;
            static constexpr BaseType YOGINI_BOOTSTRAPHANDLER_REQ_SCHEMA = 2448;
            static constexpr BaseType PREMISE_ADMINQUERY_REQ_SCHEMA = 2449;
            static constexpr BaseType PREMISE_LANGUAGEHANDLER_REQ_SCHEMA = 2450;
            static constexpr BaseType PREMISE_ADMINQUERY_CONTEXT_SCHEMA = 2451;
            static constexpr BaseType PREMISE_LANGUAGEQUERY_RESP_SCHEMA = 2455;
            static constexpr BaseType TW_LIST_OF_PRAJAPATI_IPS = 2461;
            static constexpr BaseType YOGINI_OPENPRAJAPATIDB_REQ_SCHEMA = 2462;
            static constexpr BaseType YOGINI_ADDPRAJAPATIIP_REQ_SCHEMA = 2463;
            static constexpr BaseType YOGINI_DELETEPRAJAPATIIP_REQ_SCHEMA = 2464;
            static constexpr BaseType YOGINI_SHOWPRAJAPATIIPS_REQ_SCHEMA = 2465;
            static constexpr BaseType YOGINI_SHOWPRAJAPATIIPS_RESP_SCHEMA = 2466;
            static constexpr BaseType TW_SITE_CONFIG_API_SCHEMA = 2467;
            static constexpr BaseType TW_SITE_CONFIG_RESP_API_SCHEMA = 2468;
            static constexpr BaseType KSHETRAPAL_OPENFILE_REQ_SCHEMA = 2470;
            static constexpr BaseType DIT_OBJECT = 2471;
            static constexpr BaseType TW_LIST_OF_USER_IDS = 2472;
            static constexpr BaseType CDC_AUTHENTICATED_USER_OBJ = 2492;
            static constexpr BaseType CDC_COMPANY_DETAILS_OBJ = 2493;
            static constexpr BaseType CDC_USER_OBJ = 2495;
            static constexpr BaseType CDC_COMPANY_OBJ = 2496;
            static constexpr BaseType USER_DEF_PATH_OBJ = 2497;
            static constexpr BaseType CDC_UI_OBJ = 2498;
            static constexpr BaseType CLIENT_CONNECTREQUEST_REQ_SCHEMA = 2500;
            static constexpr BaseType CLIENT_CONNECTREQUEST_RESP_SCHEMA = 2501;
            static constexpr BaseType CLIENT_DISCONNECTREQUEST_REQ_SCHEMA = 2502;
            static constexpr BaseType SOURCE_UNI_SCHEMA = 2503;
            static constexpr BaseType SOURCE_UNI_SCHEMA_ENUM = 2505;
            static constexpr BaseType SOURCE_UNI_SCHEMA_CONSTANT = 2518;
            static constexpr BaseType SOURCE_CONTENT_SCHEMA_PROPERTIES = 2524;
            static constexpr BaseType SOURCE_CONTAINER_CONTENT = 2526;
            static constexpr BaseType SOURCE_CONTENT_SCHEMA = 2527;
            static constexpr BaseType TWCMakePresetCacheVar = 2528;
            static constexpr BaseType TWCMakePresetEnvVar = 2532;
            static constexpr BaseType TWCMakeVSSVendorVar = 2533;
            static constexpr BaseType TWCMakeVSRSVendorVar = 2534;
            static constexpr BaseType TWToolChainFlags = 2535;
            static constexpr BaseType TWHostToolChainFlags = 2536;
            static constexpr BaseType BUILDGEN_OS = 2537;
            static constexpr BaseType BUILDGEN_KERNEL = 2546;
            static constexpr BaseType BUILDGEN_ARCH = 2547;
            static constexpr BaseType BUILDGEN_PRESET = 2548;
            static constexpr BaseType BUILDGEN_CMAKE_PRESET = 2550;
            static constexpr BaseType BUILDGEN_CONFIG = 2558;
            static constexpr BaseType BUILDGEN_STAGE = 2560;
            static constexpr BaseType BUILDGEN_TRUNK = 2562;
            static constexpr BaseType BUILD_CONDITION_VALUE = 2565;
            static constexpr BaseType APP_CONDITION_VALUE = 2569;
            static constexpr BaseType BUILDGEN_LAYER = 2570;
            static constexpr BaseType BUILDGEN_CMAKE_TARGET = 2575;
            static constexpr BaseType APPGEN_GENFILE_ASYNC_PARMS = 2583;
            static constexpr BaseType APPGEN_WORKSPACE = 2587;
            static constexpr BaseType TWBuildLayer = 2595;
            static constexpr BaseType APPGEN_USER_CONFIG = 2600;
            static constexpr BaseType APPGEN_CONFIG = 2603;
            static constexpr BaseType APPGEN_CMDLINE = 2655;
            static constexpr BaseType PRODUCT_APPUNIT_INFO = 2662;
            static constexpr BaseType APPGEN_PRODUCT = 2665;
            static constexpr BaseType APPGEN_API = 2687;
            static constexpr BaseType APPGEN_APPCODE = 2694;
            static constexpr BaseType APPGEN_APPUNIT = 2695;
            static constexpr BaseType QUALIFIED_VALUES = 2702;
            static constexpr BaseType APPGEN_APP_CONSTANT = 2704;
            static constexpr BaseType APPGEN_APPCONSTANT_SCOPE = 2707;
            static constexpr BaseType APPGEN_APP_OPTION = 2708;
            static constexpr BaseType APPGEN_APPOPTION_SCOPE = 2710;
            static constexpr BaseType Employees = 2716;
            static constexpr BaseType Employee = 2717;
            static constexpr BaseType Address = 2720;
            static constexpr BaseType Nominee = 2721;
            static constexpr BaseType Addresses = 2722;
            static constexpr BaseType Details = 2723;
            static constexpr BaseType OrgDetails = 2725;
            static constexpr BaseType Skills = 2726;
            static constexpr BaseType Contact = 2727;
            static constexpr BaseType Contact_Number = 2728;
            static constexpr BaseType HomeAddress = 2733;
            static constexpr BaseType OfficeAddress = 2734;
            static constexpr BaseType PhoneNums = 2739;
            static constexpr BaseType INTEG_BILLING_OBJ = 2743;
            static constexpr BaseType MAPPING_OBJ = 2778;
            static constexpr BaseType SchemaDisplayObj = 2797;
            static constexpr BaseType Field = 2798;
            static constexpr BaseType SCHEMA_OBJ = 2829;
            static constexpr BaseType SKU_OBJ = 2830;
            static constexpr BaseType TRANSACTION_OBJ = 2831;
            static constexpr BaseType TI_OBJ = 2832;
            static constexpr BaseType XXX_TWDSCS_SKU = 2835;
            static constexpr BaseType XXX_TWDSCS_CLUSTR_TEMP_ID = 2836;
            static constexpr BaseType XXX_TWDSSC_EXTERNAL_SKU_ENTITY_OBJ = 2837;
            static constexpr BaseType XXX_TRANSACTION_DETAILS = 2842;
            static constexpr BaseType XXX_TWDSCS_TRANSACTIONS_OBJ_ORDER_DETAIL = 2845;
            static constexpr BaseType XXX_TWDSCS_TRANSACTIONS_OBJ = 2847;
            static constexpr BaseType XXX_TWDSCS_TRANSACTIONS = 2848;
            static constexpr BaseType XXX_TWDSCS_MAPPED_SKU_WITH_STATUS = 2849;
            static constexpr BaseType XXX_TWDSCS_MAPPED_EXTERNAL_SKUS = 2852;
            static constexpr BaseType XXX_TWDSCS_LOCAL_SKU_ENTITY_OBJ = 2854;
            static constexpr BaseType XXX_TWDSCS_INCOMING_TRANSACTED_OBJ = 2855;
            static constexpr BaseType XXX_TWDSCS_EXTERNAL_SKU_EXTERNALOBJID_LOCAlOBJID_PAIR = 2856;
            static constexpr BaseType XXX_TWDSCS_EXTERNAL_SKU_MAPPED = 2859;
            static constexpr BaseType XXX_TWDSCS_EXTERNAL_SKU_UNMAPPED = 2860;
            static constexpr BaseType XXX_TWDSCS_EXTERNAL_DUID_OBJID_OBJ = 2861;
            static constexpr BaseType CURATOR_TI_OBJ = 2866;
            static constexpr BaseType CURATOR_TI_OBJ2 = 2869;
            static constexpr BaseType FULLNAME_COREOBJECT_TEST_OBJ = 2870;
            static constexpr BaseType TEST_EMBEDDED_OBJ = 2873;
            static constexpr BaseType TEST_ADDRESS = 2874;
            static constexpr BaseType TEST_COMPANY_DETAILS = 2879;
            static constexpr BaseType TEST_EMPLOYEES = 2882;
            static constexpr BaseType TEST_DESCRIBE_OBJECT = 2884;
            static constexpr BaseType CONTAINER_ID = 2886;
            static constexpr BaseType TEST_DESCRIBE_OBJECT_ALL_TYPES = 2888;
            static constexpr BaseType COREOBJECT_TEST_OBJ1 = 2905;
            static constexpr BaseType COREOBJECT_TEST_OBJ2 = 2911;
            static constexpr BaseType COREOBJECT_TEST_OBJ3 = 2917;
            static constexpr BaseType COREOBJECT_TEST_OBJ4 = 2923;
            static constexpr BaseType COREOBJECT_TEST_EMB = 2929;
            static constexpr BaseType TEST_DEPENDENT = 2931;
            static constexpr BaseType TEST_EMPLOYEEADDRESS = 2933;
            static constexpr BaseType TEST_EMPLOYEE = 2935;
            static constexpr BaseType STUDENTSCHEMA = 2938;
            static constexpr BaseType TEST_OBJ = 2939;
            static constexpr BaseType STUDENTSCHEMAMETA = 2941;
            static constexpr BaseType TW_CORE_PROCESSMGR_TEST_API_SCHEMA = 2943;
            static constexpr BaseType GET_STUDENT_PERCENTAGE_REQUEST_SCHEMA = 2945;
            static constexpr BaseType GET_STUDENT_PERCENTAGE_RESPONSE_SCHEMA = 2947;
            static constexpr BaseType GET_STUDENT_PERCNTAGE_QUERY_SCHEMA = 2949;
            static constexpr BaseType GET_STUDENT_PERCENTAGE_SCRATCHPAD_SCHEMA = 2951;
            static constexpr BaseType GET_STUDENT_DETAIL_REQUEST_SCHEMA = 2954;
            static constexpr BaseType GET_STUDENT_DETAIL_RESPONSE_SCHEMA = 2955;
            static constexpr BaseType GET_STUDENT_DETAIL_QUERY_SCHEMA = 2959;
            static constexpr BaseType GET_STUDENT_DETAIL_SCRATCHPAD_SCHEMA = 2961;
            static constexpr BaseType SOMAPI_REQCONTEXT = 2963;
            static constexpr BaseType SOMAPI_INPUT = 2965;
            static constexpr BaseType SOMAPI_OUTPUT = 2966;
            static constexpr BaseType MYSCRATCHPAD = 2967;
            static constexpr BaseType SOMEAPI_SCRATCHPAD = 2968;
            static constexpr BaseType GREETAPI_SCRATCHPAD_SCHEMA = 2969;
            static constexpr BaseType FACTAPI_SCRATCHPAD_SCHEMA = 2971;
            static constexpr BaseType MULTITASKAPI_SCRATCHPAD_SCHEMA = 2973;
            static constexpr BaseType MULTIACTIVITYAPI_SCRATCHPAD_SCHEMA = 2975;
            static constexpr BaseType Scenario1ReadDB_SCHEMA = 2977;
            static constexpr BaseType TW_CORE_COMMMGR_TEST_API_SCHEMA = 2982;
            static constexpr BaseType DB_TEST_OBJ = 2985;
            static constexpr BaseType STUDENT_OBJ = 2988;
            static constexpr BaseType MY_COMPANY_OBJ = 2989;
            static constexpr BaseType DBTEST_EMBEDDED_OBJ = 2990;
            static constexpr BaseType FULLNAME = 2991;
            static constexpr BaseType DATA_DC_TEST_OBJ = 2992;
            static constexpr BaseType TW_ADMIN_TEST_1 = 3005;
            static constexpr BaseType TW_ADMIN_TEST_2 = 3007;
            static constexpr BaseType TW_ADMIN_TEST_3 = 3009;
            static constexpr BaseType TW_ADMIN_TEST_OBJ_3 = 3010;
            static constexpr BaseType TEST_NFW_SCP = 3014;
            static constexpr BaseType TEST_ADMIN_SERVICES = 3022;
        };

        class eTWDERIVED_SCHEMA {

        public:

            static constexpr BaseType VERSION = 4;
            static constexpr BaseType CONTENT_ID = 5;
            static constexpr BaseType SECTION_START_ID = 6;
            static constexpr BaseType SECTION_END_ID = 7;
            static constexpr BaseType DERIVED_SCHEMA_SECTION = 8;
            static constexpr BaseType START_ID = 9;
            static constexpr BaseType END_ID = 10;
            static constexpr BaseType DERIVED_SCHEMA_OBJECT = 11;
        };

        class eTWDERIVED_SCHEMA_SECTION {

        public:

            static constexpr BaseType CONTENT_ID = 5;
            static constexpr BaseType START_ID = 9;
            static constexpr BaseType END_ID = 10;
            static constexpr BaseType DERIVED_ID = 12;
            static constexpr BaseType HASH_SECTION_ID = 13;
            static constexpr BaseType DERIVED_SCHEMA_SEC_OBJECT = 14;
        };

        class eTWDERIVED_SCHEMA_OBJECT {

        public:

            static constexpr BaseType CONTENT_ID = 5;
            static constexpr BaseType START_ID = 9;
            static constexpr BaseType END_ID = 10;
            static constexpr BaseType DERIVED_SCHEMA_OBJ_FIELD = 15;
        };

        class eTWDERIVED_SCHEMA_OBJ_FIELD {

        public:

            static constexpr BaseType CONTENT_ID = 5;
            static constexpr BaseType DERIVED_ID = 12;
        };

        class eTWOBJECT_LIST {

        public:

            static constexpr BaseType VALUE = 17;
        };

        class eTWHASH_OBJECT {

        public:

            static constexpr BaseType GET_INDEXDETAIL_ID = 19;
            static constexpr BaseType GET_OBJID_ID = 20;
            static constexpr BaseType HASHSUBOBJECT = 44;
        };

        class eTWINDEX_OBJECT {

        public:

            static constexpr BaseType GET_INDEX_ID = 22;
            static constexpr BaseType INDEX_ELEM = 121;
            static constexpr BaseType PARENT_INDEX_ID = 124;
            static constexpr BaseType ID_CAPACITY = 125;
            static constexpr BaseType ID_RANGE_END = 126;
            static constexpr BaseType ID_CURRENT_CAPACITY = 127;
            static constexpr BaseType SUB_INDEX_ID = 128;
            static constexpr BaseType TIME_BUCKET_TYPE = 129;
            static constexpr BaseType TIME_REFERENCE_INDEX = 130;
            static constexpr BaseType TIME_INDEX_ID = 131;
            static constexpr BaseType REFID_INDEX_ID = 132;
        };

        class eTWAMOUNT {

        public:

            static constexpr BaseType QUALIFIED_NUMS = 24;
            static constexpr BaseType EXCHG_RATES = 25;
        };

        class eTWQUANTITY {

        public:

            static constexpr BaseType QUALIFIED_NUMS = 24;
            static constexpr BaseType UOM_FACTOR = 27;
        };

        class eTWRATEX {

        public:

            static constexpr BaseType ID_VAL_PAIR1 = 29;
            static constexpr BaseType ID_VAL_PAIR2 = 30;
            static constexpr BaseType INPUT_STRING = 31;
        };

        class eTWDATERANGE {

        public:

            static constexpr BaseType START_DATE = 33;
            static constexpr BaseType END_DATE = 34;
            static constexpr BaseType DIFF_DAYS = 35;
            static constexpr BaseType PERIOD_STRING = 36;
        };

        class eTWTIMERANGE {

        public:

            static constexpr BaseType PERIOD_STRING = 36;
            static constexpr BaseType START_TIME = 38;
            static constexpr BaseType END_TIME = 39;
            static constexpr BaseType DIFF_SECS = 40;
        };

        class eTWHASHKEY_EXTENDED {

        public:

            static constexpr BaseType HASHKEY = 42;
            static constexpr BaseType HASHVALUE = 43;
        };

        class eTWHASHSUBOBJECT {

        public:

            static constexpr BaseType HASHKEY = 42;
            static constexpr BaseType OBJID = 45;
        };

        class eTWBASE_HASH_OBJECT {

        public:

            static constexpr BaseType HASHKEY = 42;
        };

        class eTWLRUTIMER_PROPERTIES {

        public:

            static constexpr BaseType CACHETYPE = 48;
            static constexpr BaseType CACHE_POINTER = 49;
            static constexpr BaseType FAST_TIMER = 50;
            static constexpr BaseType MEDIUM_TIMER = 51;
            static constexpr BaseType SLOW_TIMER = 52;
            static constexpr BaseType LOW_PRIORITY = 53;
            static constexpr BaseType REGULAR_PRIORITY = 54;
            static constexpr BaseType HIGH_PRIORITY = 55;
        };

        class eTWID_PROPERTIES {

        public:

            static constexpr BaseType IDTYPE = 57;
            static constexpr BaseType QUARANTINE = 58;
            static constexpr BaseType IDMASK = 59;
            static constexpr BaseType RESERVED_IDS = 60;
            static constexpr BaseType IS_SUB_SHARDED = 61;
            static constexpr BaseType NUMBER_OF_SUB_SHARDS = 62;
            static constexpr BaseType SUB_SHARD_ALIVE_TIME = 63;
        };

        class eTWHASHID_PROPERTIES {

        public:

            static constexpr BaseType HASHID_STORE_TYPE = 65;
            static constexpr BaseType HASHID_STORE_POINTER = 66;
            static constexpr BaseType HASHMASK = 67;
        };

        class eTWHASHINDEX_PROPERTIES {

        public:

            static constexpr BaseType HASHID_STORE_TYPE = 65;
            static constexpr BaseType HASHMASK = 67;
            static constexpr BaseType HASHINDEX_STORE_POINTER = 69;
            static constexpr BaseType INITIAL_PRIMARY_INDEX_RANGE = 70;
            static constexpr BaseType INDEX_CAPACITY_INCREASE_STEP = 71;
            static constexpr BaseType MAX_INDEX_ELEMS = 72;
            static constexpr BaseType SPLIT_FACTOR = 73;
            static constexpr BaseType DEFAULT_TIME_INDEX_BUCKET_TYPE = 74;
            static constexpr BaseType REFID_BUCKET_FACTOR = 75;
        };

        class eTWHASHSTRINGINDEX_PROPERTIES {

        public:

            static constexpr BaseType HASHID_STORE_TYPE = 65;
            static constexpr BaseType HASHMASK = 67;
            static constexpr BaseType HASHSTRINGINDEX_STORE_POINTER = 77;
        };

        class eTWHASHAGGR_PROPERTIES {

        public:

            static constexpr BaseType HASHID_STORE_TYPE = 65;
            static constexpr BaseType HASHMASK = 67;
            static constexpr BaseType HASHAGGR_STORE_POINTER = 79;
        };

        class eTWDATA_PROPERTIES {

        public:

            static constexpr BaseType HASHKEY_TYPE = 81;
            static constexpr BaseType SCHEMA_ID = 82;
            static constexpr BaseType LOCAL_INDEX_FIELD = 83;
            static constexpr BaseType LOCAL_STRINGINDEX_FIELD = 84;
            static constexpr BaseType LOCAL_AGGR_FIELD = 85;
        };

        class eTWDS_PROPERTIES {

        public:

            static constexpr BaseType LRUTIMER_PROPERTIES = 47;
            static constexpr BaseType ID_PROPERTIES = 56;
            static constexpr BaseType HASHID_PROPERTIES = 64;
            static constexpr BaseType HASHINDEX_PROPERTIES = 68;
            static constexpr BaseType HASHSTRINGINDEX_PROPERTIES = 76;
            static constexpr BaseType HASHAGGR_PROPERTIES = 78;
            static constexpr BaseType DATA_PROPERTIES = 80;
            static constexpr BaseType STORE_TYPE = 87;
            static constexpr BaseType STOREID = 88;
            static constexpr BaseType SUBSTOREID = 89;
            static constexpr BaseType GENERATIONID = 90;
            static constexpr BaseType REPLICAID = 91;
            static constexpr BaseType HASHIDDS_DEFINITION = 92;
        };

        class eTWDC_PROPERTIES {

        public:

            static constexpr BaseType LRUTIMER_PROPERTIES = 47;
            static constexpr BaseType DS_PROPERTIES = 86;
            static constexpr BaseType DC_TYPE = 94;
            static constexpr BaseType DCID = 95;
        };

        class eTWDCMGR_PROPERTIES {

        public:

            static constexpr BaseType LRUTIMER_PROPERTIES = 47;
            static constexpr BaseType DS_PROPERTIES = 86;
            static constexpr BaseType DC_PROPERTIES = 93;
            static constexpr BaseType TIERID = 97;
        };

        class eTWINDEX_VALUE {

        public:

            static constexpr BaseType VALUE = 17;
            static constexpr BaseType FIELDID = 99;
        };

        class eTWTIME_INDEX_VALUE {

        public:

            static constexpr BaseType VALUE = 17;
            static constexpr BaseType FIELDID = 99;
        };

        class eTWREFID_INDEX_VALUE {

        public:

            static constexpr BaseType VALUE = 17;
            static constexpr BaseType FIELDID = 99;
        };

        class eTWSTRING_INDEX_VALUE {

        public:

            static constexpr BaseType INDEX_VALUE = 98;
            static constexpr BaseType STRING_WORD = 103;
        };

        class eTWTIME_FILTER_DETAIL {

        public:

            static constexpr BaseType FIELDID = 99;
            static constexpr BaseType FOR_TIME = 105;
            static constexpr BaseType FROM_TIME = 106;
            static constexpr BaseType TO_TIME = 107;
        };

        class eTWINDEX_ELEM_FILTER_DETAIL {

        public:

            static constexpr BaseType FOR_TIME = 105;
            static constexpr BaseType TO_TIME = 107;
            static constexpr BaseType USE_APPOBJTYPEFILTER = 109;
            static constexpr BaseType APPOBJTYPE_SCHEMAID = 110;
            static constexpr BaseType USE_STRINGFILTER = 111;
            static constexpr BaseType STRINGKEY = 112;
            static constexpr BaseType COMPARE_SCOPE = 113;
            static constexpr BaseType STRING_SCHEMAID = 114;
            static constexpr BaseType USE_TIMEFILTER = 115;
            static constexpr BaseType FROM_TME = 116;
            static constexpr BaseType TIME_SCHEMAID = 117;
            static constexpr BaseType USE_REFIDFILTER = 118;
            static constexpr BaseType REFID = 119;
            static constexpr BaseType REFID_SCHEMAID = 120;
        };

        class eTWINDEX_ELEM {

        public:

            static constexpr BaseType VALUE = 17;
            static constexpr BaseType OBJID = 45;
            static constexpr BaseType FIELDID = 99;
            static constexpr BaseType TIME_INDEX_VALUE = 100;
            static constexpr BaseType REFID_INDEX_VALUE = 101;
            static constexpr BaseType OBJTYPE = 122;
            static constexpr BaseType INDEX_DATA = 123;
        };

        class eTWAPPLICATION_SESSION_OBJ {

        public:

            static constexpr BaseType APPLICATION_NAME = 134;
            static constexpr BaseType APPLICATION_BASENAME = 135;
            static constexpr BaseType BOOTSCHEMADB_INITIALSTATE = 136;
            static constexpr BaseType CORESCHEMADB_INITIALSTATE = 137;
            static constexpr BaseType CORECONFIGDB_INITIALSTATE = 138;
            static constexpr BaseType USERCONFIGDB_INITIALSTATE = 139;
            static constexpr BaseType CACHEDB_INITIALSTATE = 140;
            static constexpr BaseType NETWORK_NAME = 141;
            static constexpr BaseType MACHINE_NAME = 142;
            static constexpr BaseType DEVICE_NAME = 143;
            static constexpr BaseType OS_NAME = 144;
            static constexpr BaseType OS_VERSION = 145;
            static constexpr BaseType OS_LANGUAGE = 146;
        };

        class eTWAPPLICATION_PATHS_OBJ {

        public:

            static constexpr BaseType APPLICATION_PATH = 148;
            static constexpr BaseType APPLICATION_FILENAME = 149;
            static constexpr BaseType BOOTSCHEMA_PATH = 150;
            static constexpr BaseType APPDB_PATH = 151;
            static constexpr BaseType ADMIN_PATH = 152;
            static constexpr BaseType USERDATA_DEFAULT_PATH = 153;
            static constexpr BaseType USERDATA_DEFAULT_BACKUP_PATH = 154;
            static constexpr BaseType BASE_CURRENT_PATH = 155;
            static constexpr BaseType PROCESSIDDB_FILENAME = 156;
        };

        class eTWAPPLICATION_PARMS_OBJ {

        public:

            static constexpr BaseType APPLICATION_PARMS = 158;
            static constexpr BaseType COMPANY_FILENAME = 159;
            static constexpr BaseType MISSING_COMPANY_FILENAME = 160;
            static constexpr BaseType NOACCESS_COMPANY_FILENAME = 161;
            static constexpr BaseType CAPSULE_FILENAME = 162;
            static constexpr BaseType MISSING_CAPSULE_FILENAME = 163;
            static constexpr BaseType NOACCESS_CAPSULE_FILENAME = 164;
            static constexpr BaseType INVALID_FILENAME = 165;
            static constexpr BaseType TWIN_OS_PROCESSID = 166;
            static constexpr BaseType TWIN_RECV_TIME_TICKS = 167;
            static constexpr BaseType TWIN_TRANSFER_CONFIRMED = 168;
            static constexpr BaseType PARMS_HANDED_OVER = 169;
        };

        class eTWAPPLICATION_TWIN_OBJ {

        public:

            static constexpr BaseType APPLICATION_PARMS_OBJ = 157;
        };

        class eTWSTART_WINDOW_REQDATA {

        public:

            static constexpr BaseType APPLICATION_PARMS_OBJ = 157;
        };

        class eTWHANDOVER_TWIN_REQDATA {

        public:

            static constexpr BaseType APPLICATION_PARMS_OBJ = 157;
            static constexpr BaseType APPLICATION_TWIN_OBJ = 170;
        };

        class eTWCOREDISKIO_OPERATION_REQ_PARMS {

        public:

            static constexpr BaseType DISK_IO_OPERATION = 174;
            static constexpr BaseType IS_FOR_DISKFILE = 175;
            static constexpr BaseType ABSOLUTE_FILE_PATH = 176;
            static constexpr BaseType BLOCK_SIZE = 177;
            static constexpr BaseType IS_OPEN_FIRST = 178;
            static constexpr BaseType DISK_FILE_SIZE = 179;
            static constexpr BaseType IS_CREATED = 180;
            static constexpr BaseType IS_OVERWRITE = 181;
            static constexpr BaseType IS_WITH_TIME_CHANGE = 182;
            static constexpr BaseType IS_READ_ONLY = 183;
            static constexpr BaseType IS_HIDDEN = 184;
            static constexpr BaseType IS_DIRECT_MODE = 185;
            static constexpr BaseType IS_ASSET_FILE = 186;
            static constexpr BaseType DISK_FILE_POINTER = 187;
            static constexpr BaseType IS_READ_LOCK = 188;
            static constexpr BaseType OFFSET = 189;
            static constexpr BaseType BUFFER = 190;
            static constexpr BaseType SIZE = 191;
            static constexpr BaseType BLOCK_NUMBER = 192;
            static constexpr BaseType TIME_OUT = 193;
            static constexpr BaseType ABSOLUTE_PATH = 194;
            static constexpr BaseType DRIVE_PATH = 195;
            static constexpr BaseType SOURCE_FILE_PATH = 196;
            static constexpr BaseType DEST_FILE_PATH = 197;
            static constexpr BaseType SET_READ_ONLY = 198;
            static constexpr BaseType IS_INCLUDE_HIDDEN = 199;
        };

        class eTWCOREDISKIO_OPERATION_RESP_PARMS {

        public:

            static constexpr BaseType ABSOLUTE_FILE_PATH = 176;
            static constexpr BaseType BLOCK_SIZE = 177;
            static constexpr BaseType DISK_FILE_SIZE = 179;
            static constexpr BaseType IS_CREATED = 180;
            static constexpr BaseType IS_READ_ONLY = 183;
            static constexpr BaseType DISK_FILE_POINTER = 187;
            static constexpr BaseType BUFFER = 190;
            static constexpr BaseType FAIL_PATH = 201;
            static constexpr BaseType FILE_LIST = 202;
            static constexpr BaseType DIR_LIST = 203;
            static constexpr BaseType TIME_STAMP = 204;
            static constexpr BaseType IS_ALREADY_EXISTING = 205;
            static constexpr BaseType IS_DRIVE_VALID = 206;
        };

        class eTWHANDLE_DISKIO_REQ_DATA {

        public:

            static constexpr BaseType COREDISKIO_OPERATION_REQ_PARMS = 173;
        };

        class eTWHANDLE_DISKIO_RESP_DATA {

        public:

            static constexpr BaseType COREDISKIO_OPERATION_RESP_PARMS = 200;
        };

        class eTWCONSUME_COMPLETE_HANDOVER_BY_TWIN_REQDATA {

        public:

            static constexpr BaseType TWIN_OS_PROCESSID = 166;
        };

        class eTWDC_COMPANY_OBJ {

        public:

            static constexpr BaseType DC_COMPANY_PATH = 212;
            static constexpr BaseType DC_COMPANY_NAME = 213;
        };

        class eTWEVENT_STAGE_REQUESTCONTEXT_SCHEMA {

        public:

            static constexpr BaseType OS_LANGUAGE = 146;
            static constexpr BaseType STAGE_SCHEMA_ID = 215;
            static constexpr BaseType USER_LANGUAGE = 216;
            static constexpr BaseType USER_ID = 217;
            static constexpr BaseType AUTHENTICATED_USER_ID = 218;
            static constexpr BaseType STAGE_STATUS = 219;
            static constexpr BaseType STAGE_POP = 220;
            static constexpr BaseType STAGE_OWNER = 221;
            static constexpr BaseType STAGE_FUNCTION_PTR = 222;
            static constexpr BaseType STAGE_CONTINUATION_FUNCTION_PTR = 223;
            static constexpr BaseType STAGE_CONTINUATION_CONDITION = 224;
            static constexpr BaseType STAGE_CONTINUATION_API = 225;
            static constexpr BaseType STAGE_CONTINUATION_DESTID = 226;
            static constexpr BaseType STAGE_CONTINUATION_DESTID_TYPE = 227;
            static constexpr BaseType STAGE_APIID = 228;
            static constexpr BaseType STAGE_APIOWNER = 229;
            static constexpr BaseType STAGE_TWAPISTATICFUNC = 230;
            static constexpr BaseType STAGE_APICLASSMEMBERFUNC = 231;
            static constexpr BaseType STAGE_DESTID = 232;
            static constexpr BaseType STAGE_DESTID_TYPE = 233;
            static constexpr BaseType COMMMGR_CALLBACK_FUNC = 234;
            static constexpr BaseType TASKMODE_WAIT_ON_TASK = 235;
            static constexpr BaseType TASKMODE_TASKCONSUMERFUNC = 236;
            static constexpr BaseType TASKMODE_TOTAL_TASKS = 237;
            static constexpr BaseType TASKMODE_SUCCESS_CONDITION = 238;
            static constexpr BaseType TASKMODE_TASKS_DONE = 239;
            static constexpr BaseType TASKMODE_TOTAL_SUCCESS = 240;
        };

        class eTWTWEVENT_OBJ {

        public:

            static constexpr BaseType TWEVENT_ISEXECUTED = 242;
            static constexpr BaseType TWEVENT_EVENTID = 243;
            static constexpr BaseType TWEVENT_COMMID = 244;
            static constexpr BaseType TWEVENT_PARENTID = 245;
            static constexpr BaseType TWEVENT_TIMEDTASKID = 246;
            static constexpr BaseType TWEVENT_ISTIMEDEVENTPERIODIC = 247;
            static constexpr BaseType TWEvent_INTERESTEDEVENTS = 248;
            static constexpr BaseType EVENT_STAGE_REQUESTCONTEXT = 249;
            static constexpr BaseType EVENT_STAGE_INPUT = 250;
            static constexpr BaseType EVENT_STAGE_OUTPUT = 251;
            static constexpr BaseType EVENT_STAGE_SCRATCHPAD = 252;
        };

        class eTWINDIRECT_ROUTE_OBJ {

        public:

            static constexpr BaseType NEXT_HOP_DESTID = 254;
            static constexpr BaseType DEST_DESTID_ON_NEXT_HOP = 255;
            static constexpr BaseType NUM_LEGS = 256;
            static constexpr BaseType MTU = 257;
            static constexpr BaseType LAST_STATE = 258;
            static constexpr BaseType LAST_STATE_TIME = 259;
        };

        class eTWWIP_STEP {

        public:

            static constexpr BaseType PACKET_TYPE = 261;
            static constexpr BaseType NUM_RETRIES_AVAILABLE = 262;
            static constexpr BaseType SUCCEEDED = 263;
            static constexpr BaseType COMPLETION_ALERTABLE_WAIT = 264;
        };

        class eTWDIRECT_ROUTE_OBJ {

        public:

            static constexpr BaseType MTU = 257;
            static constexpr BaseType LAST_STATE = 258;
            static constexpr BaseType LAST_STATE_TIME = 259;
            static constexpr BaseType WIP_STEP = 260;
            static constexpr BaseType IPADDRESS = 266;
            static constexpr BaseType IPID_SOURCE = 267;
            static constexpr BaseType IPID_FOUND_REACHABLE_ONCE = 268;
            static constexpr BaseType SRC_IPID_AS_SEEN_BY_DEST = 269;
            static constexpr BaseType LPTTELEM = 270;
            static constexpr BaseType STATE_CHANGE_ALERTABLE_WAIT = 271;
            static constexpr BaseType PINGING_ON_BASE_DIT_ALERTABLE_WAIT = 272;
            static constexpr BaseType REGISTERED_FOR_PING_ON_BASE_DIT_ALERTABLE_WAIT = 273;
            static constexpr BaseType REACHED_ON_SIMPLE_PORTS_ALERTABLE_WAIT = 274;
            static constexpr BaseType REGULAR_PORTS_REMEDY_SUCCEEDED_ALERTABLE_WAIT = 275;
            static constexpr BaseType REGULAR_PORTS_REMEDY_APPLIED_ALERTABLE_WAIT = 276;
            static constexpr BaseType CONTACTED_ON_SIMPLE_PORTS_ALERTABLE_WAIT = 277;
            static constexpr BaseType REGISTER_WITH_ME_RECEIVED = 278;
        };

        class eTWOTHER_DIRECT_IPIDS {

        public:

            static constexpr BaseType IPADDRESS = 266;
            static constexpr BaseType IPID_SOURCE = 267;
        };

        class eTWDEST_OBJ {

        public:

            static constexpr BaseType INDIRECT_ROUTE_OBJ = 253;
            static constexpr BaseType DIRECT_ROUTE_OBJ = 265;
            static constexpr BaseType OTHER_DIRECT_IPIDS = 279;
            static constexpr BaseType PUID = 281;
            static constexpr BaseType APP_TYPE = 282;
            static constexpr BaseType PRODUCT_ID = 283;
            static constexpr BaseType BUILD_VERSION = 284;
            static constexpr BaseType IS_BOOTSTRAPPED = 285;
            static constexpr BaseType UNIVERSAL_ID = 286;
            static constexpr BaseType DIT_VERSION = 287;
            static constexpr BaseType DIT_PORT = 288;
            static constexpr BaseType SIMPLE_PORT = 289;
            static constexpr BaseType MSG_IDS = 290;
            static constexpr BaseType SRC_DIT_SOCK_ID = 291;
            static constexpr BaseType SRC_DESTID_ON_DEST = 292;
            static constexpr BaseType DIRECT_ROUTE_LPTTOFFSET = 293;
        };

        class eTWIOROOT_OBJ {

        public:

            static constexpr BaseType PUID = 281;
            static constexpr BaseType IOROOT_TYPE = 295;
            static constexpr BaseType IOROOT_NAME = 296;
            static constexpr BaseType IS_PROCESS_EXCLUSIVE = 297;
            static constexpr BaseType IS_NETWORKED_OR_REMOVABLE = 298;
            static constexpr BaseType IOBASEPATH_IDS = 299;
            static constexpr BaseType IOROOT_ALIASES = 300;
            static constexpr BaseType IOROOT_STATUS = 301;
            static constexpr BaseType PENDING_TASKS_QUEUE_PTR = 302;
        };

        class eTWTAF_FILE_INFO {

        public:

            static constexpr BaseType PUID = 281;
            static constexpr BaseType IOBASEPATH_ID = 304;
            static constexpr BaseType ACTIVE_TAF_ID = 305;
        };

        class eTWDB_INFO {

        public:

            static constexpr BaseType PUID = 281;
            static constexpr BaseType DUID = 307;
            static constexpr BaseType MODE = 308;
        };

        class eTWIOBASEPATH_OBJ {

        public:

            static constexpr BaseType TAF_FILE_INFO = 303;
            static constexpr BaseType ACTIVE_TAF_ID = 305;
            static constexpr BaseType DB_INFO = 306;
            static constexpr BaseType IOROOT_ID = 310;
            static constexpr BaseType IOBASEPATH_NAME = 311;
            static constexpr BaseType IOBASEPATH_STATE = 312;
            static constexpr BaseType FILE_INFO = 313;
            static constexpr BaseType DIR_INFO = 314;
            static constexpr BaseType IOBASEPATH_ALIASES = 315;
            static constexpr BaseType LEADER_PUID = 316;
            static constexpr BaseType ALTERNATE_LEADER_PUID = 317;
        };

        class eTWTAF_RUNNING_INFO {

        public:

            static constexpr BaseType PUID = 281;
            static constexpr BaseType RUNNING_NUMBER = 319;
            static constexpr BaseType RUNNING_NUMBER_UTT = 320;
        };

        class eTWTAF_FILE_DATA {

        public:

            static constexpr BaseType DEVICE_NAME = 143;
            static constexpr BaseType OS_NAME = 144;
            static constexpr BaseType IPADDRESS = 266;
            static constexpr BaseType APP_TYPE = 282;
            static constexpr BaseType TAF_RUNNING_INFO = 318;
            static constexpr BaseType RUNNING_NUMBER = 319;
            static constexpr BaseType RUNNING_NUMBER_UTT = 320;
            static constexpr BaseType ONLINE_PUID = 322;
            static constexpr BaseType OFFLINE_PUID = 323;
            static constexpr BaseType APP_VERSION = 324;
            static constexpr BaseType PROCESS_TYPE = 325;
            static constexpr BaseType PROCESS_CLASS = 326;
        };

        class eTWTWDC_SECTION_METADATA_SCHEMA {

        public:

            static constexpr BaseType DC_SECTION_CONTENT_LRUTIMER = 328;
            static constexpr BaseType DC_SECTION_MESSAGE_DRIVEN = 329;
        };

        class eTWTWDC_METADATA_SCHEMA {

        public:

            static constexpr BaseType DC_TYPE = 94;
            static constexpr BaseType TWDC_SECTION_METADATA_SCHEMA = 327;
            static constexpr BaseType ID_MAX_BIT_SIZE = 331;
            static constexpr BaseType ID_REUSE = 332;
            static constexpr BaseType ID_QUARANTINE_TIME = 333;
            static constexpr BaseType DC_PURPOSE = 334;
            static constexpr BaseType DC_IS_PERSISTED = 335;
            static constexpr BaseType DC_CONTENT_OBJECT = 336;
            static constexpr BaseType DC_IS_MIRRORED = 337;
            static constexpr BaseType DC_NEED_VERSIONING = 338;
            static constexpr BaseType DC_PRESERVE_HISTORY = 339;
            static constexpr BaseType DC_OPEN_ONLY_IN_EXCLUSIVE_MODE = 340;
            static constexpr BaseType DC_ACCEPTABLE_OPEN_MODES = 341;
            static constexpr BaseType DC_MULTI_SECTION = 342;
            static constexpr BaseType DC_REPLICA_ID = 343;
            static constexpr BaseType DC_GENERATION_ID = 344;
            static constexpr BaseType DC_SHARDED_ACROSS_PROCESS = 345;
            static constexpr BaseType DC_CONTENT_SHARDED_WITHIN_DC = 346;
            static constexpr BaseType DC_SCHEMA_ID = 347;
            static constexpr BaseType DC_FILENAME = 348;
            static constexpr BaseType DC_CREATE_ALWAYS = 349;
            static constexpr BaseType DC_INITIAL_SIZE = 350;
            static constexpr BaseType DC_FILEPATH = 351;
            static constexpr BaseType DC_FILE_EXTENSION = 352;
            static constexpr BaseType DC_FAILED_PATH = 353;
            static constexpr BaseType DC_FILE_TYPE = 354;
            static constexpr BaseType DC_APP_BUILD_VERSION = 355;
            static constexpr BaseType DC_OPEN_MODE = 356;
            static constexpr BaseType DC_OPEN_FAIL_IF_MODE_ERROR = 357;
            static constexpr BaseType DC_OPEN_FAIL_IF_DOESNOTEXIST = 358;
            static constexpr BaseType DC_CREATE_FAIL_IF_EXIST = 359;
            static constexpr BaseType DC_OPEN_CREATE_IF_DOESNOTEXIST = 360;
            static constexpr BaseType DC_RESET_ON_OPEN = 361;
            static constexpr BaseType DC_VERIFY_ON_OPEN = 362;
            static constexpr BaseType DC_RESET_ON_VERIFY = 363;
            static constexpr BaseType DC_OPEN_VALIDATE_BUILD_VERSION = 364;
            static constexpr BaseType DC_APPLICATION_DATA = 365;
            static constexpr BaseType DC_DUID = 366;
        };

        class eTWVERSION_OBJECT {

        public:

            static constexpr BaseType VERSION_TIME = 368;
            static constexpr BaseType VERSION_BLOCKNUM = 369;
            static constexpr BaseType VERSION_OBJID = 370;
            static constexpr BaseType VERSION_MGMT_BLOCKNUM = 371;
        };

        class eTWTWAPI_IS_DUPLICATE_DUID_REQ_OBJ_ID {

        public:

            static constexpr BaseType TWAPI_DUID_FLD_ID = 373;
            static constexpr BaseType TWAPI_PUID_FLD_ID = 374;
            static constexpr BaseType TWAPI_RUNNING_NUMBER_FLD_ID = 375;
        };

        class eTWTWAPI_IS_DUPLICATE_DUID_RESP_OBJ_ID {

        public:

            static constexpr BaseType TWAPI_DUID_FLD_ID = 373;
        };

        class eTWOPEN_DB_REQUEST {

        public:

            static constexpr BaseType SCHEMA_ID = 82;
            static constexpr BaseType PUID = 281;
            static constexpr BaseType DUID = 307;
            static constexpr BaseType DB_TYPE = 378;
            static constexpr BaseType OPEN_MODE = 379;
            static constexpr BaseType WRITE_MODE_IS_MANDATORY = 380;
            static constexpr BaseType OPEN_ACTION = 381;
            static constexpr BaseType QUALIFICATION_MODE = 382;
            static constexpr BaseType BASE_DIRECTORY_PATH = 383;
            static constexpr BaseType DB_SUB_DIRECTORY = 384;
            static constexpr BaseType DB_NAME = 385;
            static constexpr BaseType GENERATION_ID = 386;
            static constexpr BaseType REPLICA_ID = 387;
            static constexpr BaseType REQUEST_STATUS = 388;
            static constexpr BaseType DB_READ_ONLY_DUE_TO_PERMISSIONS = 389;
        };

        class eTWOPENDB_SCRATCHPAD {

        public:

            static constexpr BaseType IOROOT_NAME = 296;
            static constexpr BaseType TAF_FILE_INFO = 303;
            static constexpr BaseType IOBASEPATH_ID = 304;
            static constexpr BaseType ACTIVE_TAF_ID = 305;
            static constexpr BaseType IOROOT_ID = 310;
            static constexpr BaseType IOBASEPATH_NAME = 311;
            static constexpr BaseType FILE_INFO = 313;
            static constexpr BaseType DIR_INFO = 314;
            static constexpr BaseType DB_READ_ONLY_DUE_TO_PERMISSIONS = 389;
            static constexpr BaseType TAF_FILE_NAME = 391;
            static constexpr BaseType FILE_HANDLE = 392;
            static constexpr BaseType DISKIO_OP_STATUS = 393;
            static constexpr BaseType TAF_FILES = 394;
            static constexpr BaseType TAF_FILE_CREATED = 395;
            static constexpr BaseType IOBASEPATH_CREATED = 396;
            static constexpr BaseType IOROOT_CREATED = 397;
            static constexpr BaseType TAF_MODEL = 398;
            static constexpr BaseType TAF_FILE_IS_READ_ONLY = 399;
            static constexpr BaseType TAF_FILE_INFO_REPEAT_NDX = 400;
            static constexpr BaseType POTENTIAL_STALE_TAF_INFO = 401;
        };

        class eTWTAF_COORDINATION_REQUEST {

        public:

            static constexpr BaseType TAF_FILE_INFO = 303;
            static constexpr BaseType IOBASEPATH_ID = 304;
            static constexpr BaseType ACTIVE_TAF_ID = 305;
            static constexpr BaseType DB_INFO = 306;
            static constexpr BaseType IOBASEPATH_STATE = 312;
            static constexpr BaseType FILE_INFO = 313;
            static constexpr BaseType DIR_INFO = 314;
            static constexpr BaseType RUNNING_NUMBER = 319;
            static constexpr BaseType RUNNING_NUMBER_UTT = 320;
            static constexpr BaseType REQUEST_STATUS = 388;
            static constexpr BaseType ACTION = 403;
            static constexpr BaseType RUNNING_NUMBER_NDX = 404;
        };

        class eTWVERSIONED_DS_BASE_REQUEST {

        public:

            static constexpr BaseType REQUEST_STATUS = 388;
            static constexpr BaseType REQUESTED_VERSION = 406;
            static constexpr BaseType RESOLVED_VERSION = 407;
        };

        class eTWVERSIONED_DS_BASE_SCRATCHPAD {

        public:

            static constexpr BaseType VERSION_PRIMARYOBJECT_DS_PTR = 409;
            static constexpr BaseType VERSION_OBJECT_DS_PTR = 410;
            static constexpr BaseType ITERATOR_OBJECT_DS_PTR = 411;
            static constexpr BaseType VERSIONDS_DATA_PTR = 412;
            static constexpr BaseType OBJECT_SUBSTORETYPE = 413;
            static constexpr BaseType ID_ACTION = 414;
            static constexpr BaseType OBJECT_ACTION = 415;
            static constexpr BaseType INDEX_ACTION = 416;
            static constexpr BaseType RESOLVED_OBJID_SCHEMAID = 417;
            static constexpr BaseType RESOLVED_OBJID_CREATED_SCHEMAID = 418;
        };

        class eTWVERSIONED_DS_VERSION_REQUEST {

        public:

            static constexpr BaseType CREATED_OBJID = 420;
            static constexpr BaseType MODIFIED_OBJID = 421;
            static constexpr BaseType MAIN_DS_FINAL_LASTID = 422;
            static constexpr BaseType HASHID_DS_FINAL_LASTID = 423;
            static constexpr BaseType INDEX_DS_FINAL_LASTID = 424;
            static constexpr BaseType AGGREGATE_DS_FINAL_LASTID = 425;
        };

        class eTWVERSIONED_DS_VERSION_SCRATCHPAD {

        public:

            static constexpr BaseType NEW_OBJECT = 427;
            static constexpr BaseType EXISTING_OBJECT = 428;
            static constexpr BaseType EDIT_SET = 429;
            static constexpr BaseType EDIT_GET = 430;
            static constexpr BaseType RESOLVED_HASHID = 431;
            static constexpr BaseType OBJECT_RESULT_PTR = 432;
            static constexpr BaseType OBJECT_SCHEMA_PTR = 433;
            static constexpr BaseType DB_BLOCK_PTR = 434;
            static constexpr BaseType DB_DISKOBJ_PTR = 435;
        };

        class eTWVERSIONED_DS_HASHID_REQUEST {

        public:

            static constexpr BaseType REQUESTED_OBJID = 437;
            static constexpr BaseType REQUESTED_HASHKEY = 438;
            static constexpr BaseType RESOLVED_OBJID = 439;
            static constexpr BaseType RESOLVED_OBJID_CREATED = 440;
            static constexpr BaseType RESOLVED_HASHKEY = 441;
        };

        class eTWVERSIONED_DS_HASHID_SCRATCHPAD {

        public:

            static constexpr BaseType NEW_OBJECT = 427;
            static constexpr BaseType EXISTING_OBJECT = 428;
            static constexpr BaseType EDIT_SET = 429;
            static constexpr BaseType EDIT_GET = 430;
            static constexpr BaseType RESOLVED_HASHID = 431;
            static constexpr BaseType OBJECT_RESULT_PTR = 432;
            static constexpr BaseType OBJECT_SCHEMA_PTR = 433;
            static constexpr BaseType DB_BLOCK_PTR = 434;
            static constexpr BaseType DB_DISKOBJ_PTR = 435;
        };

        class eTWVERSIONED_DS_OBJECT_REQUEST {

        public:

            static constexpr BaseType REQUESTED_OBJID = 437;
            static constexpr BaseType REQUESTED_HASHKEY = 438;
            static constexpr BaseType RESOLVED_OBJID = 439;
            static constexpr BaseType RESOLVED_OBJID_CREATED = 440;
            static constexpr BaseType RESOLVED_HASHKEY = 441;
            static constexpr BaseType REQUESTED_PRIORITY = 444;
            static constexpr BaseType RESOLVED_MAIN_VERSION_OBJID = 445;
        };

        class eTWVERSIONED_DS_OBJECT_SCRATCHPAD {

        public:

            static constexpr BaseType VERSION_OBJID = 370;
            static constexpr BaseType NEW_OBJECT = 427;
            static constexpr BaseType EXISTING_OBJECT = 428;
            static constexpr BaseType EDIT_SET = 429;
            static constexpr BaseType EDIT_GET = 430;
            static constexpr BaseType RESOLVED_HASHID = 431;
            static constexpr BaseType OBJECT_RESULT_PTR = 432;
            static constexpr BaseType OBJECT_SCHEMA_PTR = 433;
            static constexpr BaseType DB_BLOCK_PTR = 434;
            static constexpr BaseType DB_DISKOBJ_PTR = 435;
            static constexpr BaseType PREPARE_FOR_EDIT = 447;
            static constexpr BaseType OBJECT_BLOCK_INFO = 448;
            static constexpr BaseType OBJECT_VERSION = 449;
            static constexpr BaseType OBJECT_VERSION_UTT = 450;
            static constexpr BaseType WIP_VERSION = 451;
            static constexpr BaseType WIP_VERSION_UTT = 452;
            static constexpr BaseType OBJECT_RESULT_IS_SET = 453;
            static constexpr BaseType OBJECT_RESULT_API_STATUS = 454;
            static constexpr BaseType OBJECT_RESULT_STATUS = 455;
        };

        class eTWVERSIONED_DS_INDEX_SCRATCHPAD {

        public:

            static constexpr BaseType TIME_INDEX_VALUE = 100;
            static constexpr BaseType REFID_INDEX_VALUE = 101;
            static constexpr BaseType STRING_INDEX_VALUE = 102;
            static constexpr BaseType INDEX_ELEM = 121;
            static constexpr BaseType REQUESTED_INDEX_HASHKEY = 457;
            static constexpr BaseType RESOLVED_INDEX_OBJECT_OBJID = 458;
            static constexpr BaseType RESOLVED_INDEX_OBJECT_OBJID_CREATED = 459;
            static constexpr BaseType INDEX_CONTINUATION_FUNCTION_PTR = 460;
            static constexpr BaseType SUBINDEX_OBJECT_OBJID = 461;
            static constexpr BaseType IS_FRESH_SUBINDEX_OBJECT_OBJID = 462;
            static constexpr BaseType SUBINDEX_ID_CAPACITY = 463;
            static constexpr BaseType SUBINDEX_ID_RANGE_END = 464;
            static constexpr BaseType INDEX_ELEM_OBJTYPE = 465;
            static constexpr BaseType INDEX_ELEM_OBJID = 466;
            static constexpr BaseType IS_TIME_SENSITIVE = 467;
            static constexpr BaseType CURRENT_INDEX_VALUE = 468;
            static constexpr BaseType IS_TIME_BUCKET_CYCLE = 469;
            static constexpr BaseType STRING_INDEX_IS_NEW = 470;
        };

        class eTWVERSIONED_DS_ITERATOR_REQUEST {

        public:

            static constexpr BaseType RESOLVED_ITERATOR_ID = 472;
            static constexpr BaseType RESOLVED_ITERATOR_UTT = 473;
            static constexpr BaseType RESOLVED_ITERATOR_RESULT_BEGIN_NDX = 474;
            static constexpr BaseType RESOLVED_ITERATOR_RESULT_END_NDX = 475;
            static constexpr BaseType REQUESTED_APPOBJTYPE = 476;
            static constexpr BaseType REQUESTED_REFID = 477;
            static constexpr BaseType REQUESTED_REFID_FIELDID = 478;
            static constexpr BaseType REQUESTED_STRING = 479;
            static constexpr BaseType REQUESTED_MATCH_STYLE = 480;
            static constexpr BaseType REQUESTED_STRING_FIELDID = 481;
            static constexpr BaseType REQUESTED_TIME_FILTER = 482;
            static constexpr BaseType REQUESTED_DIRECTION_IS_BACKWARD = 483;
            static constexpr BaseType REQUESTED_FROM_NDX = 484;
            static constexpr BaseType REQUESTED_NUMBER_OF_IDS = 485;
            static constexpr BaseType FILTERS_IGNORED_IN_RESULT = 486;
            static constexpr BaseType REQUESTED_STRING_WAS_MULTIWORD = 487;
            static constexpr BaseType RESULT_IDLIST = 488;
            static constexpr BaseType RESULT_NO_MORE_IDS = 489;
            static constexpr BaseType RESULT_TOTAL_IDS = 490;
            static constexpr BaseType RESULT_ID_FROM_NDX = 491;
            static constexpr BaseType RESULT_ID_TO_NDX = 492;
        };

        class eTWVERSIONED_DS_ITERATOR_SCRATCHPAD {

        public:

            static constexpr BaseType CONTINUE_ITERATION = 494;
            static constexpr BaseType INDEX_LIST_PRIMARYINDEXOBJ_HASHKEY = 495;
            static constexpr BaseType INDEX_LIST_PRIMARYINDEXOBJ_OBJID = 496;
            static constexpr BaseType INDEX_LIST_CURRENT_PRIMARYOBJID_NDX = 497;
            static constexpr BaseType INDEX_LIST_SUBINDEXOBJ_OBJID = 498;
            static constexpr BaseType INDEX_LIST_CURRENT_SUBOBJID_NDX = 499;
            static constexpr BaseType INDEX_LIST_CURRENT_OBJID = 500;
            static constexpr BaseType INDEX_LIST_USE_STRINGFILTER = 501;
            static constexpr BaseType INDEX_LIST_STRINGKEY = 502;
            static constexpr BaseType INDEX_LIST_COMPARE_SCOPE = 503;
            static constexpr BaseType INDEX_LIST_STRING_SCHEMAID = 504;
            static constexpr BaseType INDEX_LIST_USE_APPOBJTYPEFILTER = 505;
            static constexpr BaseType INDEX_LIST_APPOBJTYPE_SCHEMAID = 506;
            static constexpr BaseType INDEX_LIST_USE_TIMEFILTER = 507;
            static constexpr BaseType INDEX_LIST_FROMTIME = 508;
            static constexpr BaseType INDEX_LIST_TOTIME = 509;
            static constexpr BaseType INDEX_LIST_TIME_SCHEMAID = 510;
            static constexpr BaseType INDEX_LIST_USE_REFIDFILTER = 511;
            static constexpr BaseType INDEX_LIST_REFID = 512;
            static constexpr BaseType INDEX_LIST_REFID_SCHEMAID = 513;
            static constexpr BaseType INDEX_LIST_NO_MORE_IDS = 514;
            static constexpr BaseType INDEX_LIST_REQUESTED_NUMIDS = 515;
            static constexpr BaseType INDEX_LIST_GATHERED_NUMIDS = 516;
        };

        class eTWDS_ITERATOR_OBJECT_KEY {

        public:

            static constexpr BaseType ITERATOR_RESOLVED_VERSION = 518;
            static constexpr BaseType ITERATOR_PRIMARYINDEXOBJ_HASHKEY = 519;
            static constexpr BaseType ITERATOR_USE_STRINGFILTER = 520;
            static constexpr BaseType ITERATOR_STRINGKEY = 521;
            static constexpr BaseType ITERATOR_COMPARE_SCOPE = 522;
            static constexpr BaseType ITERATOR_USE_TIMEFILTER = 523;
            static constexpr BaseType ITERATOR_FROMTIME = 524;
            static constexpr BaseType ITERATOR_TOTIME = 525;
            static constexpr BaseType ITERATOR_TIME_SCHEMAID = 526;
            static constexpr BaseType ITERATOR_USE_REFIDFILTER = 527;
            static constexpr BaseType ITERATOR_REFID = 528;
            static constexpr BaseType ITERATOR_REFID_SCHEMAID = 529;
        };

        class eTWITERATOR_OBJECT {

        public:

            static constexpr BaseType RESULT_NO_MORE_IDS = 489;
            static constexpr BaseType RESULT_TOTAL_IDS = 490;
            static constexpr BaseType ITERATOR_COMPLETE = 531;
            static constexpr BaseType RESULTS = 532;
            static constexpr BaseType IS_STRING_INDEX = 533;
            static constexpr BaseType STRING_KEY = 534;
            static constexpr BaseType STRING_PART = 535;
            static constexpr BaseType STRING_HASHID = 536;
            static constexpr BaseType STRING_PART_OBJID = 537;
            static constexpr BaseType STRING_KEY_OBJID = 538;
            static constexpr BaseType LAST_STRING_KEY_OBJID_DONE = 539;
            static constexpr BaseType INDEX_OBJTYPE = 540;
            static constexpr BaseType MAIN_INDEX_OBJID = 541;
            static constexpr BaseType REFID_BUCKET_OBJID = 542;
            static constexpr BaseType RESOLVED_TIME_FROM = 543;
            static constexpr BaseType RESOLVED_TIME_TO = 544;
            static constexpr BaseType RESOLVED_TIME_FIELDID = 545;
            static constexpr BaseType CURRENT_PRIMARY_INDEX_OBJID = 546;
            static constexpr BaseType TIME_BUCKETS_OBJID = 547;
            static constexpr BaseType RESULT_AVBL_FROM = 548;
            static constexpr BaseType RESULT_NUM_IDS = 549;
        };

        class eTWWIP_LIST {

        public:

            static constexpr BaseType WIP_OBJID = 551;
            static constexpr BaseType WIP_MODIFIED_OBJID = 552;
            static constexpr BaseType MAIN_DS_INITIAL_LASTID = 553;
            static constexpr BaseType HASHID_DS_INITIAL_LASTID = 554;
            static constexpr BaseType INDEX_DS_INITIAL_LASTID = 555;
            static constexpr BaseType AGGREGATE_DS_INITIAL_LASTID = 556;
        };

        class eTWQUERY_SCRATCHPAD {

        public:

            static constexpr BaseType QUERY_HASHKEY = 558;
            static constexpr BaseType QUERY_OBJID = 559;
            static constexpr BaseType QUERY_DETAILS = 560;
            static constexpr BaseType PARENT_QUERY_DETAILS = 561;
            static constexpr BaseType SOURCE_QUERY_DETAILS = 562;
        };

        class eTWQUERY_RANGE_DATA {

        public:

            static constexpr BaseType RANGE_FROM = 564;
            static constexpr BaseType RANGE_TO = 565;
            static constexpr BaseType ACTIVE_EVENT_ID = 566;
            static constexpr BaseType ID = 567;
        };

        class eTWQUERY_OBJECT {

        public:

            static constexpr BaseType QUERY_IS_COMPLETE = 569;
            static constexpr BaseType FORWARD_QUERY_RANGE_DATA = 570;
            static constexpr BaseType REVERSE_QUERY_RANGE_DATA = 571;
        };

        class eTWPRIMARY_QUERY_HASHKEY {

        public:

            static constexpr BaseType RESOLVED_VERSION = 407;
            static constexpr BaseType RESOLVED_OBJID = 439;
            static constexpr BaseType RESOLVED_SOURCE_DCID = 573;
            static constexpr BaseType RESOLVED_APP_OBJTYPE = 574;
        };

        class eTWFILTER_QUERY_HASHKEY {

        public:

            static constexpr BaseType RESOLVED_PARENT_QUERYID = 576;
            static constexpr BaseType RESOLVED_STRINGKEY = 577;
            static constexpr BaseType RESOLVED_COMPARE_SCOPE = 578;
            static constexpr BaseType RESOLVED_STRING_SCHEMAID = 579;
            static constexpr BaseType RESOLVED_REFID = 580;
            static constexpr BaseType RESOLVED_REFID_SCHEMAID = 581;
            static constexpr BaseType RESOLVED_FROMTIME = 582;
            static constexpr BaseType RESOLVED_TOTIME = 583;
            static constexpr BaseType RESOLVED_TIME_SCHEMAID = 584;
        };

        class eTWRIGHTS_QUERY_HASHKEY {

        public:

            static constexpr BaseType RESOLVED_PARENT_QUERYID = 576;
        };

        class eTWSORTED_QUERY_HASHKEY {

        public:

            static constexpr BaseType RESOLVED_PARENT_QUERYID = 576;
            static constexpr BaseType RESOLVED_SORT_DIRECTION = 587;
            static constexpr BaseType RESOLVED_SORT_SCHEMAID = 588;
        };

        class eTWPRIMARY_QUERY {

        public:

            static constexpr BaseType PRIMARY_QUERY_HASHKEY = 572;
            static constexpr BaseType PARENT_QUERY_HASHKEY = 590;
            static constexpr BaseType PARENT_QUERY_ID = 591;
            static constexpr BaseType REQUEST_SOURCEDC = 592;
            static constexpr BaseType REQUEST_APP_OBJTYPE = 593;
            static constexpr BaseType REQUEST_OBJID = 594;
            static constexpr BaseType REQUEST_VERSION = 595;
            static constexpr BaseType REQUEST_FROMTIME = 596;
            static constexpr BaseType REQUEST_TOTIME = 597;
            static constexpr BaseType REQUEST_TIME_SCHEMAID = 598;
        };

        class eTWFILTER_SUB_QUERY {

        public:

            static constexpr BaseType FILTER_QUERY_HASHKEY = 575;
            static constexpr BaseType PARENT_QUERY_HASHKEY = 590;
            static constexpr BaseType PARENT_QUERY_ID = 591;
            static constexpr BaseType REQUEST_FROMTIME = 596;
            static constexpr BaseType REQUEST_TOTIME = 597;
            static constexpr BaseType REQUEST_TIME_SCHEMAID = 598;
            static constexpr BaseType REQUEST_STRINGKEY = 600;
            static constexpr BaseType REQUEST_COMPARE_SCOPE = 601;
            static constexpr BaseType REQUEST_STRING_SCHEMAID = 602;
            static constexpr BaseType REQUEST_REFID = 603;
            static constexpr BaseType REQUEST_REFID_SCHEMAID = 604;
        };

        class eTWRIGHTS_SUB_QUERY {

        public:

            static constexpr BaseType RIGHTS_QUERY_HASHKEY = 585;
            static constexpr BaseType PARENT_QUERY_HASHKEY = 590;
            static constexpr BaseType PARENT_QUERY_ID = 591;
            static constexpr BaseType REQUEST_AUTHENTICATED_USERID = 606;
        };

        class eTWSORTING_SUB_QUERY {

        public:

            static constexpr BaseType PARENT_QUERY_HASHKEY = 590;
            static constexpr BaseType PARENT_QUERY_ID = 591;
            static constexpr BaseType SORTING_QUERY_HASHKEY = 608;
            static constexpr BaseType REQUEST_SORT_DIRECTION = 609;
            static constexpr BaseType REQUEST_SORT_SCHEMAID = 610;
        };

        class eTWINDIVIDUAL_QUERY {

        public:

            static constexpr BaseType RANGE_FROM = 564;
            static constexpr BaseType PRIMARY_QUERY = 589;
            static constexpr BaseType FILTER_SUB_QUERY = 599;
            static constexpr BaseType RIGHTS_SUB_QUERY = 605;
            static constexpr BaseType SORTING_SUB_QUERY = 607;
            static constexpr BaseType INDIVIDUAL_QUERY_HASHKEY = 612;
            static constexpr BaseType RANGE_DIRECTION = 613;
            static constexpr BaseType RANGE_NUMBER = 614;
        };

        class eTWCOMPOUND_QUERY {

        public:

            static constexpr BaseType RANGE_FROM = 564;
            static constexpr BaseType INDIVIDUAL_QUERY = 611;
            static constexpr BaseType RANGE_DIRECTION = 613;
            static constexpr BaseType RANGE_NUMBER = 614;
            static constexpr BaseType COMPOUND_QUERY_HASHKEY = 616;
        };

        class eTWREQUEST {

        public:

            static constexpr BaseType INDIVIDUAL_QUERY = 611;
            static constexpr BaseType COMPOUND_QUERY = 615;
        };

        class eTWBizSchema {

        public:

        };

        class eTWUNI_SCHEMA {

        public:

            static constexpr BaseType VERSION = 4;
            static constexpr BaseType MAX_ID = 2081;
        };

        class eTWUNI_SCHEMA_ENUM {

        public:

            static constexpr BaseType CONTENT_ID = 5;
            static constexpr BaseType NAME = 677;
            static constexpr BaseType MAX_ID = 2081;
            static constexpr BaseType IS_DEFUNCT = 2083;
            static constexpr BaseType CATEGORY_ENUM_USID = 2084;
            static constexpr BaseType DEVSTAGE_ONLY = 2085;
        };

        class eTWUNI_SCHEMA_CONSTANT {

        public:

            static constexpr BaseType CONTENT_ID = 5;
            static constexpr BaseType NAME = 677;
            static constexpr BaseType IS_DEFUNCT = 2083;
            static constexpr BaseType MERGE_MAP = 2087;
            static constexpr BaseType CATEGORY_CONST_USID = 2088;
        };

        class eTWUNI_CONTENT_SCHEMA_PROPERTIES {

        public:

            static constexpr BaseType IS_APISCHEMA = 2090;
            static constexpr BaseType TWSchemaType = 2091;
            static constexpr BaseType HASHSECTION_CONTENT_ID = 2092;
            static constexpr BaseType DCSCHEMA_CONTENT_ID = 2093;
            static constexpr BaseType IS_RESERVED = 2094;
        };

        class eTWUNI_CONTAINER_CONTENT {

        public:

            static constexpr BaseType CONTENT_ID = 5;
            static constexpr BaseType TYPE = 679;
            static constexpr BaseType UNI_CONTENT_SCHEMA_PROPERTIES = 2089;
        };

        class eTWUNI_CONTENT_SCHEMA {

        public:

            static constexpr BaseType CONTENT_ID = 5;
            static constexpr BaseType TYPE = 679;
            static constexpr BaseType UNI_CONTENT_SCHEMA_PROPERTIES = 2089;
            static constexpr BaseType UNI_CONTAINER_CONTENT = 2095;
        };

        class eTWAPP_SCHEMA_METADATA {

        public:

            static constexpr BaseType VERSION = 4;
        };

        class eTWCoreUISchema {

        public:

        };

        class eTWUIResponsivenessData {

        public:

            static constexpr BaseType START_TICK = 2098;
            static constexpr BaseType RESPONSIVENESS_PTR = 2099;
        };

        class eTWClientCommandFieldID {

        public:

            static constexpr BaseType UNKNOWN = 0;
            static constexpr BaseType SCHEMA_ID = 82;
            static constexpr BaseType WINDOW_ID = 2214;
            static constexpr BaseType COMMAND_ID = 2229;
            static constexpr BaseType COMMAND_EXPRESSION = 2230;
            static constexpr BaseType INPUT = 2231;
            static constexpr BaseType OUTPUT = 2232;
            static constexpr BaseType PAGE_ID = 2233;
            static constexpr BaseType REPORT_DEFINITION = 2234;
            static constexpr BaseType FROM = 2235;
            static constexpr BaseType TO = 2236;
            static constexpr BaseType API_ID = 2237;
            static constexpr BaseType API_PAYLOAD = 2238;
            static constexpr BaseType API_DESTINATION = 2239;
        };

        class eTWClientCommand {

        public:

            static constexpr BaseType UNKNOWN = 0;
            static constexpr BaseType CLIENTPF_COMMAND_OPENPAGE = 2240;
            static constexpr BaseType CLIENTPF_COMMAND_REFRESHPAGE = 2241;
            static constexpr BaseType CLIENTPF_COMMAND_COMPUTE = 2242;
            static constexpr BaseType CLIENTPF_COMMAND_EXECUTEREPORT = 2243;
            static constexpr BaseType CLIENTPF_COMMAND_EXECUTEAPI = 2244;
            static constexpr BaseType CLIENTPF_COMMAND_BACK = 2245;
            static constexpr BaseType CLIENTPF_COMMAND_COPY = 2246;
            static constexpr BaseType CLIENTPF_COMMAND_LOADSCHEMA = 2247;
        };

        class eTWClientActionFieldID {

        public:

            static constexpr BaseType UNKNOWN = 0;
            static constexpr BaseType COMMANDS = 2248;
        };

        class eTWSchemaObjectFields {

        public:

            static constexpr BaseType UNKNOWN = 0;
            static constexpr BaseType PAGE_DEFINITION_FIELD = 2249;
            static constexpr BaseType ACTION_DEFINITION_FIELD = 2250;
        };

        class eTWClientSchemaFieldID {

        public:

            static constexpr BaseType UNKNOWN = 0;
            static constexpr BaseType DATA_SCHEMA = 2251;
            static constexpr BaseType CLIENT_SCHEMA = 2252;
            static constexpr BaseType ACTION_ID = 2253;
        };

        class eTWPANIC_OBJECT {

        public:

            static constexpr BaseType ERROR_STRING = 2255;
            static constexpr BaseType FORMAT_PARMS = 2256;
        };

        class eTWUI_POSITION {

        public:

            static constexpr BaseType X_POS = 2258;
            static constexpr BaseType Y_POS = 2259;
        };

        class eTWUI_DIMENSION {

        public:

            static constexpr BaseType HEIGHT = 837;
            static constexpr BaseType WIDTH = 855;
            static constexpr BaseType CALC_HEIGHT = 2261;
            static constexpr BaseType CALC_WIDTH = 2262;
            static constexpr BaseType DIMENSION_UNIT = 2263;
            static constexpr BaseType DIM_REFERENCE = 2264;
        };

        class eTWUI_PADDING {

        public:

            static constexpr BaseType LEFT_PAD = 2266;
            static constexpr BaseType RIGHT_PAD = 2267;
            static constexpr BaseType TOP_PAD = 2268;
            static constexpr BaseType BOTTOM_PAD = 2269;
        };

        class eTWUI_BORDER {

        public:

            static constexpr BaseType COLOR = 809;
            static constexpr BaseType WIDTH = 855;
            static constexpr BaseType STYLE = 2271;
        };

        class eTWALIGNMENT {

        public:

            static constexpr BaseType H_ALIGNMENT = 2273;
            static constexpr BaseType V_ALIGNMENT = 2274;
        };

        class eTWUI_FONT {

        public:

            static constexpr BaseType SIZE = 191;
            static constexpr BaseType FAMILY = 2276;
            static constexpr BaseType IS_BOLD = 2277;
            static constexpr BaseType IS_ITALIC = 2278;
            static constexpr BaseType IS_UNDERLINED = 2279;
        };

        class eTWWINDOW {

        public:

            static constexpr BaseType ID = 567;
            static constexpr BaseType TITLE = 2170;
            static constexpr BaseType UI_POSITION = 2257;
            static constexpr BaseType UI_DIMENSION = 2260;
            static constexpr BaseType UI_PADDING = 2265;
            static constexpr BaseType UI_BORDER = 2270;
            static constexpr BaseType ALIGNMENT = 2272;
            static constexpr BaseType STRINGIFIED_ID = 2280;
            static constexpr BaseType VDC_SCREEN_ID = 2281;
            static constexpr BaseType BACKGROUND_COLOR = 2282;
            static constexpr BaseType IS_MINIZABLE = 2283;
            static constexpr BaseType IS_CLOSABLE = 2284;
            static constexpr BaseType IS_RESIZABLE = 2285;
            static constexpr BaseType IS_VISIBLE = 2286;
            static constexpr BaseType LABEL_API = 2287;
            static constexpr BaseType DATA_API = 2288;
            static constexpr BaseType PHYSICAL_WINDOW = 2289;
            static constexpr BaseType CHILD_ID = 2290;
            static constexpr BaseType PARENT_ID = 2291;
        };

        class eTWPAGE {

        public:

            static constexpr BaseType ID = 567;
            static constexpr BaseType UI_POSITION = 2257;
            static constexpr BaseType UI_DIMENSION = 2260;
            static constexpr BaseType UI_PADDING = 2265;
            static constexpr BaseType UI_BORDER = 2270;
            static constexpr BaseType ALIGNMENT = 2272;
            static constexpr BaseType STRINGIFIED_ID = 2280;
            static constexpr BaseType BACKGROUND_COLOR = 2282;
            static constexpr BaseType CHILD_ID = 2290;
            static constexpr BaseType PARENT_ID = 2291;
            static constexpr BaseType PAGE_LABEL_API_ID = 2292;
            static constexpr BaseType PAGE_DATA_API_ID = 2293;
            static constexpr BaseType BACK_PAGE_ID = 2294;
        };

        class eTWPANE {

        public:

            static constexpr BaseType ID = 567;
            static constexpr BaseType TYPE = 679;
            static constexpr BaseType IDCID = 2156;
            static constexpr BaseType UI_POSITION = 2257;
            static constexpr BaseType UI_DIMENSION = 2260;
            static constexpr BaseType UI_PADDING = 2265;
            static constexpr BaseType UI_BORDER = 2270;
            static constexpr BaseType ALIGNMENT = 2272;
            static constexpr BaseType STRINGIFIED_ID = 2280;
            static constexpr BaseType BACKGROUND_COLOR = 2282;
            static constexpr BaseType CHILD_ID = 2290;
            static constexpr BaseType PARENT_ID = 2291;
        };

        class eTWPART {

        public:

            static constexpr BaseType ID = 567;
            static constexpr BaseType UI_POSITION = 2257;
            static constexpr BaseType UI_DIMENSION = 2260;
            static constexpr BaseType UI_PADDING = 2265;
            static constexpr BaseType UI_BORDER = 2270;
            static constexpr BaseType ALIGNMENT = 2272;
            static constexpr BaseType STRINGIFIED_ID = 2280;
            static constexpr BaseType BACKGROUND_COLOR = 2282;
            static constexpr BaseType CHILD_ID = 2290;
            static constexpr BaseType PARENT_ID = 2291;
        };

        class eTWUIFORM {

        public:

            static constexpr BaseType ID = 567;
            static constexpr BaseType UI_POSITION = 2257;
            static constexpr BaseType UI_DIMENSION = 2260;
            static constexpr BaseType UI_PADDING = 2265;
            static constexpr BaseType UI_BORDER = 2270;
            static constexpr BaseType ALIGNMENT = 2272;
            static constexpr BaseType STRINGIFIED_ID = 2280;
            static constexpr BaseType BACKGROUND_COLOR = 2282;
            static constexpr BaseType CHILD_ID = 2290;
            static constexpr BaseType PARENT_ID = 2291;
            static constexpr BaseType FULL_WIDTH = 2297;
            static constexpr BaseType FULL_HEIGHT = 2298;
        };

        class eTWUIREPORT {

        public:

            static constexpr BaseType ID = 567;
            static constexpr BaseType UI_POSITION = 2257;
            static constexpr BaseType UI_DIMENSION = 2260;
            static constexpr BaseType UI_BORDER = 2270;
            static constexpr BaseType STRINGIFIED_ID = 2280;
            static constexpr BaseType BACKGROUND_COLOR = 2282;
            static constexpr BaseType CHILD_ID = 2290;
            static constexpr BaseType PARENT_ID = 2291;
        };

        class eTWLINE {

        public:

            static constexpr BaseType ID = 567;
            static constexpr BaseType UI_POSITION = 2257;
            static constexpr BaseType UI_DIMENSION = 2260;
            static constexpr BaseType UI_PADDING = 2265;
            static constexpr BaseType UI_BORDER = 2270;
            static constexpr BaseType ALIGNMENT = 2272;
            static constexpr BaseType STRINGIFIED_ID = 2280;
            static constexpr BaseType BACKGROUND_COLOR = 2282;
            static constexpr BaseType CHILD_ID = 2290;
            static constexpr BaseType PARENT_ID = 2291;
        };

        class eTWUIFIELD {

        public:

            static constexpr BaseType ID = 567;
            static constexpr BaseType LABEL_TYPE = 2141;
            static constexpr BaseType UI_POSITION = 2257;
            static constexpr BaseType UI_DIMENSION = 2260;
            static constexpr BaseType UI_PADDING = 2265;
            static constexpr BaseType UI_BORDER = 2270;
            static constexpr BaseType ALIGNMENT = 2272;
            static constexpr BaseType STRINGIFIED_ID = 2280;
            static constexpr BaseType BACKGROUND_COLOR = 2282;
            static constexpr BaseType DATA_API = 2288;
            static constexpr BaseType CHILD_ID = 2290;
            static constexpr BaseType PARENT_ID = 2291;
            static constexpr BaseType TEXT = 2299;
            static constexpr BaseType IS_CLICKABLE = 2300;
            static constexpr BaseType ON_CLICK_API = 2301;
            static constexpr BaseType ON_CLICK_PAGE_ID = 2302;
        };

        class eTWLABEL {

        public:

            static constexpr BaseType ID = 567;
            static constexpr BaseType LABEL_TYPE = 2141;
            static constexpr BaseType UI_POSITION = 2257;
            static constexpr BaseType UI_DIMENSION = 2260;
            static constexpr BaseType UI_PADDING = 2265;
            static constexpr BaseType UI_BORDER = 2270;
            static constexpr BaseType ALIGNMENT = 2272;
            static constexpr BaseType UI_FONT = 2275;
            static constexpr BaseType STRINGIFIED_ID = 2280;
            static constexpr BaseType BACKGROUND_COLOR = 2282;
            static constexpr BaseType DATA_API = 2288;
            static constexpr BaseType PARENT_ID = 2291;
            static constexpr BaseType TEXT = 2299;
            static constexpr BaseType IS_CLICKABLE = 2300;
            static constexpr BaseType ON_CLICK_API = 2301;
            static constexpr BaseType ON_CLICK_PAGE_ID = 2302;
        };

        class eTWBUTTON {

        public:

            static constexpr BaseType ID = 567;
            static constexpr BaseType API_ID = 2237;
            static constexpr BaseType UI_POSITION = 2257;
            static constexpr BaseType UI_DIMENSION = 2260;
            static constexpr BaseType UI_PADDING = 2265;
            static constexpr BaseType UI_BORDER = 2270;
            static constexpr BaseType ALIGNMENT = 2272;
            static constexpr BaseType UI_FONT = 2275;
            static constexpr BaseType STRINGIFIED_ID = 2280;
            static constexpr BaseType BACKGROUND_COLOR = 2282;
            static constexpr BaseType DATA_API = 2288;
            static constexpr BaseType PARENT_ID = 2291;
            static constexpr BaseType TEXT = 2299;
            static constexpr BaseType IS_ENABLED = 2303;
            static constexpr BaseType IS_SUBMIT_BUTTON = 2304;
            static constexpr BaseType ON_SUCCESS = 2305;
            static constexpr BaseType ON_FAILURE = 2306;
        };

        class eTWTEXTEDIT {

        public:

            static constexpr BaseType ID = 567;
            static constexpr BaseType LABEL = 2102;
            static constexpr BaseType IS_EDITABLE = 2140;
            static constexpr BaseType SCHEMA_FIELD_NAME = 2144;
            static constexpr BaseType UI_POSITION = 2257;
            static constexpr BaseType UI_DIMENSION = 2260;
            static constexpr BaseType UI_PADDING = 2265;
            static constexpr BaseType UI_BORDER = 2270;
            static constexpr BaseType ALIGNMENT = 2272;
            static constexpr BaseType UI_FONT = 2275;
            static constexpr BaseType STRINGIFIED_ID = 2280;
            static constexpr BaseType BACKGROUND_COLOR = 2282;
            static constexpr BaseType LABEL_API = 2287;
            static constexpr BaseType DATA_API = 2288;
            static constexpr BaseType PARENT_ID = 2291;
            static constexpr BaseType TEXT = 2299;
            static constexpr BaseType HINT_TEXT = 2307;
            static constexpr BaseType IS_MANDATORY = 2308;
            static constexpr BaseType DATATYPE = 2309;
            static constexpr BaseType VALIDATION_API_ID = 2310;
        };

        class eTWLIST {

        public:

            static constexpr BaseType ID = 567;
            static constexpr BaseType TITLE = 2170;
            static constexpr BaseType UI_POSITION = 2257;
            static constexpr BaseType UI_DIMENSION = 2260;
            static constexpr BaseType UI_PADDING = 2265;
            static constexpr BaseType UI_BORDER = 2270;
            static constexpr BaseType ALIGNMENT = 2272;
            static constexpr BaseType UI_FONT = 2275;
            static constexpr BaseType STRINGIFIED_ID = 2280;
            static constexpr BaseType BACKGROUND_COLOR = 2282;
            static constexpr BaseType DATA_API = 2288;
            static constexpr BaseType TEXT = 2299;
            static constexpr BaseType DATASET_URL = 2311;
            static constexpr BaseType DATA_URL = 2312;
        };

        class eTWUI_TEMPLATE_WELCOME_MESSAGE {

        public:

            static constexpr BaseType TEXT = 2299;
            static constexpr BaseType TEMPLATE_ID = 2314;
            static constexpr BaseType ON_SUBMIT = 2315;
        };

        class eTWUI_TEMPLATE_MENU_LIST {

        public:

            static constexpr BaseType ID = 567;
            static constexpr BaseType MENU_ENTRY = 2145;
            static constexpr BaseType PAGE_BACK = 2154;
            static constexpr BaseType PARENT_ID = 2291;
            static constexpr BaseType MENU_TITLE = 2317;
        };

        class eTWMENU_ENTRY {

        public:

            static constexpr BaseType PAGE_ID = 2233;
            static constexpr BaseType API_ID = 2237;
            static constexpr BaseType PARENT_ID = 2291;
            static constexpr BaseType TEXT = 2299;
        };

        class eTWUI_TEMPLATE_REPORT_VIEW {

        public:

            static constexpr BaseType PAGE_BACK = 2154;
            static constexpr BaseType TITLE = 2170;
            static constexpr BaseType ON_SUCCESS = 2305;
            static constexpr BaseType TEMPLATE_ID = 2314;
            static constexpr BaseType REPORT_HEADER = 2319;
            static constexpr BaseType DATA_SOURCE_API_ID = 2320;
        };

        class eTWREPORT_HEADER {

        public:

            static constexpr BaseType REPORT_COLUMN = 2321;
        };

        class eTWREPORT_COLUMN {

        public:

            static constexpr BaseType TEXT = 2299;
            static constexpr BaseType DATA_SCHEMA_FIELD_ID = 2322;
        };

        class eTWUI_TEMPLATE_FORM {

        public:

            static constexpr BaseType LIST = 2105;
            static constexpr BaseType PAGE_BACK = 2154;
            static constexpr BaseType ADDITIONAL_BUTTONS = 2162;
            static constexpr BaseType TITLE = 2170;
            static constexpr BaseType ON_SUCCESS = 2305;
            static constexpr BaseType ON_FAILURE = 2306;
            static constexpr BaseType TEMPLATE_ID = 2314;
            static constexpr BaseType ON_SUBMIT = 2315;
            static constexpr BaseType FORM_ENTRY = 2324;
        };

        class eTWFORM_ENTRY {

        public:

            static constexpr BaseType SCHEMA_FIELD_NAME = 2144;
            static constexpr BaseType API_ID = 2237;
            static constexpr BaseType TEXT = 2299;
            static constexpr BaseType FIELD_VALIDATE_PARMS = 2325;
        };

        class eTWFIELD_VALIDATE_PARMS {

        public:

            static constexpr BaseType IS_MANDATORY = 2308;
            static constexpr BaseType DATATYPE = 2309;
            static constexpr BaseType VALIDATION_API_ID = 2310;
            static constexpr BaseType VALIDATION_API_SCHEMA_ID = 2326;
        };

        class eTWADDITIONAL_BUTTONS {

        public:

            static constexpr BaseType EV_SINGLE_CLICK = 2181;
            static constexpr BaseType TEXT = 2299;
            static constexpr BaseType ON_SUCCESS = 2305;
            static constexpr BaseType ON_FAILURE = 2306;
        };

        class eTWUI_TEMPLATE_COMPOUND_VIEW {

        public:

            static constexpr BaseType TITLE = 2170;
            static constexpr BaseType TEMPLATE_ID = 2314;
            static constexpr BaseType CHILD = 2328;
        };

        class eTWSCREEN {

        public:

            static constexpr BaseType ID = 567;
            static constexpr BaseType NAME = 677;
            static constexpr BaseType MODEL = 810;
            static constexpr BaseType DEPTH = 834;
            static constexpr BaseType HEIGHT = 837;
            static constexpr BaseType MANUFACTURER = 846;
            static constexpr BaseType WIDTH = 855;
            static constexpr BaseType VDCID = 2157;
            static constexpr BaseType DEVICE_PIXEL_RATIO = 2330;
            static constexpr BaseType LOGICAL_PPI = 2331;
            static constexpr BaseType PHYSICAL_PPI = 2332;
            static constexpr BaseType ORIENTATION = 2333;
        };

        class eTWSCREEN_LIST {

        public:

            static constexpr BaseType SCREEN = 2329;
        };

        class eTWDC_LIST {

        public:

            static constexpr BaseType DCID = 95;
        };

        class eTWZONE {

        public:

            static constexpr BaseType ID = 567;
            static constexpr BaseType UI_POSITION = 2257;
            static constexpr BaseType UI_DIMENSION = 2260;
            static constexpr BaseType CHILD_ID = 2290;
            static constexpr BaseType PARENT_ID = 2291;
            static constexpr BaseType LOGICAL_UNIT_REF = 2337;
            static constexpr BaseType PLATFORM_OBJ_REF = 2338;
        };

        class eTWROW {

        public:

            static constexpr BaseType ID = 567;
            static constexpr BaseType UI_POSITION = 2257;
            static constexpr BaseType UI_DIMENSION = 2260;
            static constexpr BaseType CHILD_ID = 2290;
            static constexpr BaseType PARENT_ID = 2291;
            static constexpr BaseType LOGICAL_UNIT_REF = 2337;
            static constexpr BaseType PLATFORM_OBJ_REF = 2338;
        };

        class eTWCELL {

        public:

            static constexpr BaseType ID = 567;
            static constexpr BaseType UI_POSITION = 2257;
            static constexpr BaseType UI_DIMENSION = 2260;
            static constexpr BaseType CHILD_ID = 2290;
            static constexpr BaseType PARENT_ID = 2291;
            static constexpr BaseType LOGICAL_UNIT_REF = 2337;
            static constexpr BaseType PLATFORM_OBJ_REF = 2338;
        };

        class eTWCONSOLE_COMM_PARMS {

        public:

            static constexpr BaseType COMMAND_TYPE = 2342;
            static constexpr BaseType CONSOLE_PAYLOAD = 2343;
        };

        class eTWAPPLICATION_GATEWAY_OF_TALLY_OBJ {

        public:

            static constexpr BaseType GATEWAY_REPORTS = 2345;
        };

        class eTWGATEWAY_REPORTS {

        public:

            static constexpr BaseType APPLICATION_STATE = 2346;
            static constexpr BaseType REPORT = 2347;
        };

        class eTWIDC_ADDITIONAL_INFO {

        public:

            static constexpr BaseType VDC_ID = 2349;
            static constexpr BaseType DRIVERDC_ID = 2350;
            static constexpr BaseType DRIVERDC_TYPE = 2351;
        };

        class eTWFRAME_PAGE_OBJECT {

        public:

            static constexpr BaseType FRAME_PAGE_ID = 2353;
        };

        class eTWPANE_OBJECT_ID {

        public:

            static constexpr BaseType PANE_ID = 2355;
        };

        class eTWPRESENTATION_RENDER_WINDOW_REQUEST_SCHEMA {

        public:

            static constexpr BaseType VDCID = 2157;
            static constexpr BaseType IS_EXIT_MSG_COMM = 2160;
            static constexpr BaseType WINDOW_ID = 2214;
            static constexpr BaseType PAGE_ID = 2233;
        };

        class eTWPRESENTATION_PROCESS_LAYOUT_REQUEST_SCHEMA {

        public:

            static constexpr BaseType VDCID = 2157;
            static constexpr BaseType REPORT_ID = 2163;
            static constexpr BaseType WINDOW_ID = 2214;
            static constexpr BaseType PAGE_ID = 2233;
        };

        class eTWPRESENTATION_LAUNCH_RUNTIME_WINDOW_REQUEST_SCHEMA {

        public:

            static constexpr BaseType VDCID = 2157;
            static constexpr BaseType REPORT_ID = 2163;
            static constexpr BaseType WINDOW_ID = 2214;
        };

        class eTWPRESENTATION_CREATE_STARTUP_WINDOW_REQUEST_SCHEMA {

        public:

            static constexpr BaseType VDCID = 2157;
            static constexpr BaseType REPORT_ID = 2163;
        };

        class eTWPRESENTATION_CLOSE_APP_WINDOW_REQUEST_SCHEMA {

        public:

            static constexpr BaseType VDCID = 2157;
            static constexpr BaseType WINDOW_ID = 2214;
        };

        class eTWPRESENTATION_PROCESS_EVENTS_REQUEST_SCHEMA {

        public:

            static constexpr BaseType VDCID = 2157;
            static constexpr BaseType IS_EXIT_MSG_COMM = 2160;
            static constexpr BaseType REPORT_ID = 2163;
            static constexpr BaseType UI_EVENT_ID = 2211;
            static constexpr BaseType WINDOW_ID = 2214;
            static constexpr BaseType PAYLOAD_DATA = 2217;
            static constexpr BaseType PAGE_ID = 2233;
        };

        class eTWPRESENTATION_INTERNAL_UI_EVENT_RESPONSE_SCHEMA {

        public:

            static constexpr BaseType WIDGET_TYPE = 2111;
            static constexpr BaseType WIDGET_ID = 2212;
        };

        class eTWQueryDC {

        public:

            static constexpr BaseType IS_COMPLETE = 2364;
            static constexpr BaseType ITERATOR = 2365;
        };

        class eTWBootstrapFormIDs {

        public:

            static constexpr BaseType PRAJAPATI_IP = 2366;
            static constexpr BaseType LAN_IP = 2367;
        };

        class eTWLoginFormIDs {

        public:

            static constexpr BaseType USER_ID = 217;
            static constexpr BaseType PASSWORD = 2368;
        };

        class eTWTW_ADMINDC_LANG_OBJ {

        public:

            static constexpr BaseType TW_ADMINDC_LANG_STR = 2370;
        };

        class eTWTW_ADMINDC_QUERY_OBJ {

        public:

            static constexpr BaseType IS_COMPLETE = 2364;
            static constexpr BaseType ITERATOR = 2365;
            static constexpr BaseType TW_QUERY_RESULT_ID = 2372;
        };

        class eTWTW_APP_PREFS_OBJECT {

        public:

            static constexpr BaseType TW_APP_LANGUAGE_PREF = 2374;
            static constexpr BaseType TW_APP_DATE_FORMAT_PREF = 2375;
            static constexpr BaseType TW_APP_OS_LANG_PREF = 2376;
            static constexpr BaseType TW_APP_PRAJAPATI_IP = 2377;
            static constexpr BaseType TW_APP_LAN_IP = 2378;
            static constexpr BaseType TW_APP_USER_ID = 2379;
        };

        class eTWTW_YOGINI_BS_FILE_OBJECT {

        public:

            static constexpr BaseType TW_APP_YOGINI_BS_FILE = 2381;
        };

        class eTWTW_LANGUAGE_LIST {

        public:

            static constexpr BaseType ITEM = 2383;
        };

        class eTWTW_UNIVERSE_SUPERUSERS {

        public:

            static constexpr BaseType TW_UNIVERSE_SUPERUSER = 2385;
        };

        class eTWTW_UNIVERSE_SUPERUSER {

        public:

            static constexpr BaseType TW_SUPERUSER_ID = 2386;
            static constexpr BaseType TW_SUPERUSER_EMAIL_ID = 2387;
        };

        class eTWTW_APP_CURRENT_LANGUAGE_OBJ {

        public:

            static constexpr BaseType TW_APP_CURRENT_LANG = 2389;
        };

        class eTWSCHEMA_GET_LANGUAGES {

        public:

            static constexpr BaseType FROM = 2235;
            static constexpr BaseType TO = 2236;
            static constexpr BaseType CONDITION = 2391;
        };

        class eTWLANGUAGE_OBJ {

        public:

            static constexpr BaseType TW_ADMINDC_LANG_STR = 2370;
        };

        class eTWTW_QUERY_SCHEMA {

        public:

            static constexpr BaseType FROM = 2235;
            static constexpr BaseType TO = 2236;
            static constexpr BaseType CONDITION = 2391;
            static constexpr BaseType TW_QUERY_ID = 2394;
        };

        class eTWSchemaCompanyType {

        public:

            static constexpr BaseType DUID = 307;
            static constexpr BaseType COMPANY_NAME = 1534;
            static constexpr BaseType COMPANY_PATH = 2395;
            static constexpr BaseType USER_OBJECT = 2396;
        };

        class eTWTW_SERVERDC_QUERY_ID {

        public:

            static constexpr BaseType TW_QUERY_RESULT_ID = 2372;
        };

        class eTWLEDGER_OBJECT {

        public:

            static constexpr BaseType NAME = 677;
        };

        class eTWAUTHENTICATED_USER_OBJECT {

        public:

            static constexpr BaseType USER_ID = 217;
            static constexpr BaseType PASSWORD = 2368;
            static constexpr BaseType USER_IDENTIFIER = 2400;
        };

        class eTWLEDGER_OBJECT_EXT {

        public:

            static constexpr BaseType NAME = 677;
            static constexpr BaseType OPENING_BALANCE = 689;
            static constexpr BaseType DESCRIPTION = 712;
        };

        class eTWCOMPANY_OBJECT {

        public:

            static constexpr BaseType DUID = 307;
            static constexpr BaseType COMPANY_NAME = 1534;
            static constexpr BaseType COMPANY_PATH = 2395;
            static constexpr BaseType TRANSITION_CONFIG = 2403;
            static constexpr BaseType OWNER_IDENTIFIER = 2404;
            static constexpr BaseType OWNER_PASSWORD = 2405;
        };

        class eTWPATH_OBJECT {

        public:

            static constexpr BaseType DEF_CUST_PATH = 2407;
            static constexpr BaseType DEF_APP_PATH = 2408;
        };

        class eTWMESSAGE_OBJECT {

        public:

            static constexpr BaseType MESSAGE_ID = 2410;
            static constexpr BaseType MESSAGE_COMMAND = 2411;
            static constexpr BaseType PRIMARY_OBJECT = 2412;
        };

        class eTWOPEN_COMPANY_LIST_OBJ {

        public:

            static constexpr BaseType VALUE = 17;
        };

        class eTWClientPlatform {

        public:

            static constexpr BaseType CDCID = 2416;
        };

        class eTWDITOBJECT {

        public:

            static constexpr BaseType DITVERSION = 2418;
        };

        class eTWUSEROBJECT {

        public:

            static constexpr BaseType USERID = 2420;
        };

        class eTWRESERVEOBJECT {

        public:

            static constexpr BaseType RESERVEIPID = 2422;
        };

        class eTWIPV4OBJECT {

        public:

            static constexpr BaseType IPV4IPID = 2424;
        };

        class eTWTW_CLIENT_QUERY_OBJ {

        public:

            static constexpr BaseType TW_QUERY_RESULT_ID = 2372;
        };

        class eTWPresentationCommSchema {

        public:

            static constexpr BaseType DOES_PAGE_EXIST = 2428;
        };

        class eTWTW_TS_CONFIG_API_SCHEMA {

        public:

            static constexpr BaseType SELF_IPID = 2431;
            static constexpr BaseType UNIVERSE_NAME = 2432;
            static constexpr BaseType UNIVERSE_IPID = 2433;
            static constexpr BaseType UNIVERSE_ID = 2434;
            static constexpr BaseType UNIVERSE_OBJECT = 2435;
        };

        class eTWTW_TS_CONFIG_RESP_API_SCHEMA {

        public:

            static constexpr BaseType STATUS = 1154;
            static constexpr BaseType UNIVERSE_OBJECT = 2435;
        };

        class eTWTSRealmServicesObject {

        public:

            static constexpr BaseType TW_RESPONSE_MESSAGE = 2437;
        };

        class eTWPING_SCRATCHPAD_SCHEMA {

        public:

            static constexpr BaseType DUMMY_FIELD_ID_1 = 2439;
        };

        class eTWQueryLanguage {

        public:

            static constexpr BaseType FILTER = 2440;
            static constexpr BaseType STARTS_WITH = 2441;
        };

        class eTWPREMISE_BOOTSTRAP_REQ_SCHEMA {

        public:

            static constexpr BaseType PRAJAPATI_IP = 2366;
            static constexpr BaseType LAN_IP = 2367;
        };

        class eTWIPID_AND_ITS_STATUS {

        public:

            static constexpr BaseType IPID_MANUALLY_ENTERED = 2444;
            static constexpr BaseType IPID_STATUS = 2445;
        };

        class eTWPREMISE_FETCH_IPIDS_RESP_SCHEMA {

        public:

            static constexpr BaseType IPID_AND_ITS_STATUS = 2443;
        };

        class eTWLOGINHANDLER_REQ_SCHEMA {

        public:

            static constexpr BaseType USER_ID = 217;
            static constexpr BaseType PASSWORD = 2368;
        };

        class eTWYOGINI_BOOTSTRAPHANDLER_REQ_SCHEMA {

        public:

            static constexpr BaseType TW_APP_YOGINI_BS_FILE = 2381;
        };

        class eTWPREMISE_ADMINQUERY_REQ_SCHEMA {

        public:

            static constexpr BaseType FROM = 2235;
            static constexpr BaseType TO = 2236;
            static constexpr BaseType CONDITION = 2391;
            static constexpr BaseType TW_QUERY_ID = 2394;
        };

        class eTWPREMISE_LANGUAGEHANDLER_REQ_SCHEMA {

        public:

            static constexpr BaseType LANGUAGE = 898;
            static constexpr BaseType TW_QUERY_ID = 2394;
        };

        class eTWPREMISE_ADMINQUERY_CONTEXT_SCHEMA {

        public:

            static constexpr BaseType TW_REQUEST_CONTEXT_OS_LANG = 2452;
            static constexpr BaseType TW_REQUEST_LOGGED_IN_USERS = 2453;
            static constexpr BaseType TW_REQUEST_ITERATOR_ID = 2454;
        };

        class eTWPREMISE_LANGUAGEQUERY_RESP_SCHEMA {

        public:

            static constexpr BaseType TW_LANGUAGE_LIST = 2382;
            static constexpr BaseType TW_QUERY_ID = 2394;
        };

        class eTWUIYoginiSchemaFields {

        public:

            static constexpr BaseType UNIVERSE_NAME = 2432;
            static constexpr BaseType UNIVERSE_ID = 2434;
            static constexpr BaseType CONNECT_IPADDRESS = 2456;
            static constexpr BaseType CONNECT_PORT = 2457;
            static constexpr BaseType UNIVERSE_IPADDRESS = 2458;
            static constexpr BaseType UNIVERSE_PORT = 2459;
        };

        class eTWUIFileProperty {

        public:

            static constexpr BaseType PRAJAPATI_FILE_PATH = 2460;
            static constexpr BaseType BOOTSTRAP_FILE_PATH = 2469;
        };

        class eTWYoginiQueryDCExtensions {

        public:

            static constexpr BaseType TW_LIST_OF_PRAJAPATI_IPS = 2461;
        };

        class eTWYOGINI_OPENPRAJAPATIDB_REQ_SCHEMA {

        public:

            static constexpr BaseType CDCID = 2416;
            static constexpr BaseType PRAJAPATI_FILE_PATH = 2460;
        };

        class eTWYOGINI_ADDPRAJAPATIIP_REQ_SCHEMA {

        public:

            static constexpr BaseType CDCID = 2416;
            static constexpr BaseType IPV4IPID = 2424;
        };

        class eTWYOGINI_DELETEPRAJAPATIIP_REQ_SCHEMA {

        public:

            static constexpr BaseType CDCID = 2416;
            static constexpr BaseType IPV4IPID = 2424;
        };

        class eTWYOGINI_SHOWPRAJAPATIIPS_REQ_SCHEMA {

        public:

            static constexpr BaseType CDCID = 2416;
        };

        class eTWYOGINI_SHOWPRAJAPATIIPS_RESP_SCHEMA {

        public:

            static constexpr BaseType PAYLOAD_DATA = 2217;
            static constexpr BaseType TW_QUERY_ID = 2394;
        };

        class eTWTW_LIST_OF_PRAJAPATI_IPS {

        public:

            static constexpr BaseType ITEM = 2383;
        };

        class eTWTW_SITE_CONFIG_API_SCHEMA {

        public:

            static constexpr BaseType SELF_IPID = 2431;
            static constexpr BaseType UNIVERSE_NAME = 2432;
            static constexpr BaseType UNIVERSE_IPID = 2433;
            static constexpr BaseType UNIVERSE_ID = 2434;
            static constexpr BaseType UNIVERSE_OBJECT = 2435;
        };

        class eTWTW_SITE_CONFIG_RESP_API_SCHEMA {

        public:

            static constexpr BaseType STATUS = 1154;
            static constexpr BaseType UNIVERSE_OBJECT = 2435;
        };

        class eTWKSHETRAPAL_OPENFILE_REQ_SCHEMA {

        public:

            static constexpr BaseType BOOTSTRAP_FILE_PATH = 2469;
        };

        class eTWDIT_OBJECT {

        public:

            static constexpr BaseType DIT_VERSION = 287;
        };

        class eTWTW_LIST_OF_USER_IDS {

        public:

            static constexpr BaseType ITEM = 2383;
        };

        class eTWPremisServerAPIFields {

        public:

            static constexpr BaseType COMPANY_OBJECT = 2402;
            static constexpr BaseType MESSAGE_OBJECT = 2409;
            static constexpr BaseType REQ_USER_IDENTIFIER = 2473;
            static constexpr BaseType OBJECT_ID = 2474;
        };

        class eTWPremiseServerFeaturesPayloadID {

        public:

            static constexpr BaseType UNKNOWN = 0;
            static constexpr BaseType STATUS = 1154;
        };

        class eTWPremiseClientFeaturesPayloadID {

        public:

            static constexpr BaseType USER_ID = 217;
            static constexpr BaseType PASSWORD = 2368;
            static constexpr BaseType OTP = 2475;
            static constexpr BaseType TW_OTP_MESSAGE = 2476;
            static constexpr BaseType TW_OTP_COUNT = 2477;
        };

        class eTWPremiseClientPayloadID {

        public:

            static constexpr BaseType UNKNOWN = 0;
            static constexpr BaseType SCHEMA = 2;
            static constexpr BaseType NAME = 677;
            static constexpr BaseType PARENT = 678;
            static constexpr BaseType URL = 859;
            static constexpr BaseType COMPANY = 867;
            static constexpr BaseType STATUS = 1154;
            static constexpr BaseType LIST = 2105;
            static constexpr BaseType PDCID = 2155;
            static constexpr BaseType HEADER = 2169;
            static constexpr BaseType INPUT = 2231;
            static constexpr BaseType PAGE_ID = 2233;
            static constexpr BaseType ON_SUCCESS = 2305;
            static constexpr BaseType ON_FAILURE = 2306;
            static constexpr BaseType TEMPLATE_ID = 2314;
            static constexpr BaseType ON_SUBMIT = 2315;
            static constexpr BaseType USER_URL = 2478;
            static constexpr BaseType SOURCE = 2479;
            static constexpr BaseType COLUMN = 2480;
            static constexpr BaseType ITEM_ID = 2481;
            static constexpr BaseType PATH = 2482;
            static constexpr BaseType ELEMENT = 2483;
            static constexpr BaseType FIELD = 2484;
            static constexpr BaseType OBJECT = 2485;
            static constexpr BaseType IS_REPEATED = 2486;
            static constexpr BaseType PAGE_DEFINITION = 2487;
            static constexpr BaseType IP = 2488;
            static constexpr BaseType PORT = 2489;
        };

        class eTWSchemaPropertiesObjectType {

        public:

            static constexpr BaseType PRIMARY_OBJECT = 2412;
            static constexpr BaseType SERVER_OBJECT = 2490;
        };

        class eTWClientDCCommands {

        public:

            static constexpr BaseType PRE_COMPUTE_API = 2491;
        };

        class eTWCDC_AUTHENTICATED_USER_OBJ {

        public:

            static constexpr BaseType USER_IDENTIFIER = 2400;
        };

        class eTWCDC_COMPANY_DETAILS_OBJ {

        public:

            static constexpr BaseType SCHEMA = 2;
            static constexpr BaseType COMPANY_NAME = 1534;
            static constexpr BaseType TRANSITION_CONFIG = 2403;
            static constexpr BaseType OWNER = 2494;
        };

        class eTWCDC_USER_OBJ {

        public:

            static constexpr BaseType USER_IDENTIFIER = 2400;
        };

        class eTWCDC_COMPANY_OBJ {

        public:

            static constexpr BaseType SCHEMA_ID = 82;
            static constexpr BaseType DUID = 307;
            static constexpr BaseType COMPANY_NAME = 1534;
            static constexpr BaseType COMPANY_PATH = 2395;
        };

        class eTWUSER_DEF_PATH_OBJ {

        public:

            static constexpr BaseType DEF_CUST_PATH = 2407;
            static constexpr BaseType DEF_APP_PATH = 2408;
        };

        class eTWCDC_UI_OBJ {

        public:

            static constexpr BaseType DUMMY = 2499;
        };

        class eTWCLIENT_CONNECTREQUEST_REQ_SCHEMA {

        public:

            static constexpr BaseType IDCID = 2156;
        };

        class eTWCLIENT_CONNECTREQUEST_RESP_SCHEMA {

        public:

            static constexpr BaseType CDCID = 2416;
        };

        class eTWCLIENT_DISCONNECTREQUEST_REQ_SCHEMA {

        public:

            static constexpr BaseType CDCID = 2416;
        };

        class eTWSOURCE_UNI_SCHEMA {

        public:

            static constexpr BaseType MAX_ID = 2081;
            static constexpr BaseType ENUM_LIST = 2504;
        };

        class eTWSOURCE_UNI_SCHEMA_ENUM {

        public:

            static constexpr BaseType CONTENT_ID = 5;
            static constexpr BaseType NAME = 677;
            static constexpr BaseType PARENT = 678;
            static constexpr BaseType MAX_ID = 2081;
            static constexpr BaseType IS_DEFUNCT = 2083;
            static constexpr BaseType DEVSTAGE_ONLY = 2085;
            static constexpr BaseType ENUM_LIST = 2504;
            static constexpr BaseType CATEGORY_ENUM_OBJID = 2506;
            static constexpr BaseType BASE_TYPE = 2507;
            static constexpr BaseType DEVCONFIG_ENUM_OBJID = 2508;
            static constexpr BaseType RESV_ENUM_TYPE = 2509;
            static constexpr BaseType ALLOW_CHILDREN = 2510;
            static constexpr BaseType IS_FINAL = 2511;
            static constexpr BaseType CEILING_VALUE = 2512;
            static constexpr BaseType LOCAL_SCOPE = 2513;
            static constexpr BaseType IS_COMPILE_TIME = 2514;
            static constexpr BaseType FOR_JAVA = 2515;
            static constexpr BaseType INITIAL_ID = 2516;
            static constexpr BaseType CONSTANT_LIST = 2517;
        };

        class eTWSOURCE_UNI_SCHEMA_CONSTANT {

        public:

            static constexpr BaseType CONTENT_ID = 5;
            static constexpr BaseType NAME = 677;
            static constexpr BaseType PARENT = 678;
            static constexpr BaseType IS_DEFUNCT = 2083;
            static constexpr BaseType MERGE_MAP = 2087;
            static constexpr BaseType BASE_TYPE = 2507;
            static constexpr BaseType IS_COMPILE_TIME = 2514;
            static constexpr BaseType PARENT_CONTENT_ID = 2519;
            static constexpr BaseType CATEGORY_CONST_OBJID = 2520;
            static constexpr BaseType IS_DS_RESOURCE_METRIC = 2521;
            static constexpr BaseType IS_SCOPED = 2522;
            static constexpr BaseType ORIG_CONST_OBJID = 2523;
        };

        class eTWSOURCE_CONTENT_SCHEMA_PROPERTIES {

        public:

            static constexpr BaseType IS_APISCHEMA = 2090;
            static constexpr BaseType TWSchemaType = 2091;
            static constexpr BaseType IS_RESERVED = 2094;
            static constexpr BaseType HASHSECTION_OBJID = 2525;
        };

        class eTWSOURCE_CONTAINER_CONTENT {

        public:

            static constexpr BaseType NAME = 677;
            static constexpr BaseType TYPE = 679;
            static constexpr BaseType SOURCE_CONTENT_SCHEMA_PROPERTIES = 2524;
        };

        class eTWSOURCE_CONTENT_SCHEMA {

        public:

            static constexpr BaseType NAME = 677;
            static constexpr BaseType PARENT = 678;
            static constexpr BaseType TYPE = 679;
            static constexpr BaseType SOURCE_CONTENT_SCHEMA_PROPERTIES = 2524;
            static constexpr BaseType SOURCE_CONTAINER_CONTENT = 2526;
        };

        class eTWTWCMakePresetCacheVar {

        public:

            static constexpr BaseType TWName = 2529;
            static constexpr BaseType TWType = 2530;
            static constexpr BaseType TWValue = 2531;
        };

        class eTWTWCMakePresetEnvVar {

        public:

            static constexpr BaseType TWName = 2529;
            static constexpr BaseType TWValue = 2531;
        };

        class eTWTWCMakeVSSVendorVar {

        public:

            static constexpr BaseType TWName = 2529;
            static constexpr BaseType TWValue = 2531;
        };

        class eTWTWCMakeVSRSVendorVar {

        public:

            static constexpr BaseType TWName = 2529;
            static constexpr BaseType TWValue = 2531;
        };

        class eTWTWToolChainFlags {

        public:

            static constexpr BaseType TWName = 2529;
            static constexpr BaseType TWValue = 2531;
        };

        class eTWTWHostToolChainFlags {

        public:

            static constexpr BaseType TWName = 2529;
            static constexpr BaseType TWValue = 2531;
        };

        class eTWBUILDGEN_OS {

        public:

            static constexpr BaseType NAME = 677;
            static constexpr BaseType TWCMakePresetCacheVar = 2528;
            static constexpr BaseType TWCMakePresetEnvVar = 2532;
            static constexpr BaseType TWCMakeVSSVendorVar = 2533;
            static constexpr BaseType TWCMakeVSRSVendorVar = 2534;
            static constexpr BaseType TWToolChainFlags = 2535;
            static constexpr BaseType TWHostToolChainFlags = 2536;
            static constexpr BaseType TWVSName = 2538;
            static constexpr BaseType TWCMakeName = 2539;
            static constexpr BaseType TWBuildGeneratorName = 2540;
            static constexpr BaseType TWKernel = 2541;
            static constexpr BaseType TWIsBuildHost = 2542;
            static constexpr BaseType TWHostOS = 2543;
            static constexpr BaseType TWInactive = 2544;
            static constexpr BaseType TWVSIntelliSenseMode = 2545;
        };

        class eTWBUILDGEN_KERNEL {

        public:

            static constexpr BaseType NAME = 677;
            static constexpr BaseType TWCMakePresetCacheVar = 2528;
            static constexpr BaseType TWCMakePresetEnvVar = 2532;
            static constexpr BaseType TWCMakeVSSVendorVar = 2533;
            static constexpr BaseType TWCMakeVSRSVendorVar = 2534;
            static constexpr BaseType TWToolChainFlags = 2535;
            static constexpr BaseType TWKernel = 2541;
            static constexpr BaseType TWVSIntelliSenseMode = 2545;
        };

        class eTWBUILDGEN_ARCH {

        public:

            static constexpr BaseType NAME = 677;
            static constexpr BaseType TWCMakePresetCacheVar = 2528;
            static constexpr BaseType TWCMakePresetEnvVar = 2532;
            static constexpr BaseType TWCMakeVSSVendorVar = 2533;
            static constexpr BaseType TWCMakeVSRSVendorVar = 2534;
            static constexpr BaseType TWToolChainFlags = 2535;
            static constexpr BaseType TWVSName = 2538;
            static constexpr BaseType TWCMakeName = 2539;
            static constexpr BaseType TWIsBuildHost = 2542;
            static constexpr BaseType TWInactive = 2544;
            static constexpr BaseType TWVSIntelliSenseMode = 2545;
        };

        class eTWBUILDGEN_PRESET {

        public:

            static constexpr BaseType NAME = 677;
            static constexpr BaseType TWCMakePresetCacheVar = 2528;
            static constexpr BaseType TWCMakePresetEnvVar = 2532;
            static constexpr BaseType TWCMakeVSSVendorVar = 2533;
            static constexpr BaseType TWCMakeVSRSVendorVar = 2534;
            static constexpr BaseType TWToolChainFlags = 2535;
            static constexpr BaseType TWIsCustom = 2549;
        };

        class eTWBUILDGEN_CMAKE_PRESET {

        public:

            static constexpr BaseType NAME = 677;
            static constexpr BaseType DISPLAY_NAME = 1002;
            static constexpr BaseType VS_INTELLISENSE_MODE = 2551;
            static constexpr BaseType IS_CONFIGURE_PRESET = 2552;
            static constexpr BaseType IS_INDIVIDUAL = 2553;
            static constexpr BaseType BUILD_ENTITY_TYPE = 2554;
            static constexpr BaseType REFOBJ_ID = 2555;
            static constexpr BaseType DEPENDS = 2556;
            static constexpr BaseType CONFIF_DEPENDS = 2557;
        };

        class eTWBUILDGEN_CONFIG {

        public:

            static constexpr BaseType NAME = 677;
            static constexpr BaseType TWCMakePresetEnvVar = 2532;
            static constexpr BaseType TWToolChainFlags = 2535;
            static constexpr BaseType TWInactive = 2544;
            static constexpr BaseType TWForPreset = 2559;
        };

        class eTWBUILDGEN_STAGE {

        public:

            static constexpr BaseType NAME = 677;
            static constexpr BaseType TWCMakePresetEnvVar = 2532;
            static constexpr BaseType TWToolChainFlags = 2535;
            static constexpr BaseType TWInactive = 2544;
            static constexpr BaseType TWStageConfigs = 2561;
        };

        class eTWBUILDGEN_TRUNK {

        public:

            static constexpr BaseType NAME = 677;
            static constexpr BaseType TWInactive = 2544;
            static constexpr BaseType TWTrunkStages = 2563;
            static constexpr BaseType TWSCMTrunkName = 2564;
        };

        class eTWBUILD_CONDITION_VALUE {

        public:

            static constexpr BaseType VALUE = 17;
            static constexpr BaseType COND_TYPE = 2566;
            static constexpr BaseType COND_VALUE = 2567;
            static constexpr BaseType COND_NEGATE = 2568;
        };

        class eTWAPP_CONDITION_VALUE {

        public:

            static constexpr BaseType VALUE = 17;
            static constexpr BaseType COND_TYPE = 2566;
            static constexpr BaseType COND_VALUE = 2567;
            static constexpr BaseType COND_NEGATE = 2568;
        };

        class eTWBUILDGEN_LAYER {

        public:

            static constexpr BaseType NAME = 677;
            static constexpr BaseType TYPE = 679;
            static constexpr BaseType CATEGORY = 806;
            static constexpr BaseType PATH = 2482;
            static constexpr BaseType DEPENDS = 2556;
            static constexpr BaseType APP_CONDITION_VALUE = 2569;
            static constexpr BaseType SOURCES = 2571;
            static constexpr BaseType PUBLIC_INCLUDES = 2572;
            static constexpr BaseType PRIVATE_INCLUDES = 2573;
            static constexpr BaseType TWMainIncludeFile = 2574;
        };

        class eTWBUILDGEN_CMAKE_TARGET {

        public:

            static constexpr BaseType NAME = 677;
            static constexpr BaseType TYPE = 679;
            static constexpr BaseType CATEGORY = 806;
            static constexpr BaseType PATH = 2482;
            static constexpr BaseType REFOBJ_ID = 2555;
            static constexpr BaseType SOURCE_NAME = 2576;
            static constexpr BaseType BASE_LAYER = 2577;
            static constexpr BaseType HAS_ADMIN_TIER = 2578;
            static constexpr BaseType HAS_SERVER_TIER = 2579;
            static constexpr BaseType HAS_CLIENT_TIER = 2580;
            static constexpr BaseType HAS_PRESENTATION_TIER = 2581;
            static constexpr BaseType TOOLKIT = 2582;
        };

        class eTWAPPGEN_GENFILE_ASYNC_PARMS {

        public:

            static constexpr BaseType PRODUCT_ID = 283;
            static constexpr BaseType APPGEN_COMPUTE_PTR = 2584;
            static constexpr BaseType TARGET_ID = 2585;
            static constexpr BaseType GEN_FILE_TYPE = 2586;
        };

        class eTWAPPGEN_WORKSPACE {

        public:

            static constexpr BaseType BUILDGEN_TWHOME = 2588;
            static constexpr BaseType BUILDGEN_TWTOOLSHOME = 2589;
            static constexpr BaseType BUILDGEN_TWBUILDHOME = 2590;
            static constexpr BaseType BUILDGEN_TWWORKSPACEHOME = 2591;
            static constexpr BaseType BUILDGEN_TWGENHOME = 2592;
            static constexpr BaseType BUILDGEN_PREDEF_FOLDERS = 2593;
            static constexpr BaseType APPGEN_LOADED_TWFILES = 2594;
        };

        class eTWTWBuildLayer {

        public:

            static constexpr BaseType TWName = 2529;
            static constexpr BaseType TWSourceDir = 2596;
            static constexpr BaseType TWTestDir = 2597;
            static constexpr BaseType TWBaseLayer = 2598;
            static constexpr BaseType TWCategory = 2599;
        };

        class eTWAPPGEN_USER_CONFIG {

        public:

            static constexpr BaseType TWProductFilter = 2601;
            static constexpr BaseType TWProductFilterOut = 2602;
        };

        class eTWAPPGEN_CONFIG {

        public:

            static constexpr BaseType TWCMakePresetCacheVar = 2528;
            static constexpr BaseType TWCMakePresetEnvVar = 2532;
            static constexpr BaseType TWCMakeVSSVendorVar = 2533;
            static constexpr BaseType TWCMakeVSRSVendorVar = 2534;
            static constexpr BaseType TWToolChainFlags = 2535;
            static constexpr BaseType TWBuildGeneratorName = 2540;
            static constexpr BaseType TWBuildLayer = 2595;
            static constexpr BaseType TWVerbose = 2604;
            static constexpr BaseType TWCPPTopText = 2605;
            static constexpr BaseType TWCPPBottomText = 2606;
            static constexpr BaseType TWHPPTopText = 2607;
            static constexpr BaseType TWHPPBottomText = 2608;
            static constexpr BaseType TWHPPTWAppProductClassText = 2609;
            static constexpr BaseType TWSchemaHPPTopText = 2610;
            static constexpr BaseType TWSchemaHPPBottomText = 2611;
            static constexpr BaseType TWJavaTopText = 2612;
            static constexpr BaseType TWJavaBottomText = 2613;
            static constexpr BaseType TWCMakeTopText = 2614;
            static constexpr BaseType TWCMakeBottomText = 2615;
            static constexpr BaseType TWAppCPPTopText = 2616;
            static constexpr BaseType TWAppCPPBottomText = 2617;
            static constexpr BaseType TWFloatingLayerName = 2618;
            static constexpr BaseType TWAppUnitNotReadyExecFunc = 2619;
            static constexpr BaseType TWAppUnitReadyExecFunc = 2620;
            static constexpr BaseType TWAppUnitAPISupportLayer = 2621;
            static constexpr BaseType TWAppGenPrimitiveStrClass = 2622;
            static constexpr BaseType TWCMakeMainOutFile = 2623;
            static constexpr BaseType TWBuildTargetsJsonFile = 2624;
            static constexpr BaseType TWCMakePresetsOutFile = 2625;
            static constexpr BaseType TWLaunchVSJsonFile = 2626;
            static constexpr BaseType TWTaskVSJsonFile = 2627;
            static constexpr BaseType TWWorkspaceFolderName = 2628;
            static constexpr BaseType TWGenFolderName = 2629;
            static constexpr BaseType TWToolsFolderName = 2630;
            static constexpr BaseType TWBuildFolderName = 2631;
            static constexpr BaseType TWIntFolderName = 2632;
            static constexpr BaseType TWLibFolderName = 2633;
            static constexpr BaseType TWBinFolderName = 2634;
            static constexpr BaseType TWIgnoreFolders = 2635;
            static constexpr BaseType TWLayerConfigPath = 2636;
            static constexpr BaseType TWToolConfigPath = 2637;
            static constexpr BaseType TWSchemaConfigPath = 2638;
            static constexpr BaseType TWBuildConfigPath = 2639;
            static constexpr BaseType TWUserConfigPath = 2640;
            static constexpr BaseType TWCMakeBuildScript = 2641;
            static constexpr BaseType TWPublicInclude = 2642;
            static constexpr BaseType TWPrivateInclude = 2643;
            static constexpr BaseType TWSourceExtensions = 2644;
            static constexpr BaseType TWAppGenExtensions = 2645;
            static constexpr BaseType TWAppGenFilesPaths = 2646;
            static constexpr BaseType TWAppGenAppProdExtension = 2647;
            static constexpr BaseType TWAppGenAppTestExtension = 2648;
            static constexpr BaseType TWAppGenBuildFileExtension = 2649;
            static constexpr BaseType TWOSArchInvalidValues = 2650;
            static constexpr BaseType TWOSArchValidIntelliSenseModes = 2651;
            static constexpr BaseType TWSchemaGenBaseDBPath = 2652;
            static constexpr BaseType TWSchemaGenMasterDBPath = 2653;
            static constexpr BaseType TWDefaultBuildTrunk = 2654;
        };

        class eTWAPPGEN_CMDLINE {

        public:

            static constexpr BaseType APP_NAME = 2656;
            static constexpr BaseType UNNAMED_PARM = 2657;
            static constexpr BaseType build_trunk = 2658;
            static constexpr BaseType help = 2659;
            static constexpr BaseType version = 2660;
            static constexpr BaseType clean = 2661;
        };

        class eTWPRODUCT_APPUNIT_INFO {

        public:

            static constexpr BaseType APPUNIT = 2663;
            static constexpr BaseType IS_TEST = 2664;
        };

        class eTWAPPGEN_PRODUCT {

        public:

            static constexpr BaseType BUILD_VERSION = 284;
            static constexpr BaseType NAME = 677;
            static constexpr BaseType TYPE = 679;
            static constexpr BaseType CATEGORY = 806;
            static constexpr BaseType PATH = 2482;
            static constexpr BaseType HAS_ADMIN_TIER = 2578;
            static constexpr BaseType HAS_SERVER_TIER = 2579;
            static constexpr BaseType HAS_CLIENT_TIER = 2580;
            static constexpr BaseType HAS_PRESENTATION_TIER = 2581;
            static constexpr BaseType PRODUCT_APPUNIT_INFO = 2662;
            static constexpr BaseType LAYER = 2666;
            static constexpr BaseType TEST_LAYER = 2667;
            static constexpr BaseType BUILD_LAYER = 2668;
            static constexpr BaseType IS_DISABLED = 2669;
            static constexpr BaseType ADMIN_TIER = 2670;
            static constexpr BaseType SERVER_TIER = 2671;
            static constexpr BaseType CLIENT_TIER = 2672;
            static constexpr BaseType PRESENTATION_TIER = 2673;
            static constexpr BaseType IS_DIRECT_BUILD = 2674;
            static constexpr BaseType INPUT_APPUNITS = 2675;
            static constexpr BaseType IS_CMDLINE_TOOL = 2676;
            static constexpr BaseType APPLICATION_TYPE = 2677;
            static constexpr BaseType HAS_APISUPPORT_LAYER = 2678;
            static constexpr BaseType HAS_NO_BOOT_SCHEMA = 2679;
            static constexpr BaseType IS_INTERACTIVE_ONLY = 2680;
            static constexpr BaseType IS_STANDALONE = 2681;
            static constexpr BaseType IS_SINGLE_PHYSICAL_TIER = 2682;
            static constexpr BaseType PRODUCT_SCHEMA = 2683;
            static constexpr BaseType TWAppProductTierFilter = 2684;
            static constexpr BaseType TWAppProductToolKitFilter = 2685;
            static constexpr BaseType TWAppProductTargetFilter = 2686;
        };

        class eTWAPPGEN_API {

        public:

            static constexpr BaseType NAME = 677;
            static constexpr BaseType PARENT = 678;
            static constexpr BaseType API_HANDLER = 2688;
            static constexpr BaseType IS_BOOTSTRAP = 2689;
            static constexpr BaseType REQ_OBJECT_SCHEMA = 2690;
            static constexpr BaseType RESP_OBJECT_SCHEMA = 2691;
            static constexpr BaseType REQ_CONTEXT_OBJECT_SCHEMA = 2692;
            static constexpr BaseType RESP_CONTEXT_OBJECT_SCHEMA = 2693;
        };

        class eTWAPPGEN_APPCODE {

        public:

            static constexpr BaseType VALUE = 17;
            static constexpr BaseType NAME = 677;
            static constexpr BaseType PARENT = 678;
            static constexpr BaseType TYPE = 679;
            static constexpr BaseType BUILD_CONDITION_VALUE = 2565;
            static constexpr BaseType APP_CONDITION_VALUE = 2569;
        };

        class eTWAPPGEN_APPUNIT {

        public:

            static constexpr BaseType NAME = 677;
            static constexpr BaseType TYPE = 679;
            static constexpr BaseType DEPENDS = 2556;
            static constexpr BaseType IS_TEST = 2664;
            static constexpr BaseType BUILD_LAYER = 2668;
            static constexpr BaseType TIER_TYPE = 2696;
            static constexpr BaseType USES = 2697;
            static constexpr BaseType APPSIGNAL_HANDLER = 2698;
            static constexpr BaseType TESTED_APPUNIT = 2699;
            static constexpr BaseType CONSUMES_API = 2700;
            static constexpr BaseType CONSUMES_SCHEMA = 2701;
        };

        class eTWQUALIFIED_VALUES {

        public:

            static constexpr BaseType VALUE = 17;
            static constexpr BaseType QUALIFIER = 2703;
        };

        class eTWAPPGEN_APP_CONSTANT {

        public:

            static constexpr BaseType VALUE = 17;
            static constexpr BaseType NAME = 677;
            static constexpr BaseType PARENT = 678;
            static constexpr BaseType TYPE = 679;
            static constexpr BaseType QUALIFIED_VALUES = 2702;
            static constexpr BaseType INDEX = 2705;
            static constexpr BaseType IS_APPSTRING = 2706;
        };

        class eTWAPPGEN_APPCONSTANT_SCOPE {

        public:

            static constexpr BaseType NAME = 677;
        };

        class eTWAPPGEN_APP_OPTION {

        public:

            static constexpr BaseType NAME = 677;
            static constexpr BaseType PARENT = 678;
            static constexpr BaseType DISABLED_PRODUCTS = 2709;
        };

        class eTWAPPGEN_APPOPTION_SCOPE {

        public:

            static constexpr BaseType NAME = 677;
        };

        class eTWDBAnalyzerPayloadID {

        public:

            static constexpr BaseType DBA_INPUT_FILE_NAME = 2711;
            static constexpr BaseType DBA_OUTPUT_FILE_NAME = 2712;
        };

        class eTWIntegrationClientPayloadID {

        public:

            static constexpr BaseType FILE_PATH = 2713;
            static constexpr BaseType FILE_TYPE = 2714;
            static constexpr BaseType DB_OBJ = 2715;
        };

        class eTWDeviceIntegrationPayloadID {

        public:

            static constexpr BaseType DEVICE_NAME = 143;
        };

        class eTWEmployees {

        public:

            static constexpr BaseType Employee = 2717;
        };

        class eTWEmployee {

        public:

            static constexpr BaseType Name = 2718;
            static constexpr BaseType Salary = 2719;
            static constexpr BaseType Address = 2720;
            static constexpr BaseType Nominee = 2721;
            static constexpr BaseType Addresses = 2722;
            static constexpr BaseType Details = 2723;
            static constexpr BaseType HomeNum = 2724;
            static constexpr BaseType OrgDetails = 2725;
            static constexpr BaseType Skills = 2726;
        };

        class eTWNominee {

        public:

            static constexpr BaseType Contact = 2727;
        };

        class eTWContact {

        public:

            static constexpr BaseType Contact_Number = 2728;
            static constexpr BaseType Nominee_Name = 2729;
            static constexpr BaseType Relationship = 2730;
        };

        class eTWAddress {

        public:

            static constexpr BaseType line = 2731;
        };

        class eTWContact_Number {

        public:

            static constexpr BaseType PhoneNo = 2732;
        };

        class eTWAddresses {

        public:

            static constexpr BaseType Details = 2723;
            static constexpr BaseType Skills = 2726;
            static constexpr BaseType HomeAddress = 2733;
            static constexpr BaseType OfficeAddress = 2734;
        };

        class eTWHomeAddress {

        public:

            static constexpr BaseType Skills = 2726;
            static constexpr BaseType line1 = 2735;
        };

        class eTWOfficeAddress {

        public:

            static constexpr BaseType line2 = 2736;
        };

        class eTWOrgDetails {

        public:

            static constexpr BaseType Manager = 2737;
            static constexpr BaseType Department = 2738;
        };

        class eTWPhoneNums {

        public:

            static constexpr BaseType HomeNum = 2724;
            static constexpr BaseType OfficeNum = 2740;
        };

        class eTWDetails {

        public:

            static constexpr BaseType Name = 2718;
            static constexpr BaseType Salary = 2719;
            static constexpr BaseType OrgDetails = 2725;
            static constexpr BaseType Skills = 2726;
            static constexpr BaseType PhoneNums = 2739;
            static constexpr BaseType OfficeNum = 2740;
        };

        class eTWSkills {

        public:

            static constexpr BaseType CSharp = 2741;
            static constexpr BaseType Ubuntu = 2742;
        };

        class eTWINTEG_BILLING_OBJ {

        public:

            static constexpr BaseType Vouchers = 2744;
            static constexpr BaseType Voucher = 2745;
            static constexpr BaseType RevChargeApplicable = 2746;
            static constexpr BaseType EcommerceGstin = 2747;
            static constexpr BaseType DocumentDetails = 2748;
            static constexpr BaseType DocumentType = 2749;
            static constexpr BaseType DocumentNumber = 2750;
            static constexpr BaseType DocumentDate = 2751;
            static constexpr BaseType SellerGstin = 2752;
            static constexpr BaseType LegalKey = 2753;
            static constexpr BaseType TradeKey = 2754;
            static constexpr BaseType SellerEmail = 2755;
            static constexpr BaseType BuyerGstin = 2756;
            static constexpr BaseType BuyerLegalKey = 2757;
            static constexpr BaseType BuyerTradeKey = 2758;
            static constexpr BaseType BuyerEmail = 2759;
            static constexpr BaseType VoucherNum = 2760;
            static constexpr BaseType VoucherDt = 2761;
            static constexpr BaseType Items = 2762;
            static constexpr BaseType Item = 2763;
            static constexpr BaseType SequenceNumber = 2764;
            static constexpr BaseType ItemDescription = 2765;
            static constexpr BaseType HsnCode = 2766;
            static constexpr BaseType BilledQuantity = 2767;
            static constexpr BaseType UnitPrice = 2768;
            static constexpr BaseType Calculations = 2769;
            static constexpr BaseType Calculation = 2770;
            static constexpr BaseType MethodName = 2771;
            static constexpr BaseType FieldToCalculate = 2772;
            static constexpr BaseType ParentField = 2773;
            static constexpr BaseType DependentFields = 2774;
            static constexpr BaseType Price = 2775;
            static constexpr BaseType Quantity = 2776;
            static constexpr BaseType Percent = 2777;
        };

        class eTWMAPPING_OBJ {

        public:

            static constexpr BaseType MappingInfo = 2779;
            static constexpr BaseType Key = 2780;
            static constexpr BaseType Level = 2781;
            static constexpr BaseType Type = 2782;
            static constexpr BaseType Parent = 2783;
            static constexpr BaseType NewFields = 2784;
            static constexpr BaseType NewField = 2785;
            static constexpr BaseType FieldPath = 2786;
            static constexpr BaseType AncestorPath = 2787;
            static constexpr BaseType DependentFieldPath = 2788;
            static constexpr BaseType XPath = 2789;
            static constexpr BaseType MapsTo = 2790;
            static constexpr BaseType MapLevel = 2791;
            static constexpr BaseType EnclosingTagName = 2792;
            static constexpr BaseType EnclosingTagMapLevel = 2793;
            static constexpr BaseType EnclosingTagBegin = 2794;
            static constexpr BaseType IsRepeated = 2795;
            static constexpr BaseType Mapping = 2796;
        };

        class eTWSchemaDisplayObj {

        public:

            static constexpr BaseType Field = 2798;
        };

        class eTWField {

        public:

            static constexpr BaseType Name = 2718;
            static constexpr BaseType Level = 2781;
            static constexpr BaseType AncestorPath = 2787;
            static constexpr BaseType Repeated = 2799;
        };

        class eTWTSDataPublishingServicesObject {

        public:

            static constexpr BaseType TW_RESPONSE_MESSAGE = 2437;
        };

        class eTWCuratorTISchemaS {

        public:

            static constexpr BaseType TI_DATA_SUMMARY = 2801;
            static constexpr BaseType TI_TOTAL_DATA = 2802;
            static constexpr BaseType TI_NEW_DATA = 2803;
            static constexpr BaseType TI_CURATED_DATA = 2804;
            static constexpr BaseType TI_PUBLISHED_DATA = 2805;
            static constexpr BaseType TI_CURATION_STATUS_TEXT = 2806;
        };

        class eTWDSSchemaS {

        public:

            static constexpr BaseType VERSION = 4;
            static constexpr BaseType ID = 567;
            static constexpr BaseType NAME = 677;
            static constexpr BaseType DESCRIPTION = 712;
            static constexpr BaseType SKU = 799; //(Alias of: BARCODE)
            static constexpr BaseType MERCHANT_ID = 1125;
            static constexpr BaseType TRIANGULATION_ID = 2807;
            static constexpr BaseType TRIANGULATION_DETAILS = 2808;
            static constexpr BaseType TO_BE_PUBLISHED = 2809;
            static constexpr BaseType IS_BROADCASTED = 2810;
            static constexpr BaseType SKU_OBJECT = 2811;
            static constexpr BaseType CATALOGUE_ID = 2812;
            static constexpr BaseType ATTRIBUTES = 2813;
            static constexpr BaseType DS_SUMMARY = 2814;
            static constexpr BaseType TI_DATA = 2815;
            static constexpr BaseType SKU_DATA = 2816;
            static constexpr BaseType TRANSACTION_DATA = 2817;
            static constexpr BaseType SENDER = 2818;
            static constexpr BaseType RECEIVER = 2819;
            static constexpr BaseType TO_BE_TRIANGULATED = 2820;
            static constexpr BaseType FILE = 2821;
        };

        class eTWClientDCElements {

        public:

            static constexpr BaseType STATUS = 1154;
            static constexpr BaseType ITEM = 2383;
            static constexpr BaseType FILE = 2821;
        };

        class eTWDSSchema {

        public:

            static constexpr BaseType VERSION = 4;
            static constexpr BaseType ID = 567;
            static constexpr BaseType NAME = 677;
            static constexpr BaseType DESCRIPTION = 712;
            static constexpr BaseType SKU = 799; //(Alias of: BARCODE)
            static constexpr BaseType MERCHANT_ID = 1125;
            static constexpr BaseType TRIANGULATION_ID = 2807;
            static constexpr BaseType TRIANGULATION_DETAILS = 2808;
            static constexpr BaseType TO_BE_PUBLISHED = 2809;
            static constexpr BaseType IS_BROADCASTED = 2810;
            static constexpr BaseType SKU_OBJECT = 2811;
            static constexpr BaseType CATALOGUE_ID = 2812;
            static constexpr BaseType ATTRIBUTES = 2813;
            static constexpr BaseType DS_SUMMARY = 2814;
            static constexpr BaseType TI_DATA = 2815;
            static constexpr BaseType SKU_DATA = 2816;
            static constexpr BaseType TRANSACTION_DATA = 2817;
            static constexpr BaseType SENDER = 2818;
            static constexpr BaseType RECEIVER = 2819;
            static constexpr BaseType TO_BE_TRIANGULATED = 2820;
            static constexpr BaseType FILE = 2821;
            static constexpr BaseType SCHEMA_DATATYPE = 2822;
            static constexpr BaseType SKU_TITLE = 2824;
            static constexpr BaseType TWDSCS_CLUSTR_ID = 2825;
            static constexpr BaseType TWDSCS_CLUSTR_ID_GENERATION_TIME = 2826;
            static constexpr BaseType XXX_CLUSTR_ID_PROCUREMENT_FLAG = 2827;
        };

        class eTWDSSchemaModule {

        public:

            static constexpr BaseType UNKNOWN = 0;
            static constexpr BaseType DSMODULE1 = 2823;
        };

        class eTWSCHEMA_OBJ {

        public:

            static constexpr BaseType DUMMY = 2499;
        };

        class eTWSKU_OBJ {

        public:

            static constexpr BaseType ID = 567;
            static constexpr BaseType NAME = 677;
        };

        class eTWTRANSACTION_OBJ {

        public:

            static constexpr BaseType ID = 567;
            static constexpr BaseType MERCHANT_ID = 1125;
            static constexpr BaseType SKU_OBJECT = 2811;
            static constexpr BaseType TO_BE_TRIANGULATED = 2820;
        };

        class eTWTI_OBJ {

        public:

            static constexpr BaseType TO_BE_PUBLISHED = 2809;
            static constexpr BaseType IS_BROADCASTED = 2810;
            static constexpr BaseType SKU_OBJECT = 2811;
            static constexpr BaseType TRANSACTION = 2828;
            static constexpr BaseType OBJ_ID = 2833;
            static constexpr BaseType CURATION_STATUS = 2834;
        };

        class eTWXXX_TWDSCS_SKU {

        public:

            static constexpr BaseType SKU_TITLE = 2824;
        };

        class eTWXXX_TWDSCS_CLUSTR_TEMP_ID {

        public:

            static constexpr BaseType TWDSCS_CLUSTR_ID = 2825;
            static constexpr BaseType TWDSCS_CLUSTR_ID_GENERATION_TIME = 2826;
        };

        class eTWXXX_TWDSSC_EXTERNAL_SKU_ENTITY_OBJ {

        public:

            static constexpr BaseType XXX_TWDSCS_SKU = 2835;
            static constexpr BaseType XXX_TWDSCS_CLUSTR_TEMP_ID = 2836;
            static constexpr BaseType XXX_TWDSCS_SKU_DUID = 2838;
            static constexpr BaseType XXX_TWDSCS_SKU_OBJID = 2839;
            static constexpr BaseType XXX_TWDSCS_CLUSTR_ID_PROCUREMENT_FLAG = 2840;
            static constexpr BaseType XXX_TRANSACTION_PROCESSED_STATE = 2841;
        };

        class eTWXXX_TRANSACTION_DETAILS {

        public:

            static constexpr BaseType XXX_TRANSACTION_DATE = 2843;
            static constexpr BaseType XXX_TRANSACTION_ID = 2844;
        };

        class eTWXXX_TWDSCS_TRANSACTIONS_OBJ_ORDER_DETAIL {

        public:

            static constexpr BaseType XXX_TWDSCS_TRANSACTIONS_OBJ_QTY = 2846;
        };

        class eTWXXX_TWDSCS_TRANSACTIONS_OBJ {

        public:

            static constexpr BaseType XXX_TWDSSC_EXTERNAL_SKU_ENTITY_OBJ = 2837;
            static constexpr BaseType XXX_TRANSACTION_PROCESSED_STATE = 2841;
            static constexpr BaseType XXX_TWDSCS_TRANSACTIONS_OBJ_ORDER_DETAIL = 2845;
        };

        class eTWXXX_TWDSCS_TRANSACTIONS {

        public:

            static constexpr BaseType XXX_TRANSACTION_PROCESSED_STATE = 2841;
            static constexpr BaseType XXX_TRANSACTION_DETAILS = 2842;
            static constexpr BaseType XXX_TWDSCS_TRANSACTIONS_OBJ = 2847;
        };

        class eTWXXX_TWDSCS_MAPPED_SKU_WITH_STATUS {

        public:

            static constexpr BaseType XXX_TWDSCS_SKU_OBJECT_ID = 2850;
            static constexpr BaseType XXX_TWDSCS_SKU_MAPPING_STATUS = 2851;
        };

        class eTWXXX_TWDSCS_MAPPED_EXTERNAL_SKUS {

        public:

            static constexpr BaseType XXX_TWDSCS_MAPPED_SKU_WITH_STATUS = 2849;
            static constexpr BaseType XXX_TWDSCS_EXTERNAL_SKU_DUID = 2853;
        };

        class eTWXXX_TWDSCS_LOCAL_SKU_ENTITY_OBJ {

        public:

            static constexpr BaseType XXX_CLUSTR_ID_PROCUREMENT_FLAG = 2827;
            static constexpr BaseType XXX_TWDSCS_SKU = 2835;
            static constexpr BaseType XXX_TWDSCS_CLUSTR_TEMP_ID = 2836;
            static constexpr BaseType XXX_TWDSCS_SKU_MAPPING_STATUS = 2851;
            static constexpr BaseType XXX_TWDSCS_MAPPED_EXTERNAL_SKUS = 2852;
        };

        class eTWXXX_TWDSCS_INCOMING_TRANSACTED_OBJ {

        public:

            static constexpr BaseType XXX_TWDSSC_EXTERNAL_SKU_ENTITY_OBJ = 2837;
            static constexpr BaseType XXX_TWDSCS_MAPPED_SKU_WITH_STATUS = 2849;
            static constexpr BaseType XXX_TWDSCS_SKU_MAPPING_STATUS = 2851;
        };

        class eTWXXX_TWDSCS_EXTERNAL_SKU_EXTERNALOBJID_LOCAlOBJID_PAIR {

        public:

            static constexpr BaseType XXX_TWDSCS_EXTERNAL_SKU_EXTERNAL_OBJID = 2857;
            static constexpr BaseType XXX_TWDSCS_EXTERNAL_SKU_LOCAl_OBJID = 2858;
        };

        class eTWXXX_TWDSCS_EXTERNAL_SKU_MAPPED {

        public:

            static constexpr BaseType XXX_TWDSCS_EXTERNAL_SKU_EXTERNALOBJID_LOCAlOBJID_PAIR = 2856;
        };

        class eTWXXX_TWDSCS_EXTERNAL_SKU_UNMAPPED {

        public:

            static constexpr BaseType XXX_TWDSCS_EXTERNAL_SKU_EXTERNALOBJID_LOCAlOBJID_PAIR = 2856;
        };

        class eTWXXX_TWDSCS_EXTERNAL_DUID_OBJID_OBJ {

        public:

            static constexpr BaseType XXX_TWDSCS_EXTERNAL_SKU_MAPPED = 2859;
            static constexpr BaseType XXX_TWDSCS_EXTERNAL_SKU_UNMAPPED = 2860;
            static constexpr BaseType XXX_TWDSCS_SENDER_MERCHANT_DUID = 2862;
        };

        class eTWCuratorTISchema {

        public:

            static constexpr BaseType TI_DATA_SUMMARY = 2801;
            static constexpr BaseType TI_TOTAL_DATA = 2802;
            static constexpr BaseType TI_NEW_DATA = 2803;
            static constexpr BaseType TI_CURATED_DATA = 2804;
            static constexpr BaseType TI_PUBLISHED_DATA = 2805;
            static constexpr BaseType TI_CURATION_STATUS_TEXT = 2806;
        };

        class eTWCURATOR_TI_OBJ {

        public:

            static constexpr BaseType OBJID = 45;
            static constexpr BaseType CURATION_STATUS = 2834;
            static constexpr BaseType SKU_SURVIVOR_ID = 2867;
            static constexpr BaseType SKU_ALIASES = 2868;
        };

        class eTWCURATOR_TI_OBJ2 {

        public:

            static constexpr BaseType CURATION_STATUS = 2834;
            static constexpr BaseType SKU_SURVIVOR_ID = 2867;
            static constexpr BaseType SKU_ALIASES = 2868;
        };

        class eTWFULLNAME_COREOBJECT_TEST_OBJ {

        public:

            static constexpr BaseType FIRSTNAME = 2871;
            static constexpr BaseType LASTNAME = 2872;
        };

        class eTWTEST_EMBEDDED_OBJ {

        public:

            static constexpr BaseType FULLNAME_COREOBJECT_TEST_OBJ = 2870;
        };

        class eTWTEST_ADDRESS {

        public:

            static constexpr BaseType TEST_LINE1 = 2875;
            static constexpr BaseType TEST_LINE2 = 2876;
            static constexpr BaseType TEST_CITY = 2877;
            static constexpr BaseType TEST_PIN = 2878;
        };

        class eTWTEST_COMPANY_DETAILS {

        public:

            static constexpr BaseType TEST_ADDRESS = 2874;
            static constexpr BaseType TEST_NAME = 2880;
            static constexpr BaseType TEST_CONTACT = 2881;
        };

        class eTWTEST_EMPLOYEES {

        public:

            static constexpr BaseType TEST_NAME = 2880;
            static constexpr BaseType TEST_DESIGNATION = 2883;
        };

        class eTWTEST_DESCRIBE_OBJECT {

        public:

            static constexpr BaseType TEST_COMPANY_DETAILS = 2879;
            static constexpr BaseType TEST_EMPLOYEES = 2882;
            static constexpr BaseType TEST_TODAY_DATE = 2885;
        };

        class eTWCONTAINER_ID {

        public:

            static constexpr BaseType REPEATED_INTEGER_ID = 2887;
        };

        class eTWTEST_DESCRIBE_OBJECT_ALL_TYPES {

        public:

            static constexpr BaseType CONTAINER_ID = 2886;
            static constexpr BaseType BOOLEAN_ID = 2889;
            static constexpr BaseType TRIVAL_ID = 2890;
            static constexpr BaseType UNIVERSALID_ID = 2891;
            static constexpr BaseType UNIVERSALAPPID_ID = 2892;
            static constexpr BaseType INTEGER_ID = 2893;
            static constexpr BaseType UINTEGER_ID = 2894;
            static constexpr BaseType NUMBER64_ID = 2895;
            static constexpr BaseType NUMBER128_ID = 2896;
            static constexpr BaseType QNUMBER_ID = 2897;
            static constexpr BaseType DATE_ID = 2898;
            static constexpr BaseType TIME_ID = 2899;
            static constexpr BaseType TIMEOFDAY_ID = 2900;
            static constexpr BaseType TIMEOFDAYEX_ID = 2901;
            static constexpr BaseType OBJID_ID = 2902;
            static constexpr BaseType CONTENTURL_ID = 2903;
            static constexpr BaseType STRING_ID = 2904;
        };

        class eTWCOREOBJECT_TEST_OBJ1 {

        public:

            static constexpr BaseType COTEST_FILED_11 = 2906;
            static constexpr BaseType COTEST_FILED_12 = 2907;
            static constexpr BaseType COTEST_FILED_13 = 2908;
            static constexpr BaseType COTEST_FILED_14 = 2909;
            static constexpr BaseType COTEST_FILED_15 = 2910;
        };

        class eTWCOREOBJECT_TEST_OBJ2 {

        public:

            static constexpr BaseType COTEST_FILED_21 = 2912;
            static constexpr BaseType COTEST_FILED_22 = 2913;
            static constexpr BaseType COTEST_FILED_23 = 2914;
            static constexpr BaseType COTEST_FILED_24 = 2915;
            static constexpr BaseType COTEST_FILED_25 = 2916;
        };

        class eTWCOREOBJECT_TEST_OBJ3 {

        public:

            static constexpr BaseType COTEST_FILED_31 = 2918;
            static constexpr BaseType COTEST_FILED_32 = 2919;
            static constexpr BaseType COTEST_FILED_33 = 2920;
            static constexpr BaseType COTEST_FILED_34 = 2921;
            static constexpr BaseType COTEST_FILED_35 = 2922;
        };

        class eTWCOREOBJECT_TEST_OBJ4 {

        public:

            static constexpr BaseType COTEST_FILED_41 = 2924;
            static constexpr BaseType COTEST_FILED_42 = 2925;
            static constexpr BaseType COTEST_FILED_43 = 2926;
            static constexpr BaseType COTEST_FILED_44 = 2927;
            static constexpr BaseType COTEST_FILED_45 = 2928;
        };

        class eTWCOREOBJECT_TEST_EMB {

        public:

            static constexpr BaseType COTEST_FILED1 = 2930;
        };

        class eTWTEST_DEPENDENT {

        public:

            static constexpr BaseType TEST_NAME = 2880;
            static constexpr BaseType TEST_RELATION = 2932;
        };

        class eTWTEST_EMPLOYEEADDRESS {

        public:

            static constexpr BaseType TEST_LINE = 2934;
        };

        class eTWTEST_EMPLOYEE {

        public:

            static constexpr BaseType TEST_NAME = 2880;
            static constexpr BaseType TEST_DEPENDENT = 2931;
            static constexpr BaseType TEST_EMPLOYEEADDRESS = 2933;
            static constexpr BaseType TEST_EMPLOYEEID = 2936;
            static constexpr BaseType TEST_MOBILENUM = 2937;
        };

        class eTWSTUDENTSCHEMA {

        public:

            static constexpr BaseType NAME = 677;
        };

        class eTWTEST_OBJ {

        public:

            static constexpr BaseType BOOLID = 2940;
        };

        class eTWSTUDENTSCHEMAMETA {

        public:

            static constexpr BaseType STUDENT_DETAILS = 2942;
        };

        class eTWTW_CORE_PROCESSMGR_TEST_API_SCHEMA {

        public:

            static constexpr BaseType TEST_INP_STRING = 2944;
        };

        class eTWGET_STUDENT_PERCENTAGE_REQUEST_SCHEMA {

        public:

            static constexpr BaseType STUDENT_ID = 2946;
        };

        class eTWGET_STUDENT_PERCENTAGE_RESPONSE_SCHEMA {

        public:

            static constexpr BaseType STUDENT_ID = 2946;
            static constexpr BaseType STUDENT_PERCENTAGE = 2948;
        };

        class eTWGET_STUDENT_PERCNTAGE_QUERY_SCHEMA {

        public:

            static constexpr BaseType SOME_QUERY_RELATED_ID_1 = 2950;
        };

        class eTWGET_STUDENT_PERCENTAGE_SCRATCHPAD_SCHEMA {

        public:

            static constexpr BaseType SOME_SCRATCHPAD_RELATED_ID_2 = 2952;
            static constexpr BaseType DONE = 2953;
        };

        class eTWGET_STUDENT_DETAIL_REQUEST_SCHEMA {

        public:

            static constexpr BaseType STUDENT_ID = 2946;
        };

        class eTWGET_STUDENT_DETAIL_RESPONSE_SCHEMA {

        public:

            static constexpr BaseType STUDENT_ID = 2946;
            static constexpr BaseType STUDENT_PERCENTAGE = 2948;
            static constexpr BaseType STUDENT_NAME = 2956;
            static constexpr BaseType STUDENT_AGE = 2957;
            static constexpr BaseType STUDENT_SUBJECT_ID = 2958;
        };

        class eTWGET_STUDENT_DETAIL_QUERY_SCHEMA {

        public:

            static constexpr BaseType SOME_QUERY_RELATED_ID_3 = 2960;
        };

        class eTWGET_STUDENT_DETAIL_SCRATCHPAD_SCHEMA {

        public:

            static constexpr BaseType SOME_SCRATCHPAD_RELATED_ID_4 = 2962;
        };

        class eTWSOMAPI_REQCONTEXT {

        public:

            static constexpr BaseType FIELD1 = 2964;
        };

        class eTWSOMAPI_INPUT {

        public:

            static constexpr BaseType FIELD1 = 2964;
        };

        class eTWSOMAPI_OUTPUT {

        public:

            static constexpr BaseType FIELD1 = 2964;
        };

        class eTWMYSCRATCHPAD {

        public:

            static constexpr BaseType FIELD1 = 2964;
        };

        class eTWSOMEAPI_SCRATCHPAD {

        public:

            static constexpr BaseType FIELD1 = 2964;
        };

        class eTWGREETAPI_SCRATCHPAD_SCHEMA {

        public:

            static constexpr BaseType NAME = 677;
            static constexpr BaseType GREETMESSAGE = 2970;
        };

        class eTWFACTAPI_SCRATCHPAD_SCHEMA {

        public:

            static constexpr BaseType NUMBER = 1769;
            static constexpr BaseType VAL = 2972;
        };

        class eTWMULTITASKAPI_SCRATCHPAD_SCHEMA {

        public:

            static constexpr BaseType DATA = 2974;
        };

        class eTWMULTIACTIVITYAPI_SCRATCHPAD_SCHEMA {

        public:

            static constexpr BaseType CREATESTAGE = 2976;
        };

        class eTWScenario1ReadDB_SCHEMA {

        public:

            static constexpr BaseType DATA_KEY = 2978;
            static constexpr BaseType DATA_DBID = 2979;
            static constexpr BaseType DATA_OBJ = 2980;
            static constexpr BaseType DATA_OBJS = 2981;
        };

        class eTWTW_CORE_COMMMGR_TEST_API_SCHEMA {

        public:

            static constexpr BaseType TEST_STR_FIELD = 2983;
            static constexpr BaseType TEST_BOOL_FIELD = 2984;
        };

        class eTWDB_TEST_OBJ {

        public:

            static constexpr BaseType NAME = 677;
        };

        class eTWSTUDENT_OBJ {

        public:

            static constexpr BaseType NAME = 677;
        };

        class eTWMY_COMPANY_OBJ {

        public:

            static constexpr BaseType NAME = 677;
        };

        class eTWDBTEST_EMBEDDED_OBJ {

        public:

            static constexpr BaseType FULLNAME = 2991;
        };

        class eTWFULLNAME {

        public:

            static constexpr BaseType FIRSTNAME = 2871;
            static constexpr BaseType LASTNAME = 2872;
        };

        class eTWDATA_DC_TEST_OBJ {

        public:

            static constexpr BaseType TWAPPFIELD1STRID = 2993;
            static constexpr BaseType TWAPPFIELD2VERID = 2994;
            static constexpr BaseType TWAPPFIELD3ISACTIVE = 2995;
            static constexpr BaseType TWAPPFIELD4STRREPEATED = 2996;
            static constexpr BaseType TWAPPFIELD5 = 2997;
        };

        class eTWTW_ADMIN_TEST_1 {

        public:

            static constexpr BaseType TW_ADMIN_TEST_OBJ_1 = 3006;
        };

        class eTWTW_ADMIN_TEST_2 {

        public:

            static constexpr BaseType TW_ADMIN_TEST_OBJ_2 = 3008;
        };

        class eTWTW_ADMIN_TEST_3 {

        public:

            static constexpr BaseType TW_ADMIN_TEST_OBJ_3 = 3010;
        };

        class eTWTW_ADMIN_TEST_OBJ_3 {

        public:

            static constexpr BaseType TW_NAME = 3011;
            static constexpr BaseType TW_ADDRESS = 3012;
            static constexpr BaseType TW_STREET = 3013;
        };

        class eTWTEST_NFW_SCP {

        public:

            static constexpr BaseType TW_EVENT_COMPLETED = 3015;
            static constexpr BaseType TW_PREMISE_START_FROM = 3016;
            static constexpr BaseType TW_PREMISE_RESULT = 3017;
            static constexpr BaseType TW_PREMISE_TEST_QUERY_ID = 3018;
            static constexpr BaseType TW_SOME_STRING_DATA = 3019;
            static constexpr BaseType TW_SOME_INT_DATA = 3020;
            static constexpr BaseType TW_SOME_OBJ_DATA = 3021;
        };

        class eTWTEST_ADMIN_SERVICES {

        public:

            static constexpr BaseType TEST_ADMIN_TW_QUERY_ID = 3023;
            static constexpr BaseType TEST_ADMIN_TW_LANGUAGE_LIST = 3024;
        };

    };
    */

    static constexpr TUInt64         Size = 4;
    static constexpr TUInt64         SizeBits = 18;
    static constexpr TUInt64         CeilingLimit = 262143;
    static constexpr bool            IsCompileTime = false;

private:
    Enum vID;
};

using eTWSchemaDCSection = eTWSchemaID::eTWSchemaDCSection;
using eTWSchemaObjType = eTWSchemaID::eTWSchemaObjType;
